{"kind":"Notebook","sha256":"2dfe21ae7980a3f84a23b97be79e9d2e7d28adecd7aabd8409f9270219a391c4","slug":"advdiff-7","location":"/chapter13/section2/python/advdiff.ipynb","dependencies":[],"frontmatter":{"numbering":{"heading_1":{"enabled":false},"heading_2":{"enabled":false},"heading_3":{"enabled":false},"heading_4":{"enabled":false},"heading_5":{"enabled":false},"heading_6":{"enabled":false}},"kernelspec":{"name":"python3","display_name":"myst","language":"python"},"authors":[{"nameParsed":{"literal":"Tobin A. Driscoll","given":"Tobin A.","family":"Driscoll"},"name":"Tobin A. Driscoll","email":"driscoll@udel.edu","id":"contributors-myst-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Richard J. Braun","given":"Richard J.","family":"Braun"},"name":"Richard J. Braun","id":"contributors-myst-generated-uid-1"}],"github":"https://github.com/fncbook/fnc","math":{"\\float":{"macro":"\\mathbb{F}"},"\\real":{"macro":"\\mathbb{R}"},"\\complex":{"macro":"\\mathbb{C}"},"\\nat":{"macro":"\\mathbb{N}"},"\\integer":{"macro":"\\mathbb{Z}"},"\\rmn":{"macro":"\\mathbb{R}^{#1 \\times #2}"},"\\dd":{"macro":"\\frac{d #1}{d #2}"},"\\ddd":{"macro":"\\frac{d^2 #1}{d #2^2}"},"\\pp":{"macro":"\\frac{\\partial #1}{\\partial #2}"},"\\ppp":{"macro":"\\frac{\\partial^2 #1}{\\partial #2^2}"},"\\ppdd":{"macro":"\\frac{\\partial^2 #1}{\\partial #2 \\partial #3}"},"\\abs":{"macro":"\\left\\lvert #1 \\right\\rvert"},"\\norm":{"macro":"\\left\\lVert #1 \\right\\rVert"},"\\twonorm":{"macro":"\\norm{#1}_2"},"\\onenorm":{"macro":"\\norm{#1}_1"},"\\infnorm":{"macro":"\\norm{#1}_\\infty"},"\\anynorm":{"macro":"\\norm{#1}_#2"},"\\innerprod":{"macro":"\\langle #1,#2 \\rangle"},"\\pr":{"macro":"^{(#1)}"},"\\kron":{"macro":"#1 \\otimes #2"},"\\eye":{"macro":"\\mathbf{e}_#1"},"\\meye":{"macro":"\\mathbf{I}"},"\\Qhat":{"macro":"\\hat{\\mathbf{Q}}"},"\\Rhat":{"macro":"\\hat{\\mathbf{R}}"},"\\bfalpha":{"macro":"\\mathbf{alpha}"},"\\bfdelta":{"macro":"\\mathbf{delta}"},"\\bfzero":{"macro":"\\boldsymbol{0}"},"\\macheps":{"macro":"\\epsilon_\\text{mach}"},"\\fl":{"macro":"\\operatorname{fl}"},"\\diag":{"macro":"\\operatorname{diag}"},"\\ign":{"macro":"\\operatorname{sign}"},"\\Re":{"macro":"\\operatorname{Re}"},"\\Im":{"macro":"\\operatorname{Im}"},"\\ee":{"macro":"\\times 10^"},"\\lnorm":{"macro":"\\|"},"\\rnorm":{"macro":"\\|"},"\\floor":{"macro":"\\lfloor#1\\rfloor"},"\\cI":{"macro":"\\mathcal{I}"},"\\mtx":{"macro":"\\operatorname{mtx}"},"\\myvec":{"macro":"\\operatorname{vec}"},"\\argmin":{"macro":"\\operatorname{argmin}"}},"abbreviations":{"IVP":"initial-value problem","BVP":"boundary-value problem","ONC":"matrix with orthonormal columns","SVD":"singular value decomposition","EVD":"eigenvalue decomposition","SPD":"symmetric positive definite","HPD":"hermitian positive definite","PDE":"partial differential equation","ODE":"ordinary differential equation"},"exports":[{"format":"ipynb","filename":"advdiff.ipynb","url":"/build/advdiff-1b5457b0e7b37359c935f1db50f5ddc2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:55.334369Z","iopub.status.busy":"2025-01-09T20:30:55.334288Z","iopub.status.idle":"2025-01-09T20:30:55.759390Z","shell.execute_reply":"2025-01-09T20:30:55.759119Z"},"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"exec(open(\"../../../python/FNC_init.py\").read())","visibility":"show","key":"DZcEEzAyF5"},{"type":"output","id":"k-e9R0MiM-KMvhGLpY-pU","data":[],"visibility":"show","key":"AA6LNJi92K"}],"visibility":"remove","key":"FdoN1spgmg"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"crossReference","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Demo ","key":"IkxwiGlRvB"},{"type":"text","value":"13.2.3","key":"F6gT5plZho"}],"key":"qiaAbKcgp1"}],"identifier":"demo-diffadv-advdiff","label":"demo-diffadv-advdiff","kind":"proof:example","template":"ExampleÂ %s","enumerator":"13.2.3","resolved":true,"html_id":"demo-diffadv-advdiff","remote":true,"url":"/diffadv","dataUrl":"/diffadv.json","key":"Pmv9UT3xkO"}],"key":"OskAQqauyB"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"The first step is to define a discretization of the domain.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"dOj5IHvV5E"}],"key":"cEc8aPxJaE"}],"key":"tnEspEUoip"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:55.760972Z","iopub.status.busy":"2025-01-09T20:30:55.760815Z","iopub.status.idle":"2025-01-09T20:30:55.766111Z","shell.execute_reply":"2025-01-09T20:30:55.765899Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"m, n = 50, 36\nx, Dx, Dxx = FNC.diffcheb(m, [-1, 1])\ny, Dy, Dyy = FNC.diffcheb(n, [-1, 1])\nmtx, X, Y, _, _, _ = FNC.tensorgrid(x, y)\nu_init = lambda x, y: (1 + y) * (1 - x)**4 * (1 + x)**2 * (1 - y**4)","key":"mMf2fAZGVQ"},{"type":"output","id":"f5vlm8F4Ru1APyRiAWMVl","data":[],"key":"OOxckiiWFF"}],"key":"NkgwYMIskW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"There are really two grids now: the full grid and the subset grid of interior points. Since the ","key":"AXDAwazXUL"},{"type":"abbreviation","title":"initial-value problem","children":[{"type":"text","value":"IVP","key":"e8VGzFiSCa"}],"key":"AToxEqDrfj"},{"type":"text","value":" unknowns are on the interior grid, that is the one we need to change shapes on. We also need the functions ","key":"BTvZui1Kym"},{"type":"inlineCode","value":"extend","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xWdjpvYKBy"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J9pNL0DvGK"},{"type":"inlineCode","value":"chop","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eELWUdLRdj"},{"type":"text","value":" to add and remove boundary values.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q8qC8Gwyo1"}],"key":"dE44fphfdw"}],"key":"Rb5oa8c9dc"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:55.767299Z","iopub.status.busy":"2025-01-09T20:30:55.767203Z","iopub.status.idle":"2025-01-09T20:30:55.769705Z","shell.execute_reply":"2025-01-09T20:30:55.769466Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"_, _, _, vec, unvec, _ = FNC.tensorgrid(x[1:-1], y[1:-1])\n\ndef chop(U):\n    return U[1:-1, 1:-1]\n\ndef extend(U):\n    UU = zeros((m+1, n+1))\n    UU[1:-1, 1:-1] = U\n    return UU\n\npack = lambda U: vec(chop(U))          # restrict to interior, then vectorize\nunpack = lambda u: extend(unvec(u))    # unvectorize, then extend to boundary\n","key":"wheLyyQ75k"},{"type":"output","id":"NUJYXoJX4MPffbLCX5L1M","data":[],"key":"HWuLnu6wR9"}],"key":"RPJC1nvp9k"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can define and solve the ","key":"HWx7do7sUa"},{"type":"abbreviation","title":"initial-value problem","children":[{"type":"text","value":"IVP","key":"ixQ0Zh4puz"}],"key":"LoO0SeMsGJ"},{"type":"text","value":" using a stiff solver.","key":"xfrZasBM5j"}],"key":"bASaUN6BVk"}],"key":"QbfeJzN6Hu"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:55.770909Z","iopub.status.busy":"2025-01-09T20:30:55.770810Z","iopub.status.idle":"2025-01-09T20:30:56.725561Z","shell.execute_reply":"2025-01-09T20:30:56.725261Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.integrate import solve_ivp\nep = 0.05\ndef dw_dt(t, w):\n    U = unpack(w)\n    Uyy = Dxx @ U\n    Uxx = U @ Dyy.T \n    dU_dt = 1 - Dx @ U + ep * (Uxx + Uyy)\n    return pack(dU_dt)\n\nU0 = mtx(u_init)\nsol = solve_ivp(dw_dt, (0, 2), pack(U0), method=\"BDF\", dense_output=True)","key":"bg4djW6nNA"},{"type":"output","id":"5v-WgrZl8JH8FVJUgpfLd","data":[],"key":"W9zZglpt8g"}],"key":"I47Hg6WsmS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"When we evaluate the solution at a particular value of ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wx18bEP7Ca"},{"type":"inlineMath","value":"t","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>","key":"t6lYZ5Qwl0"},{"type":"text","value":", we get a vector of the interior grid values. The same ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AiW2ks5uKs"},{"type":"inlineCode","value":"unpack","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WkU6Kjv9pT"},{"type":"text","value":" function above converts this to a complete matrix of grid values.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"StCuZubWDW"}],"key":"Yv8H1MD7QJ"}],"key":"ULv0wEGpaG"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:56.727064Z","iopub.status.busy":"2025-01-09T20:30:56.726968Z","iopub.status.idle":"2025-01-09T20:30:56.973655Z","shell.execute_reply":"2025-01-09T20:30:56.973357Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"U = lambda t: unpack(sol.sol(t))    # function of time on the grid\n\npcolormesh(X.T, Y.T, U(0.5).T, cmap=\"Blues\", shading=\"gouraud\")\ncolorbar()\nxlabel(\"$x$\"),  ylabel(\"$y$\")\naxis(\"equal\"),  title(\"Solution at t=0.5\");","key":"pFqZkKlaMk"},{"type":"output","id":"Ep982SLabwqFqsplCtEwb","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"aa5e9308ab9bdc28a9ec5a90014c0339","path":"/build/aa5e9308ab9bdc28a9ec5a90014c0339.png"},"text/plain":{"content":"<Figure size 700x400 with 2 Axes>","content_type":"text/plain"}}}],"key":"PjFurZUaC4"}],"key":"riaul7edHR"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-01-09T20:30:56.975041Z","iopub.status.busy":"2025-01-09T20:30:56.974941Z","iopub.status.idle":"2025-01-09T20:31:00.849114Z","shell.execute_reply":"2025-01-09T20:31:00.848715Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"from matplotlib import animation\nfig, ax = subplots()\nobj = ax.pcolormesh(X.T, Y.T, U(0).T, vmin=0, vmax=2, cmap=\"Blues\", shading=\"gouraud\")\ntime_text = ax.text(0.05, 0.9, '', transform=ax.transAxes)\nax.set_xlabel(\"$x$\"),  ax.set_ylabel(\"$y$\")\nax.set_aspect(\"equal\")\nax.set_title(\"Advection-diffusion in 2d\")\ndef snapshot(t):\n    global obj\n    obj.remove()\n    obj = ax.pcolormesh(X.T, Y.T, U(t).T, vmin=0, vmax=2, cmap=\"Blues\", shading=\"gouraud\")\n    time_text.set_text(f\"t = {t:.2f}\")\n\nanim = animation.FuncAnimation(fig, snapshot, frames=linspace(0, 2, 91))\nanim.save(\"advdiff-2d.mp4\", fps=30)\nclose()","key":"anon9NJE83"},{"type":"output","id":"cGg1GQgluv4BE31Q-r3Wp","data":[],"key":"k4ujX2O7fn"}],"key":"PeupfIlEwB"}],"key":"hmLYpax1qR"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Heat","url":"/heat-5","group":"Chapter 13"},"next":{"title":"Wave","url":"/wave-3","group":"Chapter 13"}}},"domain":"http://localhost:3000"}