{"version":1,"kind":"Notebook","sha256":"17ae4d45471ed20aa4e3f0eabfd5c64bbe00a54e299badfdf85e54fb30a2c5f8","slug":"chapter13-1","location":"/matlab/chapter13.md","dependencies":[],"frontmatter":{"title":"Chapter 13","numbering":{"heading_1":{"enabled":false},"heading_2":{"enabled":false},"heading_3":{"enabled":false},"heading_4":{"enabled":false},"heading_5":{"enabled":false},"heading_6":{"enabled":false},"title":{"offset":2}},"kernelspec":{"name":"jupyter_matlab_kernel","display_name":"MATLAB","language":"matlab"},"content_includes_title":false,"authors":[{"nameParsed":{"literal":"Tobin A. Driscoll","given":"Tobin A.","family":"Driscoll"},"name":"Tobin A. Driscoll","email":"driscoll@udel.edu","id":"contributors-myst-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Richard J. Braun","given":"Richard J.","family":"Braun"},"name":"Richard J. Braun","id":"contributors-myst-generated-uid-1"}],"github":"https://github.com/fncbook/fnc","math":{"\\float":{"macro":"\\mathbb{F}"},"\\real":{"macro":"\\mathbb{R}"},"\\complex":{"macro":"\\mathbb{C}"},"\\nat":{"macro":"\\mathbb{N}"},"\\integer":{"macro":"\\mathbb{Z}"},"\\rmn":{"macro":"\\mathbb{R}^{#1 \\times #2}"},"\\dd":{"macro":"\\frac{d #1}{d #2}"},"\\ddd":{"macro":"\\frac{d^2 #1}{d #2^2}"},"\\pp":{"macro":"\\frac{\\partial #1}{\\partial #2}"},"\\ppp":{"macro":"\\frac{\\partial^2 #1}{\\partial #2^2}"},"\\ppdd":{"macro":"\\frac{\\partial^2 #1}{\\partial #2 \\partial #3}"},"\\abs":{"macro":"\\left\\lvert #1 \\right\\rvert"},"\\norm":{"macro":"\\left\\lVert #1 \\right\\rVert"},"\\twonorm":{"macro":"\\norm{#1}_2"},"\\onenorm":{"macro":"\\norm{#1}_1"},"\\infnorm":{"macro":"\\norm{#1}_\\infty"},"\\anynorm":{"macro":"\\norm{#1}_#2"},"\\innerprod":{"macro":"\\langle #1,#2 \\rangle"},"\\pr":{"macro":"^{(#1)}"},"\\kron":{"macro":"#1 \\otimes #2"},"\\eye":{"macro":"\\mathbf{e}_#1"},"\\meye":{"macro":"\\mathbf{I}"},"\\Qhat":{"macro":"\\hat{\\mathbf{Q}}"},"\\Rhat":{"macro":"\\hat{\\mathbf{R}}"},"\\bfalpha":{"macro":"\\mathbf{alpha}"},"\\bfdelta":{"macro":"\\mathbf{delta}"},"\\bfzero":{"macro":"\\boldsymbol{0}"},"\\macheps":{"macro":"\\epsilon_\\text{mach}"},"\\fl":{"macro":"\\operatorname{fl}"},"\\diag":{"macro":"\\operatorname{diag}"},"\\ign":{"macro":"\\operatorname{sign}"},"\\Re":{"macro":"\\operatorname{Re}"},"\\Im":{"macro":"\\operatorname{Im}"},"\\ee":{"macro":"\\times 10^"},"\\lnorm":{"macro":"\\|"},"\\rnorm":{"macro":"\\|"},"\\floor":{"macro":"\\lfloor#1\\rfloor"},"\\cI":{"macro":"\\mathcal{I}"},"\\mtx":{"macro":"\\operatorname{mtx}"},"\\myvec":{"macro":"\\operatorname{vec}"},"\\argmin":{"macro":"\\operatorname{argmin}"}},"abbreviations":{"IVP":"initial-value problem","BVP":"boundary-value problem","TPBVP":"two-point boundary-value problem","ONC":"matrix with orthonormal columns","SVD":"singular value decomposition","EVD":"eigenvalue decomposition","SPD":"symmetric positive definite","HPD":"hermitian positive definite","PDE":"partial differential equation","ODE":"ordinary differential equation"},"edit_url":"https://github.com/fncbook/fnc/blob/master/matlab/chapter13.md","exports":[{"format":"md","filename":"chapter13.md","url":"/build/chapter13-40886aab398e7db3c41e465468a8bf9e.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"BUdaHhH24h"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"tNeVeZVrCi"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Create a tensor-product grid","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Xp0Wkq43kY"}],"key":"XM41ed2yUK"},{"type":"include","file":"FNC-matlab/tensorgrid.m","literal":true,"children":[{"type":"code","value":"function [mtx, X, Y, vec, unvec, is_boundary] = tensorgrid(x, y)\n% TENSORGRID Tensor-product grid.\n% Input:\n%   x, y           1d projections of the grid nodes (lengths m and n)\n% Output:\n%   mtx            evaluate a function on the grid (function)\n%   X, Y           mtx applied to the coordinate functions (m×n)\n%   vec            convert grid shape to vector shape (function)\n%   unvec          convert vector shape to grid shape (function)\n%   is_boundary    indicator of boundary nodes (logical m×n)\n    m = length(x) - 1;\n    n = length(y) - 1;\n    vec = @(U) U(:);\n    unvec = @(u) reshape(u, m+1, n+1);\n    [X, Y] = ndgrid(x, y);\n    function F = grideval(f)\n        F = zeros(size(X));\n        for k = 1:numel(X)\n            F(k) = f(X(k), Y(k));\n        end\n    end\n    mtx = @grideval;\n    \n    % Identify boundary points.\n    is_boundary = true(m+1, n+1);\n    is_boundary(2:m, 2:n) = false;\nend","lang":"matlab","showLineNumbers":true,"filename":"tensorgrid.m","key":"QgNAWtMwml"}],"key":"bRkz7GF3FN"}],"label":"function-tensorgrid-matlab","identifier":"function-tensorgrid-matlab","html_id":"function-tensorgrid-matlab","key":"anEbdc1em9"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Solution of Poisson’s equation by finite differences","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"kYKQXnvAeE"}],"key":"TcUolRQtiG"},{"type":"include","file":"FNC-matlab/poissonfd.m","literal":true,"children":[{"type":"code","value":"function [X, Y, U] = poissonfd(f,g,m,xspan,n,yspan)\r\n%POISSONFD   Solve Poisson's equation by finite differences.\r\n% Input:\r\n%   f            forcing function (function of x,y)\r\n%   g            boundary condition (function of x,y)\r\n%   m            number of grid points in x (integer)\r\n%   xspan        endpoints of the domain of x (2-vector)\r\n%   n            number of grid points in y (integer)\r\n%   yspan        endpoints of the domain of y (2-vector)\r\n%\r\n% Output:\r\n%   U            solution (m+1 by n+1)\r\n%   X,Y          grid matrices (m+1 by n+1)\r\n\r\n% Discretize the domain.\r\n[x, Dx, Dxx] = diffmat2(m, xspan);\r\n[y, Dy, Dyy] = diffmat2(n, yspan);\r\n[mtx, X, Y, vec, unvec, is_boundary] = tensorgrid(x, y);\r\n\r\n% Form the collocated PDE as a linear system. \r\nIx = speye(m+1);  Iy = speye(n+1);\r\nA = kron(Iy, sparse(Dxx)) + kron(sparse(Dyy), Ix);  % Laplacian matrix\r\nb = vec(mtx(f));\r\n\r\n% Replace collocation equations on the boundary.\r\nscale = max(abs(A(n+2, :)));\r\nI = speye(size(A));\r\nidx = vec(is_boundary);\r\nA(idx, :) = scale * I(idx, :);           % Dirichet assignment\r\nb(idx) = scale * g( X(idx),Y(idx) );     % assigned values\r\n\r\n% Solve the linear sytem and reshape the output.\r\nu = A \\ b;\r\nU = unvec(u);","lang":"matlab","showLineNumbers":true,"filename":"poissonfd.m","key":"mRZld7Wn8W"}],"key":"tAAYxa4tYv"}],"label":"function-poissonfd-matlab","identifier":"function-poissonfd-matlab","html_id":"function-poissonfd-matlab","key":"HPNIGQ5ZNA"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Solution of elliptic ","key":"rGEQbKjW7d"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"trxuWLiU4F"}],"key":"Gn1xDdwknH"},{"type":"text","value":" by Chebyshev collocation","key":"DkVaNTWPez"}],"key":"WjJeCCYFGG"},{"type":"include","file":"FNC-matlab/elliptic.m","literal":true,"children":[{"type":"code","value":"function u = elliptic(phi, g, m, xspan, n, yspan)\n%ELLIPTIC   Solve an elliptic PDE in 2d.\n% Input:\n%   phi          defines phi)(x,y,u,u_x,u_xx,u_y,u_yy) = 0 (function)\n%   g            boundary condition (function)\n%   m, xspan     size and interval of x discretization (integer, 2-vector)\n%   n, yspan     size and interval of y discretization (integer, 2-vector)\n% Output:\n%   U            solution (n+1 by n+1)\n%   X,Y          coordinate matrices (n+1 by n+1)\n\n    % Discretize the domain.\n    [x, Dx, Dxx] = diffcheb(m, xspan);\n    [y, Dy, Dyy] = diffcheb(n, yspan);\n    [mtx, X, Y, vec, unvec, is_boundary] = tensorgrid(x, y);\n\n    % Identify boundary locations and evaluate the boundary condition.\n    idx = vec(is_boundary);\n    gb = g(X(idx), Y(idx));\n\n    % Evaluate the PDE+BC residual.\n    function r = residual(u)\n        U = unvec(u);\n        R = phi(X, Y, U, Dx * U, Dxx * U, U * Dy', U * Dyy');  % PDE\n        R(idx) = u(idx) - gb;                                  % boundary\n        r = vec(R);\n    end\n\n    % Solve the equation.\n    u = levenberg(@residual, vec(zeros(size(X))));\n    U = unvec(u(:, end));\n\n    function u = evaluate(xi, eta)\n        v = zeros(1, n+1);\n        for j = 1:n+1\n            v(j) = chebinterp(x, U(:, j), xi);\n        end\n        u = chebinterp(y, v, eta);\n    end\n\n    u = @evaluate;\nend\n\nfunction f = chebinterp(x, v, xi)\n    n = length(x) - 1;\n    w = (-1.0) .^ (0:n)';\n    w([1, n+1]) = w([1, n+1]) / 2;\n\n    terms = w ./ (xi - x(:));\n    if any(isinf(terms))     % exactly at a node\n        f = v(xi == x);\n    else\n        f = sum(v(:) .* terms) / sum(terms);\n    end\nend\n","lang":"matlab","showLineNumbers":true,"filename":"elliptic.m","key":"Q2mMQIKIS8"}],"key":"zLCGxuyoYG"}],"label":"function-elliptic-matlab","identifier":"function-elliptic-matlab","html_id":"function-elliptic-matlab","key":"LsCLp4s53Z"},{"type":"heading","depth":2,"position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"Examples","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"Oj7bvzfbee"}],"identifier":"examples","label":"Examples","html_id":"examples","implicit":true,"key":"Ji7ClHwHm0"}],"key":"p8CG28gInT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"cd  /Users/driscoll/Documents/GitHub/fnc/matlab\nFNC_init;\npwd","visibility":"show","key":"KP42IYzOI1"},{"type":"output","id":"eWcYQ8ZkTykiPKtNbkGZt","data":[{"output_type":"stream","name":"stdout","text":"Starting MATLAB ...\n"},{"output_type":"stream","name":"stdout","text":"Executing ..."},{"output_type":"execute_result","execution_count":1,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>ans = '/Users/driscoll/Documents/GitHub/fnc/matlab'</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"ans = '/Users/driscoll/Documents/GitHub/fnc/matlab'","content_type":"text/plain"}}}],"visibility":"show","key":"D8AdMrvUxa"}],"data":{"tags":[]},"visibility":"remove","key":"rdeONU3dBW"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"13.1 ","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"xzHWFdh1RI"},{"type":"link","identifier":"section-twodim-tensorprod","label":"section-twodim-tensorprod","kind":"narrative","position":{"start":{"line":49,"column":6},"end":{"line":49,"column":32}},"url":"/tensorprod","internal":true,"dataUrl":"/tensorprod.json","children":[{"type":"text","value":"Tensor-product discretizations","key":"ybiB8IILFO"}],"key":"Kgf5x8Rtbc"}],"identifier":"id-13-1","label":"13.1 ","html_id":"id-13-1","implicit":true,"key":"LtX5XmVcK5"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-tensorprod-gridfun","label":"demo-tensorprod-gridfun","kind":"proof:example","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":25}},"children":[{"type":"text","value":"Example ","key":"CuLvPqHvt4"},{"type":"text","value":"13.1.2","key":"YkvOGmgyFW"}],"template":"Example %s","enumerator":"13.1.2","resolved":true,"html_id":"demo-tensorprod-gridfun","remote":true,"url":"/tensorprod","dataUrl":"/tensorprod.json","key":"QwdWkqYHqg"}],"key":"fdyZZYvoqF"},{"type":"paragraph","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"children":[{"type":"text","value":"Here is the grid from ","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"NyfDC3uoMr"},{"type":"crossReference","kind":"proof:example","identifier":"example-tensorprod-smallgrid","label":"example-tensorprod-smallgrid","children":[{"type":"text","value":"Example ","key":"B4ZgF9VYbl"},{"type":"text","value":"13.1.1","key":"VUQeK7K4iZ"}],"template":"Example %s","enumerator":"13.1.1","resolved":true,"html_id":"example-tensorprod-smallgrid","remote":true,"url":"/tensorprod","dataUrl":"/tensorprod.json","key":"ienofqQkcG"},{"type":"text","value":".","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"cptRKOMYo4"}],"key":"W8JhUtqJV9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 4;   \nx = linspace(0, 2, m+1);\nn = 2;   \ny = linspace(1, 3, n+1);","key":"bnWnRtIIwo"},{"type":"output","id":"oT4sdhoeTA0hTsny4KZON","data":[],"key":"qKKuZ033jy"}],"data":{},"key":"dZanvUoG5e"},{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"For a given ","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"HInWJkMTt7"},{"type":"inlineMath","value":"f(x,y)","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>","key":"ThCYc8o96C"},{"type":"text","value":" we can find ","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"J8Mw70DZHb"},{"type":"inlineMath","value":"\\operatorname{mtx}(f)","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">mtx</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{mtx}(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">mtx</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>","key":"i2DSNrE3hN"},{"type":"text","value":" by using a comprehension syntax.","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"h2FUCh1apL"}],"key":"HdjoYhNrFk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"[mtx, X, Y] = tensorgrid(x, y);\nf = @(x, y) cos(pi * x .* y - y);\nF = mtx(f)","key":"Qpv7YQ3B3U"},{"type":"output","id":"sB45w3YcVgyjaKhWDgU2f","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>F = 201×4 double\n  -0.963438925630693   0.960987220207360   0.878314850294098   0.172349192895784\n  -0.268297604787245  -0.293455668900090   0.513005785150584  -0.219172494459358\n   0.686237539476174  -0.950662269296549  -0.837067595503674   0.265496117774702\n   0.977308769180261   0.326903791746152  -0.580308613672124  -0.311214452386638\n   0.323504406347563   0.939160478872845   0.790408984747100   0.356223267800812\n  -0.643068476808790  -0.359947235337166   0.643859945306502  -0.400419951113969\n  -0.987913890379456  -0.926496087180383  -0.738640649999034   0.443703740953776\n  -0.377630534021439   0.392545094683611  -0.703248942411424  -0.485975957198886\n   0.597751229150975   0.912684771665201   0.682097255853361   0.527140225955025\n   0.995218862577755  -0.424657016391594   0.758091675414472  -0.567102699269958\n...</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"F = 201×4 double\n  -0.963438925630693   0.960987220207360   0.878314850294098   0.172349192895784\n  -0.268297604787245  -0.293455668900090   0.513005785150584  -0.219172494459358\n   0.686237539476174  -0.950662269296549  -0.837067595503674   0.265496117774702\n   0.977308769180261   0.326903791746152  -0.580308613672124  -0.311214452386638\n   0.323504406347563   0.939160478872845   0.790408984747100   0.356223267800812\n  -0.643068476808790  -0.359947235337166   0.643859945306502  -0.400419951113969\n  -0.987913890379456  -0.926496087180383  -0.738640649999034   0.443703740953776\n  -0.377630534021439   0.392545094683611  -0.703248942411424  -0.485975957198886\n   0.597751229150975   0.912684771665201   0.682097255853361   0.527140225955025\n   0.995218862577755  -0.424657016391594   0.758091675414472  -0.567102699269958\n...","content_type":"text/plain"}}}],"key":"xTR8bzUcdO"}],"data":{},"key":"UaNG4fTBEA"},{"type":"paragraph","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"We can make a nice plot of the function by first choosing a much finer grid. However, the contour and surface plotting functions expect the ","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"I1Uq8fmKvl"},{"type":"emphasis","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"transpose","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"b4KybUFwY8"}],"key":"e2i0lk5UIK"},{"type":"text","value":" of mtx(","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"Mq9LUqGTuN"},{"type":"inlineMath","value":"f","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>","key":"FPcEMPn7ys"},{"type":"text","value":").","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"FA67uJYgrt"}],"key":"xSyY8xCYRu"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"ce14fw4TN1"}],"key":"lueTsiZy8q"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"To emphasize departures from a zero level, use a colormap such as ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"wvOMvYk4yp"},{"type":"inlineCode","value":"redsblues","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"KBNlN8MK5t"},{"type":"text","value":" and set the color limits to be symmetric around zero.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"E4eM9IIPbX"}],"key":"b0bILEOup0"}],"class":"dropdown","key":"kRIco6M4hb"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"XjpIikO1cP"}],"key":"KxvBZiWjgZ"},{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"The contour and surface plotting functions expect the ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"Wte0QcwG5N"},{"type":"emphasis","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"transpose","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"SVLVDwI8lf"}],"key":"rusOlYiAHO"},{"type":"text","value":" of the outputs of ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"DdT814Qz4A"},{"type":"inlineCode","value":"mtx","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"DkkjSkOgUP"},{"type":"text","value":". If you forget to do that, the ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"S5UsBgbmAF"},{"type":"inlineMath","value":"x","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>","key":"vF1JoUtBSV"},{"type":"text","value":" and ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"g1szSTNdUB"},{"type":"inlineMath","value":"y","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>","key":"SpFQZvkREC"},{"type":"text","value":" axes will be swapped.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"VHhoIeSM9H"}],"key":"qyCRCXl6B5"}],"key":"VpF76XpoS6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 80;  x = linspace(0, 2, m+1);\nn = 60;  y = linspace(1, 3, n+1);\n[mtx, X, Y] = tensorgrid(x, y);\nF = mtx(f);\n\npcolor(X', Y', F')\nshading interp\ncolormap(redsblues),  colorbar\naxis equal\nxlabel(\"x\"),  ylabel(\"y\")","key":"G81CD4HUkj"},{"type":"output","id":"CM97J5JPOq1WSzXZoYDC2","data":[{"output_type":"stream","name":"stderr","text":"Index in position 1 is invalid. Array indices must be positive integers or logical values.\n\nError in tensorgrid/grideval (line 19)\n            F(k) = f(X(k), Y(k));"}],"key":"KaoBCU5pLD"}],"data":{},"key":"VgUj5mHcYv"}],"label":"demo-tensorprod-gridfun-matlab","identifier":"demo-tensorprod-gridfun-matlab","html_id":"demo-tensorprod-gridfun-matlab","key":"ipn5Twxpqh"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-tensorprod-disksphere","label":"demo-tensorprod-disksphere","kind":"proof:example","position":{"start":{"line":96,"column":1},"end":{"line":96,"column":28}},"children":[{"type":"text","value":"Example ","key":"iHAhnd9Ysd"},{"type":"text","value":"13.1.3","key":"c4Xs7QRmLA"}],"template":"Example %s","enumerator":"13.1.3","resolved":true,"html_id":"demo-tensorprod-disksphere","remote":true,"url":"/tensorprod","dataUrl":"/tensorprod.json","key":"Jv9aNsxm19"}],"key":"RZeSvHFN44"},{"type":"paragraph","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"children":[{"type":"text","value":"For a function given in polar form, such as ","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"jtvO0VMedS"},{"type":"inlineMath","value":"f(r,\\theta)=1-r^4","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>r</mi><mn>4</mn></msup></mrow><annotation encoding=\"application/x-tex\">f(r,\\theta)=1-r^4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span>","key":"UiL6gwKNgb"},{"type":"text","value":", construction of a function over the unit disk is straightforward using a grid in ","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"QIAn2j3TkA"},{"type":"inlineMath","value":"(r,\\theta)","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(r,\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span>","key":"AwjAnnwmHX"},{"type":"text","value":" space.","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"wbqB0Z96ZO"}],"key":"AkJuH8BFGa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"r = linspace(0, 1, 41);\ntheta = linspace(0, 2*pi, 121);\n[mtx, R, Theta] = tensorgrid(r, theta);\nF = mtx(@(r, theta) 1 - r.^4);\nclf,  colormap(parula)\ncontourf(R', Theta', F', 20)\nshading flat\nxlabel(\"r\"),  ylabel(\"\\theta\"), \ntitle(\"A polar function\")","key":"NohaEcnIW9"},{"type":"output","id":"yFVbuOus1oqIWwQHjyEsg","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ffef6e9ec656338b15adaf78ee513476","path":"/build/ffef6e9ec656338b15adaf78ee513476.png"}}}],"key":"m3QykuXYpa"}],"data":{},"key":"CIDejbcuf4"},{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"Of course, we are used to seeing such plots over the ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"xWQJK626cL"},{"type":"inlineMath","value":"(x,y)","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>","key":"nGaTfmWy0H"},{"type":"text","value":" plane, not the ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"fTBK86UGqB"},{"type":"inlineMath","value":"(r,\\theta)","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>θ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(r,\\theta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mclose\">)</span></span></span></span>","key":"WiSWDCUeBg"},{"type":"text","value":" plane. For this we create matrices for the coordinate functions ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"NOAn0xE04w"},{"type":"inlineMath","value":"x","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>","key":"fYzYw5RHKR"},{"type":"text","value":" and ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"xpeTQdSiMd"},{"type":"inlineMath","value":"y","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>","key":"AxQ2RDpUtn"},{"type":"text","value":".","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"ObI5S2cYGp"}],"key":"xmeCpFJNcE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"X = R .* cos(Theta);  Y = R .* sin(Theta);\ncontourf(X', Y', F', 20)\naxis equal,  shading interp  \nxlabel('x'),  ylabel('y')\ntitle('Function over the unit disk')","key":"bAQYuCJSfZ"},{"type":"output","id":"gNgZjqiQWq7fblHkzUhlr","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"42deb8159cd7baa061d250631d3af21a","path":"/build/42deb8159cd7baa061d250631d3af21a.png"}}}],"key":"b1JGV5y7IQ"}],"data":{},"key":"Qm8m0z4cGl"},{"type":"paragraph","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"children":[{"type":"text","value":"In such functions the values along the line ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"Ig5746cBPj"},{"type":"inlineMath","value":"r=0","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">r=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>","key":"icC5O26e0y"},{"type":"text","value":" must be identical, and the values on the line ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"NcJtB7K5T6"},{"type":"inlineMath","value":"\\theta=0","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\theta=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>","key":"VmHcjDSblM"},{"type":"text","value":" should be identical to those on ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"vbpYZwzLzL"},{"type":"inlineMath","value":"\\theta=2\\pi","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mo>=</mo><mn>2</mn><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\theta=2\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>","key":"wycGvwLymC"},{"type":"text","value":". Otherwise the interpretation of the domain as the unit disk is nonsensical. If the function is defined in terms of ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"af2F0HEePp"},{"type":"inlineMath","value":"x","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>","key":"tykqYcamUp"},{"type":"text","value":" and ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"anLJTwiuR4"},{"type":"inlineMath","value":"y","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>","key":"EfAE2xtxHb"},{"type":"text","value":", then those can be defined in terms of ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"cox9CV9Isk"},{"type":"inlineMath","value":"r","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>","key":"mp4WYFeI5Y"},{"type":"text","value":" and ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"RtbJv2l6XK"},{"type":"text","value":"θ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"aywrfRQr0I"},{"type":"text","value":" using ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"bAWIx3onui"},{"type":"crossReference","kind":"equation","identifier":"unitdiskparam","label":"unitdiskparam","children":[{"type":"text","value":"(","key":"DWG996Btxg"},{"type":"text","value":"13.1.6","key":"GukdpWXSTf"},{"type":"text","value":")","key":"ptso7svU3B"}],"template":"(%s)","enumerator":"13.1.6","resolved":true,"html_id":"unitdiskparam","remote":true,"url":"/tensorprod","dataUrl":"/tensorprod.json","key":"pO96w1aRYU"},{"type":"text","value":".","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"nMkPDijkz5"}],"key":"T5uN82rii5"}],"label":"demo-tensorprod-disksphere-matlab","identifier":"demo-tensorprod-disksphere-matlab","html_id":"demo-tensorprod-disksphere-matlab","key":"LWCWG6gHdn"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-tensorprod-diff","label":"demo-tensorprod-diff","kind":"proof:example","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":22}},"children":[{"type":"text","value":"Example ","key":"cNapm3m6v2"},{"type":"text","value":"13.1.4","key":"tDHd6N9aUR"}],"template":"Example %s","enumerator":"13.1.4","resolved":true,"html_id":"demo-tensorprod-diff","remote":true,"url":"/tensorprod","dataUrl":"/tensorprod.json","key":"EAw5xW9QRX"}],"key":"Gi6yaGzAUm"},{"type":"paragraph","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"We define a function and, for reference, its two exact partial derivatives.","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"aUDkq8h8xZ"}],"key":"XPbJaSFr4L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"u = @(x, y) sin(pi * x .* y - y);\ndu_dx = @(x, y) pi * y .* cos(pi * x .* y - y);\ndu_dy = @(x, y) (pi * x - 1) .* cos(pi * x .* y - y);","key":"orInKdfE1j"},{"type":"output","id":"ILc1bh0ukGg-kH1eQlIBn","data":[],"key":"MHlDUSoMgk"}],"data":{},"key":"borsZ94RAf"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"We will use an equispaced grid and second-order finite differences as implemented by ","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"hmWg7w5Sr2"},{"type":"inlineCode","value":"diffmat2","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"JO44AtxfOP"},{"type":"text","value":". First, we have a look at a plots of the exact partial derivatives.","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"SD9yDM6cFw"}],"key":"V7XAUdHX9R"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 80;  [x, Dx] = diffmat2(m, [0, 2]);\nn = 60;  [y, Dy] = diffmat2(n, [1, 4]);\n[mtx, X, Y] = tensorgrid(x, y);\nU = mtx(u);\ndU_dX = mtx(du_dx);\ndU_dY = mtx(du_dy);","key":"MlU6b3PmRa"},{"type":"output","id":"legXy0a9cu6yrnahcvQyv","data":[],"key":"BxmalsmMkT"}],"data":{},"key":"IJudQXe3DU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"clf,  subplot(1, 2, 1)\npcolor(X', Y', dU_dX')\naxis equal,  shading interp\ntitle('∂u/∂x')\nsubplot(1, 2, 2)\npcolor(X', Y', dU_dY')\naxis equal,  shading interp\ntitle('∂u/∂y')","key":"dRtatCiARV"},{"type":"output","id":"hmYFpjvcgXOwgEKQ6ukde","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"9f0c092c3d133ed40c215ad010e6a7c8","path":"/build/9f0c092c3d133ed40c215ad010e6a7c8.png"}}}],"key":"CoobH3SN8P"}],"data":{},"key":"K9KD7wjTzg"},{"type":"paragraph","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"children":[{"type":"text","value":"Now we compare the exact partial derivatives with their finite-difference approximations. Since these are signed errors, we use a colormap that is symmetric around zero.","position":{"start":{"line":159,"column":1},"end":{"line":159,"column":1}},"key":"QLH27Vc6Gt"}],"key":"LZC8cb8UB8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"err = dU_dX - Dx * U;\nsubplot(1, 2, 1)\npcolor(X', Y', err')\ncolorbar,  clim([-.4, .4])\naxis equal,  shading interp\ntitle('error in ∂u/∂x')\n\nerr = dU_dY - U * Dy';\nsubplot(1,2,2)\npcolor(X', Y', err')\ncolorbar,  clim([-.1, .1])\naxis equal,  shading interp\ncolormap(redsblues)\ntitle('error in ∂u/∂y')","key":"TNkEr5fsYY"},{"type":"output","id":"TTiwFxN9FDzyZpjrzKyaJ","data":[{"output_type":"stream","name":"stderr","text":"Error using -\nArrays have incompatible sizes for this operation."}],"key":"S6JwCXN8cu"}],"data":{},"key":"CZfmtC9ZQ7"},{"type":"paragraph","position":{"start":{"line":178,"column":1},"end":{"line":178,"column":1}},"children":[{"type":"text","value":"Not surprisingly, the errors are largest where the derivatives themselves are largest.","position":{"start":{"line":178,"column":1},"end":{"line":178,"column":1}},"key":"AqWuznPGvp"}],"key":"bQS5U9A2mM"}],"label":"demo-tensorprod-diff-matlab","identifier":"demo-tensorprod-diff-matlab","html_id":"demo-tensorprod-diff-matlab","key":"aVdhUaSvym"},{"type":"heading","depth":3,"position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"children":[{"type":"text","value":"13.2 ","position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"key":"H9CL5oBixk"},{"type":"link","identifier":"section-twodim-diffadv","label":"section-twodim-diffadv","kind":"narrative","position":{"start":{"line":181,"column":6},"end":{"line":181,"column":29}},"url":"/diffadv","internal":true,"dataUrl":"/diffadv.json","children":[{"type":"text","value":"Two-dimensional diffusion and advection","key":"S71snwgrzW"}],"key":"xzy8TadyBl"}],"identifier":"id-13-2","label":"13.2 ","html_id":"id-13-2","implicit":true,"key":"WqeevEglWa"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-diffadv-vec","label":"demo-diffadv-vec","kind":"proof:example","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":18}},"children":[{"type":"text","value":"Example ","key":"U1P0K5uhAs"},{"type":"text","value":"13.2.1","key":"nIx9aogMUL"}],"template":"Example %s","enumerator":"13.2.1","resolved":true,"html_id":"demo-diffadv-vec","remote":true,"url":"/diffadv","dataUrl":"/diffadv.json","key":"I6QBpGacrR"}],"key":"IcjBjq69Ly"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 4;  n = 3;\nx = linspace(0, 2, m+1);\ny = linspace(-3, 0, n+1);\n\nf = @(x, y) cos(0.75*pi * x .* y - 0.5*pi * y);\n[mtx, X, Y, vec, unvec] = tensorgrid(x, y);\nF = mtx(f);\ndisp(\"function on a 4x3 grid:\")\ndisp(F)","key":"w0y8EYWHN8"},{"type":"output","id":"WYXKfGScksBdUT22MQrQj","data":[{"output_type":"stream","name":"stdout","text":"function on a 4x3 grid:"},{"output_type":"stream","name":"stdout","text":"\n"},{"output_type":"stream","name":"stdout","text":"  -1.8370e-16  -1.0000e+00   6.1232e-17   1.0000e+00\n   3.8268e-01   7.0711e-01   9.2388e-01   1.0000e+00\n  -7.0711e-01   6.1232e-17   7.0711e-01   1.0000e+00\n   9.2388e-01  -7.0711e-01  -3.8268e-01   1.0000e+00\n  -1.0000e+00   1.0000e+00  -1.0000e+00   1.0000e+00\n\n"}],"key":"KEXMQLRsKI"}],"data":{},"key":"TDMQ1PdPpB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"disp(\"vec(F):\")\ndisp(vec(F))","key":"RSZP81sy5A"},{"type":"output","id":"eNmTtV_oF_fALeaBJjl6X","data":[{"output_type":"stream","name":"stdout","text":"vec(F):"},{"output_type":"stream","name":"stdout","text":"\n"},{"output_type":"stream","name":"stdout","text":"  -0.000000000000000\n   0.382683432365090\n  -0.707106781186547\n   0.923879532511287\n  -1.000000000000000\n  -1.000000000000000\n   0.707106781186548\n   0.000000000000000\n  -0.707106781186548\n   1.000000000000000\n   0.000000000000000\n   0.923879532511287\n   0.707106781186548\n  -0.382683432365090\n  -1.000000000000000\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n\n"}],"key":"zP6y4eABk0"}],"data":{},"key":"oCSVEviaGo"},{"type":"paragraph","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"dIRa5VTbJp"},{"type":"inlineCode","value":"unvec","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"W5qFQKVMzG"},{"type":"text","value":" operation is the inverse of vec.","position":{"start":{"line":204,"column":1},"end":{"line":204,"column":1}},"key":"Bvn31pqXBk"}],"key":"WnigZEXfA0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"disp(\"unvec(vec(F)):\")\ndisp(unvec(vec(F)))","key":"ROFqcMDGSP"},{"type":"output","id":"CaT4bSk4PzU6FEVWrx5R-","data":[{"output_type":"stream","name":"stdout","text":"unvec(vec(F)):"},{"output_type":"stream","name":"stdout","text":"\n"},{"output_type":"stream","name":"stdout","text":"  Columns 1 through 3\n\n  -0.000000000000000  -1.000000000000000   0.000000000000000\n   0.382683432365090   0.707106781186548   0.923879532511287\n  -0.707106781186547   0.000000000000000   0.707106781186548\n   0.923879532511287  -0.707106781186548  -0.382683432365090\n  -1.000000000000000   1.000000000000000  -1.000000000000000\n\n  Column 4\n\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n   1.000000000000000\n\n"}],"key":"ZlCD5xkQdD"}],"data":{},"key":"uBOUU56fP2"}],"label":"demo-diffadv-vec-matlab","identifier":"demo-diffadv-vec-matlab","html_id":"demo-diffadv-vec-matlab","key":"NM6hdZcOQF"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-diffadv-heat","label":"demo-diffadv-heat","kind":"proof:example","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":19}},"children":[{"type":"text","value":"Example ","key":"X3mwHo7kMX"},{"type":"text","value":"13.2.2","key":"gx3SOwRQng"}],"template":"Example %s","enumerator":"13.2.2","resolved":true,"html_id":"demo-diffadv-heat","remote":true,"url":"/diffadv","dataUrl":"/diffadv.json","key":"pjZv4OiqBA"}],"key":"JTLNNj7wOk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 60;  n = 40;\n[x, Dx, Dxx] = diffper(m, [-1, 1]);\n[y, Dy, Dyy] = diffper(n, [-1, 1]);\n[mtx, X, Y, vec, unvec] = tensorgrid(x, y);","key":"EY6REW5r2I"},{"type":"output","id":"GExzvl8JM1OmHVUooX73H","data":[],"key":"cQovbfMPw0"}],"data":{},"key":"z1wgzxPQWP"},{"type":"paragraph","position":{"start":{"line":223,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Note that the initial condition should also be periodic on the domain.","position":{"start":{"line":223,"column":1},"end":{"line":223,"column":1}},"key":"YVgPjUhuIU"}],"key":"zdIX2fvH4r"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"U0 = sin(4*pi*X) .* exp( cos(pi*Y) );\nclf,  surf(X', Y', U0')\nmx = max(abs(vec(U0)));\nclim([-mx, mx]),  shading interp\ncolormap(redsblues)\nxlabel('x'),  ylabel('y')  \ntitle('Initial condition')","key":"ZVug8wxgZ9"},{"type":"output","id":"22d-qvulV_MahmPY7y588","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"11d11d263c3fa72fe149583ebbdcd947","path":"/build/11d11d263c3fa72fe149583ebbdcd947.png"}}}],"key":"rwv3XStmM2"}],"data":{},"key":"cDyFn32KIl"},{"type":"paragraph","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"This function computes the time derivative for the unknowns. The actual calculations take place using the matrix shape.","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"IlelEIyPna"}],"key":"GMxsU5Hd5H"},{"type":"include","file":"f13_2_heat.m","literal":true,"children":[{"type":"code","value":"function du_dt = timederiv(t, u, p)\n    [alpha, Dxx, Dyy, vec, unvec] = p{:};\n    U = unvec(u);\n    Uxx = Dxx * U;  Uyy = U * Dyy';     % 2nd partials\n    dU_dt = alpha * (Uxx + Uyy);  % PDE\n    du_dt = vec(dU_dt);\nend","lang":"matlab","filename":"f13_2_heat.m","key":"UFnnhjxeLm"}],"key":"a1XeIN8jSk"},{"type":"paragraph","position":{"start":{"line":241,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Since this problem is parabolic, a stiff integrator is appropriate.","position":{"start":{"line":241,"column":1},"end":{"line":241,"column":1}},"key":"lN4Dm85uDJ"}],"key":"Z03D7Lq7Zw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"ivp = ode(ODEFcn=@f13_2_heat);\nivp.InitialTime = 0;\nivp.InitialValue = vec(U0);\nivp.Parameters = {0.1, Dxx, Dyy, vec, unvec};\nivp.Solver = \"stiff\";\nsol = solutionFcn(ivp, 0, 0.2);\nU = @(t) unvec(sol(t));","key":"Jko8Ld6QRK"},{"type":"output","id":"I7iHegfeY0yk68Zr9NU01","data":[{"output_type":"stream","name":"stderr","text":"Error using *\nIncorrect dimensions for matrix multiplication. Check that the number of columns in the first matrix matches the number of rows in the second matrix. To operate on each element of the matrix individually, use TIMES (.*) for elementwise multiplication.\n\nError in f13_2_heat (line 4)\n    Uxx = Dxx * U;  Uyy = U * Dyy';     % 2nd partials\n\nError in odearguments (line 93)\nf0 = ode(t0,y0,args{:});\n\nError in ode15s (line 148)\n    odearguments(odeIsFuncHandle, odeTreatAsMFile, solver_name, ode, tspan, y0, options, varargin);\n\nError in matlab.ode.internal.LegacySolver/extend (line 56)\n                obj.sol = obj.SolverFcn(args{:});\n\nError in matlab.ode.internal.SolverPair/extend (line 162)\n                [obj.rSolver,tmax] = obj.rSolver.extend(t2);\n\nError in ode/solutionFcn (line 382)\n            [ODESOL,L,R] = ODESOL.extend(L,R);"}],"key":"ZKPSUAOlgo"}],"data":{},"key":"oII7pXKlLu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"surf(X', Y', U(0.05)')\nclim([-mx, mx]),  shading interp\ncolormap(redsblues)\nxlabel('x'),  ylabel('y')  \ntitle('Solution at t = 0.05')","visibility":"hide","key":"prv9FfgHmx"},{"type":"output","id":"AQTl9Q4dEJ65XpQ9YgNkv","data":[{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values."}],"visibility":"show","key":"PI5LYHzARh"}],"data":{"tags":[]},"visibility":"show","key":"QelyJW3wGk"},{"type":"paragraph","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"children":[{"type":"text","value":"Here is an animation of the solution.","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"fXpfu9ZDwQ"}],"key":"kVYy7SRFpP"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"AUVeIvt89v"}],"key":"TUsisPpZOR"},{"type":"paragraph","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"children":[{"type":"text","value":"Here ","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"key":"wQ02mi7LzK"},{"type":"inlineCode","value":"clims","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"key":"cRNYG51beQ"},{"type":"text","value":" are set so that colors remain at fixed values throughout the animation.","position":{"start":{"line":266,"column":1},"end":{"line":266,"column":1}},"key":"ScTXhXudk7"}],"key":"qY7OPLQs4a"}],"class":"dropdown","key":"xpHXWlqMiM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"title('Heat equation on a periodic domain')\nvid = VideoWriter(\"figures/2d-heat.mp4\",\"MPEG-4\");\nvid.Quality = 85;\nopen(vid);\nfor t = linspace(0, 0.2, 61)\n    cla, surf(X', Y', U(t)')\n    zlim([-3, 3]),  clim([-mx, mx])\n    shading interp\n    str = sprintf(\"t = %.2f\", t);\n    text(-0.9, 0.75, 2, str, fontsize=14);\n    writeVideo(vid, frame2im(getframe(gcf)));\nend\nclose(vid)","visibility":"hide","key":"ZRYuSxSGUx"},{"type":"output","id":"mar3dpFu0Jv6TY7h_SBbM","data":[{"output_type":"execute_result","data":{"image/png":""},"metadata":{},"execution_count":18},{"output_type":"execute_result","data":{"image/png":""},"metadata":{},"execution_count":18},{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values."}],"visibility":"remove","key":"KFo5Mcn3je"}],"data":{"tags":[]},"visibility":"show","key":"i5tqnz5EAS"},{"type":"image","url":"/build/2d-heat-7e0fa316371b43b8b7dd06819e6f4332.mp4","alt":"Heat equation in 2d","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"XGQ6Ue7lMN","urlSource":"figures/2d-heat.mp4"}],"label":"demo-diffadv-heat-matlab","identifier":"demo-diffadv-heat-matlab","html_id":"demo-diffadv-heat-matlab","key":"hDanTnFAa8"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-diffadv-advdiff","label":"demo-diffadv-advdiff","kind":"proof:example","position":{"start":{"line":291,"column":1},"end":{"line":291,"column":22}},"children":[{"type":"text","value":"Example ","key":"f8M13AKOsR"},{"type":"text","value":"13.2.3","key":"shKKhnbdps"}],"template":"Example %s","enumerator":"13.2.3","resolved":true,"html_id":"demo-diffadv-advdiff","remote":true,"url":"/diffadv","dataUrl":"/diffadv.json","key":"oPAHM4yhwx"}],"key":"aEm0AoAwP8"},{"type":"paragraph","position":{"start":{"line":294,"column":1},"end":{"line":294,"column":1}},"children":[{"type":"text","value":"The first step is to define a discretization of the domain and the initial state.","position":{"start":{"line":294,"column":1},"end":{"line":294,"column":1}},"key":"JkZ6SKIgYg"}],"key":"kKUqCclbev"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 50;  n = 40;\n[x, Dx, Dxx] = diffcheb(m, [-1, 1]);\n[y, Dy, Dyy] = diffcheb(n, [-1, 1]);\n[mtx, X, Y] = tensorgrid(x, y);\nu_init = @(x, y) (1+y) .* (1-x).^4 .* (1+x).^2 .* (1-y.^4);","key":"ItGGWyDTzm"},{"type":"output","id":"nJrYjzm41xJ5P6evlNX6x","data":[],"key":"IgTqIVWqoc"}],"data":{},"key":"ahzloVhRo0"},{"type":"paragraph","position":{"start":{"line":304,"column":1},"end":{"line":304,"column":1}},"children":[{"type":"text","value":"There are really two grids now: the full grid and the subset grid of interior points. Since the ","key":"ht6Rjzstcv"},{"type":"abbreviation","title":"initial-value problem","children":[{"type":"text","value":"IVP","key":"KqUHdqeDTv"}],"key":"EBqRscwGMS"},{"type":"text","value":" unknowns are on the interior grid, that is the one we need to change shapes on. We also need the functions ","key":"gPUiBjimkq"},{"type":"inlineCode","value":"extend","position":{"start":{"line":304,"column":1},"end":{"line":304,"column":1}},"key":"DIKDMCqtg2"},{"type":"text","value":" and ","position":{"start":{"line":304,"column":1},"end":{"line":304,"column":1}},"key":"gmcbDycWqF"},{"type":"inlineCode","value":"chop","position":{"start":{"line":304,"column":1},"end":{"line":304,"column":1}},"key":"FXRR5NAPE4"},{"type":"text","value":" to add and remove boundary values.","position":{"start":{"line":304,"column":1},"end":{"line":304,"column":1}},"key":"KrZfpEYgAm"}],"key":"xrla16rzy1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"[~, ~, ~, vec, unvec] = tensorgrid(x(2:m), y(2:n));\nchop = @(U) U(2:m, 2:n);\nz = zeros(1, n-1);\nextend = @(U) [ zeros(m+1, 1) [z; U; z] zeros(m+1, 1)];\npack = @(U) vec(chop(U));\nunpack = @(u) extend(unvec(u));","key":"lCqz41HrPn"},{"type":"output","id":"tFaeVtyvZkaYbw2wWG5fC","data":[{"output_type":"stream","name":"stderr","text":"Error using zeros\nSize inputs must be scalar."}],"key":"uVlKYaEjlc"}],"data":{},"key":"LPO4MXo2Mn"},{"type":"paragraph","position":{"start":{"line":315,"column":1},"end":{"line":315,"column":1}},"children":[{"type":"text","value":"Now we can define and solve the ","key":"XzyTtUNI0q"},{"type":"abbreviation","title":"initial-value problem","children":[{"type":"text","value":"IVP","key":"NbYMKHs7td"}],"key":"xZI1jC18fO"},{"type":"text","value":" using a stiff solver.","key":"VLFx6cwH0J"}],"key":"d7w5M1X4RA"},{"type":"include","file":"f13_2_advdiff.m","literal":true,"children":[{"type":"code","value":"function du_dt = timederiv(t, u, p)\n    [ep, Dx, Dxx, Dy, Dyy, pack, unpack] = p{:};\n    U = unpack(u);\n    Uxx = Dxx * U;  Uyy = U * Dyy'; \n    dU_dt = 1 - Dx * U + ep * (Uxx + Uyy);  % PDE\n    du_dt = pack(dU_dt);\nend","lang":"matlab","filename":"f13_2_advdiff.m","key":"dYUyd1XMXI"}],"key":"mgDRNgBZGp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"ivp = ode(ODEFcn=@f13_2_advdiff);\nivp.InitialTime = 0;\nivp.InitialValue = pack(mtx(u_init));\nivp.Parameters = {0.05, Dx, Dxx, Dy, Dyy, pack, unpack};\nivp.Solver = \"stiff\";\nsol = solutionFcn(ivp, 0, 2);","key":"JSgIz73QOt"},{"type":"output","id":"YktyP4rzWDIWpTMEznS-h","data":[{"output_type":"stream","name":"stderr","text":"pack requires Vehicle Network Toolbox."}],"key":"Vf08gmRL2T"}],"data":{},"key":"YxmvEeFVte"},{"type":"paragraph","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"children":[{"type":"text","value":"When we evaluate the solution at a particular value of ","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"key":"DTjsFefzZd"},{"type":"inlineMath","value":"t","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>","key":"ubCv1kbnT9"},{"type":"text","value":", we get a vector of the interior grid values. The same ","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"key":"YeXPWqc9mf"},{"type":"inlineCode","value":"unpack","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"key":"vyYEzEy83u"},{"type":"text","value":" function above converts this to a complete matrix of grid values.","position":{"start":{"line":330,"column":1},"end":{"line":330,"column":1}},"key":"nvkNvuovC3"}],"key":"XduYgFqoby"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"U = @(t) unpack(sol(t));\n\nclf,  pcolor(X', Y', U(0.5)')\nclim([0, 2]), shading interp\naxis equal,  colormap(sky), colorbar\ntitle('Advection-diffusion at t = 0.5')  \nxlabel('x'),  ylabel('y')","key":"bAV6qKNPjf"},{"type":"output","id":"sSBEaamIZydtryE_GM1pY","data":[{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values.\n\nError in Notebook>@(t)unpack(sol(t)) (line 1)\nU = @(t) unpack(sol(t));"}],"key":"sV1xwVtNzV"}],"data":{},"key":"HEWoCKbHFP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"hold on\nvid = VideoWriter(\"figures/2d-advdiff.mp4\",\"MPEG-4\");\nvid.Quality = 85;\nopen(vid);\ntitle(\"Advection-diffusion in 2d\")\nfor t = linspace(0, 2, 81)\n    cla, pcolor(X', Y', U(t)')\n    shading interp\n    str = sprintf(\"t = %.2f\", t);\n    text(-1.5, 0.75, str, fontsize=14);\n    writeVideo(vid, frame2im(getframe(gcf)));\nend\nclose(vid)","visibility":"hide","key":"qbNXbwfctQ"},{"type":"output","id":"m6cFJr4ZpX6ZpIEqtqW28","data":[{"output_type":"execute_result","data":{"image/png":""},"metadata":{},"execution_count":23},{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values.\n\nError in Notebook>@(t)unpack(sol(t)) (line 1)\nhold on"}],"visibility":"remove","key":"k5Z8RiMbEV"}],"data":{"tags":[]},"visibility":"show","key":"eX4jJt1YWJ"},{"type":"image","url":"/build/2d-advdiff-2998ca323c8f59725aca337d88f673ba.mp4","alt":"Advection-diffusion in 2d","position":{"start":{"line":359,"column":1},"end":{"line":359,"column":1}},"key":"a9jll24lhb","urlSource":"figures/2d-advdiff.mp4"}],"label":"demo-diffadv-advdiff-matlab","identifier":"demo-diffadv-advdiff-matlab","html_id":"demo-diffadv-advdiff-matlab","key":"bH2SvlLjjR"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-diffadv-wave","label":"demo-diffadv-wave","kind":"proof:example","position":{"start":{"line":363,"column":1},"end":{"line":363,"column":19}},"children":[{"type":"text","value":"Example ","key":"nz3kqpIIVk"},{"type":"text","value":"13.2.4","key":"pAOWICYEPh"}],"template":"Example %s","enumerator":"13.2.4","resolved":true,"html_id":"demo-diffadv-wave","remote":true,"url":"/diffadv","dataUrl":"/diffadv.json","key":"xodIcaqUk8"}],"key":"SrkCqU32lG"},{"type":"paragraph","position":{"start":{"line":365,"column":1},"end":{"line":365,"column":1}},"children":[{"type":"text","value":"We start with the discretization and initial condition.","position":{"start":{"line":365,"column":1},"end":{"line":365,"column":1}},"key":"flS4wzpPfX"}],"key":"CYjarjfAFK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 40; n = 42;\n[x, Dx, Dxx] = diffcheb(m, [-2, 2]);\n[y, Dy, Dyy] = diffcheb(n, [-2, 2]);\n[mtx, X, Y] = tensorgrid(x, y);\n\nu_init = @(x, y) (x+0.2) .* exp(-12*(x.^2 + y.^2));\nU0 = mtx(u_init);\nV0 = zeros(size(U0));","key":"UdCKx4857T"},{"type":"output","id":"OjTWZYnW7rIJiwQUzqGbc","data":[],"key":"dJEWQpC2Cg"}],"data":{},"key":"rpBKtMvQZO"},{"type":"paragraph","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"children":[{"type":"text","value":"Note that because ","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"key":"IsgCLXTOZL"},{"type":"inlineMath","value":"u","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>","key":"jHikKpu9xv"},{"type":"text","value":" is known on the boundary, while ","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"key":"myRPd60lvj"},{"type":"inlineMath","value":"v","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>","key":"lKHMD79YmL"},{"type":"text","value":" is unknown over the full grid, there are two different sizes of vec/unvec operations. We also need to define functions to pack grid unknowns into a vector and to unpack them. When the unknowns for ","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"key":"MBHuTiqjy3"},{"type":"inlineMath","value":"u","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>","key":"obf0F8OzEq"},{"type":"text","value":" are packed, the boundary values are chopped off, and these are restored when unpacking.","position":{"start":{"line":378,"column":1},"end":{"line":378,"column":1}},"key":"O57K6hsifG"}],"key":"SyDxRnspmX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"[~, ~, ~, vec_v, unvec_v] = tensorgrid(x, y);\n[~, ~, ~, vec_u, unvec_u] = tensorgrid(x(2:m), y(2:n));\n\nchop = @(U) U(2:m, 2:n);\nz = zeros(1, n-1);\nextend = @(U) [ zeros(m+1, 1) [z; U; z] zeros(m+1, 1)];\npack = @(U, V) [vec_u(chop(U)); vec_v(V)];\nN = (m-1) * (n-1);\nunpack = @(u) f13_2_wave_unpack(u, N, unvec_u, unvec_v, extend);","key":"Py6eqqqmn0"},{"type":"output","id":"Tn5MUUhDybkuaK7aV_FsR","data":[{"output_type":"stream","name":"stderr","text":"Index exceeds the number of array elements. Index must not exceed 3."}],"key":"cmXgOBoZ2z"}],"data":{},"key":"ASJK6KHGqw"},{"type":"include","file":"f13_2_wave_unpack.m","literal":true,"children":[{"type":"code","value":"function [U, V] = unpack(w, N, unvec_u, unvec_v, extend)\n    U = extend( unvec_u(w(1:N)) );\n    V = unvec_v(w(N+1:end));\nend","lang":"matlab","filename":"f13_2_wave_unpack.m","key":"hOTNTFtYI7"}],"key":"YWfC8UbGUH"},{"type":"paragraph","position":{"start":{"line":397,"column":1},"end":{"line":397,"column":1}},"children":[{"type":"text","value":"We can now define and solve the ","key":"K3ccvW2hJ2"},{"type":"abbreviation","title":"initial-value problem","children":[{"type":"text","value":"IVP","key":"ZSmAtQGLBH"}],"key":"D0lGduwFfc"},{"type":"text","value":". Since this problem is hyperbolic, not parabolic, a nonstiff integrator is faster than a stiff one.","key":"yumMRKzRAk"}],"key":"bckyrmTBp5"},{"type":"include","file":"f13_2_wave.m","literal":true,"children":[{"type":"code","value":"function dw_dt = timederiv(t, w, p)\n    [Dxx, Dyy, pack, unpack] = p{:};\n    [U, V] = unpack(w);\n    dU_dt = V;\n    dV_dt = Dxx * U + U * Dyy';\n    dw_dt = pack(dU_dt, dV_dt);\nend","lang":"matlab","filename":"f13_2_wave.m","key":"ZPvX6n5Bdv"}],"key":"hwd8vysX1h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"ivp = ode(ODEFcn=@f13_2_wave);\nivp.InitialTime = 0;\nivp.InitialValue = pack(U0, V0);\nivp.Parameters = {Dxx, Dyy, pack, unpack};\nivp.Solver = \"nonstiff\";\nsol = solutionFcn(ivp, 0, 4);","key":"UfZILJXalP"},{"type":"output","id":"0x2jPlaHErIeYLfnUvDmw","data":[{"output_type":"stream","name":"stderr","text":"pack requires Vehicle Network Toolbox."}],"key":"FafOUSL2xA"}],"data":{},"key":"diuj5yTx1Q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"clf\n[U, V] = unpack(sol(0.5));\npcolor(X', Y', U')\naxis equal,  clim([-0.1, 0.1])\ncolormap(redsblues),  shading interp\nxlabel(\"x\"),  ylabel(\"y\")\ntitle(\"Wave equation at t = 0.5\")","key":"Px41RhEhpU"},{"type":"output","id":"u6D2xahsY6Yy-qdiwyFk5","data":[{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values."}],"key":"E53xpXGMSE"}],"data":{},"key":"i3SE7kBHsj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"hold on\nvid = VideoWriter(\"figures/2d-wave.mp4\",\"MPEG-4\");\nvid.Quality = 85;\nopen(vid);\ntitle(\"Wave equation in 2d\")\nfor t = linspace(0, 4, 121)\n    [U, V] = unpack(sol(t));\n    cla, pcolor(X, Y, U)\n    shading interp\n    str = sprintf(\"t = %.2f\", t);\n    text(-3, 1.75, str, fontsize=14);\n    writeVideo(vid, frame2im(getframe(gcf)));\nend\nclose(vid)","visibility":"hide","key":"uabXDlf0Rv"},{"type":"output","id":"_4EiK3QoVBzSaMFi_MUkD","data":[{"output_type":"execute_result","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABLAAAAK8CAIAAABwUdHZAAAAB3RJTUUH6QMLFAcxaI6AagAAIABJREFUeJzs3Xt0VdWhL+CZhE14GKIS0YAYsWIooFiiPa3S+n60pSKoLeco+Gi9th68Vls814ZzDxVrFXVQtdKqiNRHSwsqD2tPW4vaAqUqKlV5CCIJEoxgMbwSyGPfP9boGvuGEB5mS0/W9/0195xrzj3XxuHgx1xrzpx0Oh0AAABIntwDPQEAAAAODIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChOhzoCQDwsTQ2Nq5atSr+eMQRRxQWFmZesH79+s2bN0flgw8++PDDD89srampef/996Ny586djzrqqCzPl//P+++/X1NTE5VLSko6derU7meSTqcrKiqKiooOOuigfeq4c+fOd999Nyp36NDhU5/6VBZmB5A4VggB/mdramoqKyvr9w+33357swsuvPDCuPWyyy5r1vqjH/0obh0yZMgnNevEqa+v3/oPDQ0Ncf3NN98c//5Tpkw5gDPM9kwaGhpuu+22L3zhC926devTp09BQcFRRx119dVXV1VV7eUIK1eujGd4xhlntPkMAZJJIAT4ny2VSn3hC1+IP86fPz+zdfPmzYsXL44/Lly4sL6+PvOCP//5z3HZX7Kz55JLLin4h1mzZrV4TVNT0yc8q91p85m89957Z5xxRnl5+fz587du3RpVrl27dsqUKccdd9yvf/3rtv06APaeQAjwP97ZZ58dl1955ZWdO3fGH//0pz81NjbGH7dv3/7yyy/HH+vq6l555ZX44znnnJPlmSZXbW3tgZ7CAZNOp4cNG9bsnypi27Ztu/LKK996661PeFYARLxDCPA/XmYgjDLeKaecEn18/vnnm1384osvxq0vvfRSZnrMHIdPxs0333zVVVdF5QP7Ulz2ZvLrX//61VdfjT+ef/75J5988jPPPPPaa69FNdu3b7/pppt+85vftOGXArCXBEKA//FOOOGEww47bMOGDdHHBQsWtB4Ib7755qic+bzowIEDjzjiiMwr165d+957733wwQedOnU69NBDBwwY0KVLlzaZ8Nq1a994442ePXsef/zxeXl52R5k27Zt0ULo4MGDCwoK9u/rWp/Jfv9Qxx133HHHHdf6NR9++OEbb7zR0NCw65/R7jQ1Nf3tb3979913e/XqdeKJJ3bs2LFNZrJ/I991111x+eqrr37wwQdDCLfccstNN9105513RvWLFi3atePmzZtffvnlLl26DB48OD8/f49fBMD+SAPwP9/Xv/71+H/sF1xwQVT54Ycf5uY2fzXgoIMOqq+vjy4477zz4vobbrghqmxqarrvvvsGDRrUrGOnTp2+/OUvr1y5Mr6sZ8+eXf/hF7/4ReZ8fvrTn8ZN11xzTVS5ZcuWb3/724cddlg8ZteuXc8444xXXnll7+90nwZZsGDB4MGD47iYm5t72mmnbdiwoVu3btHcSktLoyu/+tWvxhP+wx/+kDnIpZdeGjc9+uijcf1e/lAHHXRQ165dMyNrTk5O165dDzrooJqamuuuuy4efMqUKZnfW19fP2HChOLi4szBi4qKvvOd72zdujXzyosuuigepLKysry8vFu3bpnzmTRp0h5/2BZn0iYjxyE8Nze3qqoqrl++fHnmra1evTpumjdv3gknnBD/15ufn3/ZZZdlPu3cu3fvPX4vAHtDIARoDx566KHMzBBVPvXUU6ElixYtSqfTDQ0Nmctlzz77bFQ5evToFntFDjnkkL/97W/R+Jdffnlcf/HFF2fOJ/N1xMceeyydTr/00kvHHHNMi2N26dLlqaee2pvb3KdBnnjiiRaXlfr16xeX41yROeGZM2dmjnPRRRfFTQ8//HBUufc/VE5Ozu6u2bhx4xVXXBF/vOeee+Ivfeedd0488cTddezTp89LL73U4q995plnttjl1ltvbf23bXEmH3/kDz/8ML5ywIABmU1btmzJ/AeLv//971H9Qw89lEqldv2iXr16xWWBEKCt2FQGoD0466yz4vLGjRujtZfM50WvueaauPzCCy+EEJYsWbJly5aopmPHjl/84hdDCL/85S8fffTRqDInJ2fw4MHXX3/9pZdeGj8ZuGnTpieeeCIqZy5L/u53v9uxY0dUrqmpib4ihNCpU6dhw4Zt3br1oosuWr16dXx9UVFRXN6+fftFF12Uuf7Ton0aZO3atVdccUU8pRBCt27dorP1mi1M7Z+9/6FOPPHEY489tnPnznHfI4444thjjz322GN396RrOp2+8sorX3/99bimS5cumUtz77777r/927/V1dXt2nfevHktjnnvvfdm/hr7Yf9GbmpquuIfRo0aldk0c+bMeDvTkpKSQw45JITwzjvvfPvb387cC7ewsDD69datW/dx5g9AiwRCgPagT58+mUtnCxYsCBl/g+/cufPYsWPj1hdffDH8/y8Qfv7zn+/atWsIYe7cuXHl1772tcWLF//4xz9+/PHHb7vttrg+zpnnnHNO9+7do/KWLVvir/vtb38b/4X+S1/6UkFBwX/913+tXbs2qjn77LPXr1+/YcOGv/3tbxdffHFUmU6n77jjjtbvcZ8GueOOO+I5dOvW7Xe/+92mTZs2bdr0wx/+sPVv2Ut7/0O9+uqrK1euzDwa5L777lu5cuXKlSsPPvjgFgefOnXqn/70p6icSqUee+yxjz76aNOmTb/97W/jWLhq1apbb721xe633nrrpk2btmzZctNNN8WVH3zwwd/+9rf9vNuPMXJRUdEj//Af//Efcf1LL700ZsyY+ONXvvKVqDBhwoT4nMaDDz74j3/846ZNmz766KP77ruvlbVWAPabQAjQTmTuETp//vwPPvgg3sr/c5/73Kc+9al468j58+c3NjZmBsL4ycCTTz75u//wX//1X/EFmXuHbNu2LSp06NAh83HK2bNnNyuEEL72ta81NTX97Gc/iz5269bt17/+dbQzyvHHH/+Tn/wkHvnpp5/OXP1rZp8GSafTjzzySNz3/vvvP/fcc3Nzczt16vT973//kksu2d237L19+qH21eOPPx6X//M///Oyyy5LpVK5ubnnn3/+/fff3+JlsbPOOqu8vPzggw8+6KCDfvjDH/bo0SNuWr9+/f7Np21HTqfT999//xe/+MX49znyyCN/9KMfhRCampqmT58eX/mzn/3szDPPzMnJ6dix45gxY775zW9+nPkD0CK7jAK0E2effXa0f2MIYcGCBfFDmyGE6HHQ00477Z133gkhbNmyZfHixZnnwsWB8Hvf+15U2Llz51tvvfXkk0+uXLnypZdemjNnTotf+vWvfz3+0rlz5/70pz9taGj47W9/G9V06dLlq1/96jvvvLN9+/aoJj8/P97jNBIv+zQ1NS1ZsmR3rwju0yAdO3aMLy4oKPja176WefGVV145Y8aMFr9l7+3rD7VPMg/ly3xRM4Rw8cUXX3PNNdHdVVZWbtmypdm+qeeff35c7tChw4ABAz744IPo49///vePM6s2Gfm99967/PLLM58+PfLII5955plo5bOysjJ++rRbt24jRozI7Dt69OjMd2UBaBMCIUA7Ea2lpNPpEMLKlSszV1pOO+20EMLpp58+derUqGbKlCnV1dVR+ZBDDjnppJPii5999tm77757/vz5mUcU7s7pp59+xBFHvP/++yGEqqqql19+uaampqamJmr9yle+0rVr1zfffDO+fsOGDQ888MDuRosDxq72aZDMlcaSkpJmRyMMGDCgtVvaa/v0Q+29Dz/8MD5BJJVKHXXUUZmtnTp16t2794oVK0II6XR62bJln/3sZzMvaHYuRfRiXiR+YW//fPyRZ86c+b/+1//atGlTXPOFL3zhV7/6VbyT6qpVq+Kmo48+utnWMn369NmPaQPQOo+MArQT3bt3z9yX8umnn44KHTt2/NznPhf+EQsjmSstZ555ZrzZ489+9rOvfOUr8+bNi0NOTk5OSUnJv/zLv7T4pbm5uZlPYM6ePbvZ86IhhPiVsD2Kk+Su9mmQzC1JdtWhwx7+MTQK1bEW927Z1x9q/zSbSSRzZ87GxsZmrZm714SMtdOP72OO/J//+Z+XXHJJnAa7dOlyzz33vPjii5nnamQmwBbvHYA2Z4UQoP04++yzX3vttWaVJ598cvRX+aOOOqpPnz7vvvvurr2iws6dO7/zne/E9RdeeOH3vve9z3zmM126dPnzn/8cPXe6q69//ev33XdfVJ41a1a8c+lBBx0U7RSSuSLXr1+/aEubFmUuOjWzT4PEK2whhHXr1jU2Nmbu57nrLxD+/3jz0UcfZTZF65+Z9u+H2kvdu3c/9NBDo4cwGxoaqqqqevbsmfnV8c46IYT+/ft/nO/6xIwZMybz7cdBgwb98pe//PSnP93ssmOPPTYur169uq6uLtoYNq7J9jwBEkggBGg/zj777DvvvLNZZebC4Omnn75rHIpfIFyyZEn8BteRRx45c+bMOEetXLlyd196yimn9O7dO0opS5cujeuHDh0aBdG+ffumUqlo1W7NmjXpdPrwww+PL3v22Wfj7W1uuOGGzK1KMu3TID179jz44IOjXLdp06Znn332q1/9anxxi3uxHHrooXH5jTfeiMsffPBB5sfI/v1QsVYWQiMDBgyIb+fxxx/P3NJz9uzZW7dujb+6sLBwj193wM2aNSszDZ5zzjlz5szJTHqxnj17du3aNdpsZtu2bb/4xS+uuuqquPWXv/zlJzBbgKTxyChA+zFkyJBdj2JvFgibtfbp0yfefTROGiGE+vr6+MHLjz766J577tndl+bk5DTbtSUSn1KYSqXikyHq6upGjx4drbnV1dXNnDlzxIgRt99+++233/7zn/+8lXizr4OUlZXFfa+++upo4bSpqWnKlCktbkyS+eDio48+Gp3bsX79+iuvvHLXVwT374eK/eIXv3jppZcy35drJvOAx/Hjx8+dOzd6fvIvf/nLt7/97RYv+6dVV1d34403ZtZ8+tOfvuWWW76/i5UrV+bk5IwePTq+8vrrr3/uuedCCE1NTdOmTYu3LwKgDVkhBGg/unTp8vnPfz5zf9EOHTqccsop8cfMcBiJlwdDCIMGDYrL1dXVn//85y+44IKqqqo//OEPFRUVcVNmHIqMHDny7rvvzqzp1q3bl770pfjj3Xff/Zvf/Gbz5s0hhN///vclJSVHH330e++9F+8FGkL47ne/u2uazbRPg0ycOPGzn/1s9IpddXX14MGDe/XqtXXr1t2tzp1++umTJk2Kyh999FEUrXd33vp+/FAlJSVxed68edGrhh9++GGL43/7299+7LHH/vrXv4YQamtrL7jggu7du6dSqcyHV0tKSn7wgx+0/Ev9M3nllVeaLUrfe++9LV552mmn9e3b9z/+4z+mTJkSZeytW7eec845hx9++I4dO5o9xwtAW7FCCNCuZJ5GGEIYPHjwQQcdFH+MQlTmBZmB8NBDDx01alT88fXXX7/lllumTJlSUVGRuZHJhg0bmm3xctJJJ8XLjJELLrggM90VFxf//Oc/j89h37lz59tvv50Z5EaNGnXDDTe0fmv7NMjgwYMzn7QMIaxbty5Kg802HY0MHTq0tLQ0syZKgx07djz55JObXbwfP9S5556765fubt+U3NzcadOm9evXL6758MMPM9Ngr169nnjiia5du7bY/Z9K5lPEe6OkpOTBBx/M3F2muro6SoN2GQXIBoEQoF1pFgh33eAk86nR3NzcM888M7P1Zz/72TXXXNNsu/8zzzzzrbfeit+y2759+65b1zR7fHHXpxkvvPDCN99888ILL2y2WeUxxxxzzz33TJs2LTNK7c4+DXLbbbf98pe/zHwpsUOHDpdddln8el6m3NzcP/3pT+edd15mZXFx8dy5cy+44IK4Jg6T+/pDXXzxxffdd9/uTlncVb9+/V5//fXvf//7mS83hhAKCgquueaat95669RTT93LoXadfJtrZeTo6Mt9csUVV/zhD38YOHBg5k4/n/3sZxcsWBD/uWfvXgCSJse2zv/kNm/e/Oqrr/bu3bvZv74DZM+HH364fPnyrVu3Hnzwwccdd1wrm3/uh6amplWrVq1duzadTpeUlHzqU5/amyi434M0NDS8/fbb69atO+SQQ44//vj8/Py33npr4MCBUWvv3r0rKyszr1+/fv2rr766Y8eOz3zmM3tcktqPH2rLli3R0QvdunWLVztbV1VVtXTp0lQq1adPn2bHErZvNTU1L730Uk5OTllZWdv+RwhATCD8Z/fQQw/ddddd55xzzk9+8pMDPReA9qD1QAgAieKR0X9qa9asefTRRw/0LAAAgPbJLqP/dNLpdGVl5YYNG/70pz9Nnz59j8dVAQAA7B+B8J/O9u3bW9yMDoA2UVhY+LnPfS4q9+7d+8BOBgAOLIHwn05ubm7//v3jj++991506BYAbeLII4/8y1/+cqBnAQD/FATCfzqdO3d++umn44833XTT7NmzD+B8AACA9sqmMgAAAAklEAIAACSUR0bboVGjRr300kstNo0ZM+a66677hOcDAAD8cxII26GXXnppxYoVB3oWAADAPzuPjAIAACSUQAgAAJBQAiEAAEBCCYQAAAAJJRACAAAklEAIAACQUALhP7sOHRwNAgAAZEVOOp0+0HOgjZWWljqHEAAA2CMrhAAAAAklEAIAACSUQAgAAJBQAiEAAEBCCYQAAAAJJRACAAAklEAIAACQUAIhAABAQgmEAAAACSUQAgAAJJRACAAAkFACIQAAQEIJhAAAAAklEAIAACSUQAgAAJBQAiEAAEBCCYQAAAAJJRACAAAklEAIAACQUAIhAABAQgmEAAAACSUQAgAAJJRACAAAkFACIQAAQEIJhAAAAAklEAIAACSUQAgAAJBQAiEAAEBCCYQAAAAJJRACAAAklEAIAACQUAIhAABAQgmEAAAACSUQAgAAJJRACAAAkFACIQAAQEIJhAAAAAklEAIAACRUhwM9gfavqqpqzZo1RUVFffr0SaVSe9+xsbGxsrKyqqqqd+/eRx55ZG6u9A4AALQlgTBb0un09OnTJ02aVFNTE9Xk5eUNHTq0vLy8sLCw9b61tbU//vGPp0+fXldXF9V07tz5hhtuGD16dE5OTnbnDQAAJEZOOp0+0HNon+64446pU6dG5eLi4o0bN9bX14cQSkpK5syZ06lTp9113L59+4gRI959990QQn5+fvfu3devXx/9MX3pS1/68Y9/vMevLi0tXbFiRdvcBgAA0H55CjErli5dOm3atBBCv3795s2b98ILLyxevHj06NEhhIqKismTJ7fS984773z33XdzcnJuvPHGV1999fnnn58/f/6QIUNCCL/97W9fe+21T+QOAACA9k8gzIo5c+Y0NTXl5eVNnjy5V69eIYT8/Pzy8vLBgweHEGbNmrW7hdn6+vpf//rXIYQvfelL11xzTYcOHUIIRUVF999//xFHHBFCuPfeez+52wAAANo1gTAr5s+fH0IYMmRIlAZjI0eODCFUV1evWrWqxY7vvPNOQ0NDCGH48OGZ9Z06dRoxYkQIYdGiRdu3b8/StAEAgEQRCNteOp2urKwMIQwaNKhZU1xTUVHRYt+qqqqo0L1792ZNPXr0CCE0NTV5PxAAAGgTAmHbq6mp2bFjRwihuLi4WVNcU11d3WLfI488Mip88MEHzZriLps2bWqrqQIAAEkmELa9+KyIgoKCZk35+fnRUYTxNc2UlJTk5eWFEKI9aWLbtm2bMWNGVN66dWubzhcAAEgogbDtxUcFtnhmYFTZ2NjYYt/8/Pyvfe1rIYRFixbddNNNf//730MIK1euvPLKKzdu3BhdEyXG1pXuxn333bdf9wQAALRDDqZve/EOotHBg81Ela2Euuuvv/7FF1+sqqqaPXv27Nmzu3TpEu0ic9ppp7344oshhKKioj3OwXuGAADAHlkhbHvxofO7bgdaW1sbxcVWDqY/5JBD5s6de8kll3Tr1i0a5PDDDx89evT3vve96IJd95sBAADYD1YI215hYWF+fv6OHTtWr17drCmuibYM3Z2DDjro1ltvvfXWW9evX19XV9enT58QQrQ8GPZuhRAAAGCPBMK2l5OT07t371WrVi1btqxZ0/Lly6NCSUnJ7rrPnj27oaFh8ODBffr0ydyn9Pe//33U8eCDD87CrAEAgMTxyGhWDBkyJISwcOHCJUuWxJUNDQ1TpkwJIfTo0aNv37676ztt2rTvf//7N9xwQ/wuYghh06ZNUSC88MILszhvAAAgSQTCrBg2bFhubm46nR43btyiRYuampoqKyvHjx8fPTI6fPjwaK/RqqqqsrKysrKyUaNGxX1POeWUEMKyZcvuueee6OzBqqqqq666avPmzbm5ucOGDTtA9wQAALQ3OZnLULShiRMnPvzww1G5oKBgy5YtUfnoo4+ePXt2tKlMRUXFueeeG0IYOHDgk08+GV2wefPmSy65ZM2aNSGEnJyc7t27RwdO5OXl3XbbbXuzQlhaWmqXUQAAYI+sEGbL2LFjJ0yYEO0IGqXBVCo1YsSIGTNm7LrFaHRafaRbt24///nPL7roory8vHQ6vXHjxry8vNLS0rvvvtvzogAAQBuyQtgOWSEEAAD2hhVCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEqrDgZ5A+1dVVbVmzZqioqI+ffqkUqm979jQ0LB27dp169Ydeuihn/rUp/Lz87M3SQAAIIEEwmxJp9PTp0+fNGlSTU1NVJOXlzd06NDy8vLCwsLW+9bX10+bNu3BBx/cvHlz3Pf888+/+eabDzvssOzOGwAASIycdDp9oOfQPt1xxx1Tp06NysXFxRs3bqyvrw8hlJSUzJkzp1OnTq30LS8vnzlzZgghlUodccQR69ata2pqCiEcccQRv/nNbw466KDWv7q0tHTFihVtcxsAAED75R3CrFi6dOm0adNCCP369Zs3b94LL7ywePHi0aNHhxAqKiomT57cSt/XXnstSoNDhgx54YUXnnvuuT//+c/XX399COH9999/8MEHP4kbAAAAEkAgzIo5c+Y0NTXl5eVNnjy5V69eIYT8/Pzy8vLBgweHEGbNmtXKwuzixYtDCDk5OXfddVdRUVEIoaio6Nprr436vvbaa5/QPQAAAO2dQJgV8+fPDyEMGTIkSoOxkSNHhhCqq6tXrVq1u747d+4MIaRSqUMOOSSzvkOHDiGEHTt2ZGPCAABAAgmEbS+dTldWVoYQBg0a1KwprqmoqNhd91NOOSWEsHPnzr/+9a9x5dq1a19++eUQwhe/+MU2nzAAAJBMdhltezU1NdE6XnFxcbOmuKa6unp33U844YTPfOYzr7322v/+3//73//9348//vjFixc/+eST6XS6qKjoggsuyN7MAQCARBEI215dXV1UKCgoaNaUn5+fSqXq6+vja3aVm5v72GOPjRo16rXXXvvhD38Y13ft2nXGjBk9e/bMxpwBAIAEEgjbXk5OTrPCrq2NjY27615XV/eDH/zg9ddfj6+PdqDZtm3buHHjfvSjHx1++OF7nENpaWmL9WPGjLnuuuv22B0AAEgCgbDtxTuIRgcPNhNV5uXl7a771KlTn3rqqRDCqaee+t3vfrdfv34bN2587LHHpk6dumDBgksvvfS5557b4xycQwgAAOyRTWXaXnzo/Pbt25s11dbWRnGxlYPp582bF0I44YQTHnzwwQEDBuTl5R1++OHf+973xowZE0JYu3btu+++m62pAwAASSIQtr3CwsL8/PwQwurVq5s1xTU9evRose+HH3745ptvhhBGjBgRnTMRu+yyy6JCdKYFAADAxyQQtr2cnJzevXuHEJYtW9asafny5VGhpKSkxb5NTU3REmIqlWrWlEql9vj+IQAAwN4TCLNiyJAhIYSFCxcuWbIkrmxoaJgyZUoIoUePHn379m2x42GHHVZUVBT+8eBopv/+7/+OsuKAAQOyNG0AACBRBMKsGDZsWG5ubjqdHjdu3KJFi5qamiorK8ePHx89Mjp8+PBora+qqqqsrKysrGzUqFFx37POOiuE8Mc//vHWW2/dsmVLCCGdTs+dO/fWW28NIfTs2fP4448/MHcFAAC0Lznxlpi0rYkTJz788MNRuaCgIIp2IYSjjz569uzZ0aYyFRUV5557bghh4MCBTz75ZHRBbW3tRRdd9M4774QQ8vLyevbs+fe//33btm0hhA4dOjzxxBMnnnhi619dWlpql1EAAGCPrBBmy9ixYydMmNC9e/cQQpQGU6nUiBEjZsyYsesWo5lvDHbu3Hn69Onf+ta3unbt2tjYuHbt2m3btuXm5p555plz587dYxoEAADY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nTt37tSp05e//OURI0aEEF599dWGhoZP7EYAAIB2zDuEWTF//vwQwpAhQ6I0GBs5cuSrr75aXV29atWqvn37tth37ty5IYSysrIzzzwzs/7GG2889dRTQwgNDQ0dOviDAwAAPi65ou2l0+nKysoQwqBBg5o1xTUVFRW7C4Tz5s0LIZx++unRx40bN27cuPGYY445+OCDzzvvvCzNGQAASCCBsO3V1NTs2LEjhFBcXNysKa6prq5usW99ff3GjRtDCCeccMK999779NNPV1VVhRDy8vJOOOGEW2655bjjjsvi1AEAgCTxDmHbq6uriwoFBQXNmvLz86OjCONrmvnwww+jwn333Xf//fdXVVV17tw5Ly+vsbHxtddeu+iiixYsWJC1iQMAAMlihbDtxcfHt3iOfFTZ2NjYYt84EL788st9+vS5/fbbBw0atHPnzmeeeWbChAm1tbU/+MEPfvOb3+zxgPvS0tIW68eMGXPdddft5Y0AAADtm0DY9uIdRKODB5uJKvPy8lofJD8/f+rUqT179ozKF110UV1d3S233FJRUbFgwYL4DcPdcQ4hAACwRx4ZbXvxofPbt29v1lRbWxvFxd0dTH/wwQdHhTPOOCNKg7GLL744ipGrVq1q2wkDAADJJBC2vcLCwvz8/BDC6tWrmzXFNT169GixbxwIjzzyyGZN+fn5hxxySAhh/fr1bThbAAAgsQTCtpeTk9O7d+8QwrJly5o1LV++PCqUlJS02Ldr167RcRTvv/9+s6adO3du2rQptLR5KQAAwH4QCLNiyJAhIYSFCxcuWbIkrmxoaJgyZUoIoUePHrs7hDCEcPbZZ4cQ/vjHP27YsCGzfubMmdFWNP3798/StAEAgEQRCLNi2LBhubm56XR63LhxixYtampqqqysHD9+fPTI6PDhw6O9RquqqsrKysrKykaNGhX3/cpXvtKxY8fa2tprrrkmuj6dTv/3f//3XXfdFUIYMGDAKaeccoBuCwAAaFdy4i0xaVsTJ058+OGHo3JBQcGWLVui8tFHHz179uxoU5mKiopzzz03hDBw4MAnn3wy7vu73/3uO9/5TlNTUwjhsMMOq62t3bp1awjh0EMPfeCBB0444YTWv7q0tNQuowAAwB5ZIcyWsWPHTpgwoXv37iGEKA2mUqkRI0bMmDFj1y1Gm50reN555919992nnnpq586d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0+mszRQAAEgogTArli5dOm3atBBCv3795s2b98ILLyxevHj06NEhhIqKismTJ+/9UP/3//7fDRs2ZGmeAABAkgmEWTFnzpympqa8vLzJkyf36tUrhJCfn19eXj548OAQwqxZs/Zyxe/pp5/+3e9+N3DgwOxOFwAASCSBMCvmz58fQhgyZEiUBmMjR44MIVRXV69atWqPg7z33nsTJkzIz8+/4447sjRPAAAgyQTCtpdOpysrK0MIgwYNatYU11RUVLQ+SFNT00033bRt27bvfOc7xx57bDbmCQAAJJxA2PZqamp27NgRQiguLm7WFNdUV1e3PshDDz20ePHik0466YorrsjCHAEAABw7kQXxJqIFBQXNmvLz81OpVH19fesbjb711lv33ntv586db7/99tzc/QntpaWlLdaPGTPmuuuu248BAQCA9kcgbHs5OTnNCru2NjY27q57XV3d2LFjGxoaxo0b17t37/2bw4oVK/avIwAAkBweGW178Q6i9fX1u7ZGlXl5ebvrfuedd77zzjunnnrqv/7rv2ZphgAAAMEKYTZ06tQpKmzfvr1ZU21tbRQX42ua+ctf/vL444/n5+fffPPNmzdvbta6bdu2zZs3d+7cOZVKtfWsAQCAxBEI215hYWF+fv6OHTtWr17drCmu6dGjR4t933zzzRDCjh07hg4dumvrqFGjQgjXX3/9tdde25YzBgAAEskjo20vJycnevdv2bJlzZqWL18eFUpKSvZ7/Kampv3uCwAAELNCmBVDhgxZtWrVwoULlyxZEp892NDQMGXKlBBCjx49+vbt22LHb37zm1ddddWu9f379w8hzJw5s3///i3uVQMAALCvrBBmxbBhw3Jzc9Pp9Lhx4xYtWtTU1FRZWTl+/PjokdHhw4dHoa6qqqqsrKysrCx6FjSEkJOTk9eSqDU3NzcvL2//DqIAAABoxgphVvTv3//KK698+OGH33777csvv7ygoGDLli1R09FHHx2/AVhfX79169bQ0vYzAAAA2WatKVvGjh07YcKE7t27hxCiNJhKpUaMGDFjxoxdtxi1aygAAPDJy4kPzaPdKC0tdTA9AACwR1YIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASCiBEAAAIKEEQgAAgIQSCAEAABJKIAQAAEgogRAAACChBEIAAICEEggBAAASSiAEAABIKIEQAAAgoQRCAACAhBIIAQAAEkogBAAASKgOB3oC7V9VVdWaNWuKior69OmTSqX2vmNjY+O7775bXV1dXFx85JFHduzYMXuTBAAAEkggzJZ0Oj19+vRJkybV1NRENXl5eUOHDi0vLy8sLGy9b11d3V133fWrX/1q586dUU2XLl0uu+yyb33rW127ds3uvAEAgMTISafTB3oO7dMdd9wxderUqFxcXLxx48b6+voQQklJyZw5czp16rS7jk1NTSNHjlyyZEkIIT8/v6CgYOPGjVHTmWeeOXny5JycnNa/urS0dMWKFW1zGwAAQPvlHcKsWLp06bRp00II/fr1mzdv3gsvvLB48eLRo0eHECoqKiZPntxK3yeffDJKg9/61rdeffXVBQsWPPXUU+ecc04IYd68ec8///wncQMAAEACCIRZMWfOnKampry8vMmTJ/fq1SuEkJ+fX15ePnjw4BDCrFmzWlmYnT17dgjhlFNOueGGGzp06BBCGDBgwF133dW5c+cQwhtvvPEJ3QMAANDeCYRZMX/+/BDCkCFDojQYGzlyZAihurp61apVu+sbPe355S9/ObOyU6dO3bt3j/pmY8IAAEAC2VSm7aXT6crKyhDCoEGDmjXFNRUVFX379t21b319/Te+8Y0Qwr/8y79k1r/77rvr1q0LIZx66qnZmDMAAJBAAmHbq6mp2bFjRwihuLi4WVNcs7uFvlQq9a1vfSuzZtu2bX/9619vu+22dDp9xBFHnHHGGVmYMgAAkEQCYdurq6uLCgUFBc2a8vPzU6lUfX19fE3rzj333IqKiqjcq1evGTNmdOnSZW86lpaWtlg/ZsyY6667bm9GAAAA2j2BsO3Fx0K0eD5EVNnY2Lg3Q23fvj0KkCGEdevWXX311Q888MBhhx22x46OnQAAAPbIpjJtL95BNApyzUSVeXl5ezPU/Pnz33jjjeeff/6KK64IIbz11lvl5eVtNlEAACDZBMK2Fx86v3379mZNtbW1UVxs5WD6ZnJycnr27Hnz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"},"metadata":{},"execution_count":28},{"output_type":"stream","name":"stderr","text":"Array indices must be positive integers or logical values."}],"visibility":"remove","key":"sunFLxOgh9"}],"data":{"tags":[]},"visibility":"show","key":"dclkUxjbBS"},{"type":"image","url":"/build/2d-wave-d7d9336bedceaa706ae84721c45f9d28.mp4","alt":"Wave equation in 2d","position":{"start":{"line":441,"column":1},"end":{"line":441,"column":1}},"key":"VI4rpxNkYP","urlSource":"figures/2d-wave.mp4"}],"label":"demo-diffadv-wave-matlab","identifier":"demo-diffadv-wave-matlab","html_id":"demo-diffadv-wave-matlab","key":"yifgFKxFjs"},{"type":"heading","depth":3,"position":{"start":{"line":444,"column":1},"end":{"line":444,"column":1}},"children":[{"type":"text","value":"13.3 ","position":{"start":{"line":444,"column":1},"end":{"line":444,"column":1}},"key":"ZNH6ky13pD"},{"type":"link","identifier":"section-twodim-laplace","label":"section-twodim-laplace","kind":"narrative","position":{"start":{"line":444,"column":6},"end":{"line":444,"column":29}},"url":"/laplace","internal":true,"dataUrl":"/laplace.json","children":[{"type":"text","value":"Laplace and Poisson equations","key":"OlFcb12xc4"}],"key":"Z2HSSIfX15"}],"identifier":"id-13-3","label":"13.3 ","html_id":"id-13-3","implicit":true,"key":"liPnN4oWRJ"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-laplace-kron","label":"demo-laplace-kron","kind":"proof:example","position":{"start":{"line":447,"column":1},"end":{"line":447,"column":19}},"children":[{"type":"text","value":"Example ","key":"eKkV5PrQvT"},{"type":"text","value":"13.3.1","key":"fte91Vycrw"}],"template":"Example %s","enumerator":"13.3.1","resolved":true,"html_id":"demo-laplace-kron","remote":true,"url":"/laplace","dataUrl":"/laplace.json","key":"tpIGPM14Z9"}],"key":"JIaP0QMbR8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"A = [1, 2; -2, 0];\nB = [1, 10, 100; -5, 5, 3];\ndisp(\"A:\")\ndisp(A)\ndisp(\"B:\")\ndisp(B)","key":"ldzv08sGwF"},{"type":"output","id":"yg2_BeONoBuIcH_Uzc83U","data":[{"output_type":"stream","name":"stdout","text":"A:"},{"output_type":"stream","name":"stdout","text":"\n"},{"output_type":"stream","name":"stdout","text":"     1     2\n    -2     0\n\n"},{"output_type":"stream","name":"stdout","text":"B:"},{"output_type":"stream","name":"stdout","text":"\n"},{"output_type":"stream","name":"stdout","text":"     1    10   100\n    -5     5     3\n\n"}],"key":"GFJGvdd3PH"}],"data":{},"key":"G6GwBoKI7h"},{"type":"paragraph","position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"children":[{"type":"text","value":"Applying the definition manually, we get","position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"key":"FIkdjcVArE"}],"key":"Ik7tSE6DDI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"A_kron_B = [\n    A(1,1)*B  A(1,2)*B;\n    A(2,1)*B  A(2,2)*B\n    ]","key":"n0tQ8R3nfR"},{"type":"output","id":"K457Lul8U5kDNYFs13BGH","data":[{"output_type":"execute_result","execution_count":30,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>A_kron_B = 4×6 double\n   0.010000000000000   0.100000000000000   1.000000000000000   0.010000000000000   0.100000000000000   1.000000000000000\n  -0.050000000000000   0.050000000000000   0.030000000000000  -0.050000000000000   0.050000000000000   0.030000000000000\n                   0                   0                   0  -0.007500000000000  -0.075000000000000  -0.750000000000000\n                   0                   0                   0   0.037500000000000  -0.037500000000000  -0.022500000000000\n</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"A_kron_B = 4×6 double\n   0.010000000000000   0.100000000000000   1.000000000000000   0.010000000000000   0.100000000000000   1.000000000000000\n  -0.050000000000000   0.050000000000000   0.030000000000000  -0.050000000000000   0.050000000000000   0.030000000000000\n                   0                   0                   0  -0.007500000000000  -0.075000000000000  -0.750000000000000\n                   0                   0                   0   0.037500000000000  -0.037500000000000  -0.022500000000000\n","content_type":"text/plain"}}}],"key":"wp0WODnIih"}],"data":{},"key":"MWymtLPzrt"},{"type":"paragraph","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"children":[{"type":"text","value":"But it makes more sense to use ","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"mnGX8SDFKW"},{"type":"inlineCode","value":"kron","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"ooAH7RsrNs"},{"type":"text","value":".","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"dpknI5rpRD"}],"indexEntries":[{"entry":"MATLAB","subEntry":{"value":"kron","kind":"entry"},"emphasis":true}],"label":"index-UDKfCGwoEo","identifier":"index-udkfcgwoeo","html_id":"index-udkfcgwoeo","key":"CNgITpg5Du"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"kron(A, B)","key":"ChROj5d6rS"},{"type":"output","id":"6ivMAygf1wOrxJwSgaNAe","data":[{"output_type":"execute_result","execution_count":31,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>ans = 10×15 double\n    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0   -0.7500   -7.5000  -75.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n         0         0         0    3.7500   -3.7500   -2.2500   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0    0.6000    6.0000   60.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n         0         0         0         0         0         0   -3.0000    3.0000    1.8000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0         0         0         0   -0.4000   -4.0000  -40.0000    1.0000   10.0000  100.0000\n         0         0         0         0         0         0         0         0         0    2.0000   -2.0000   -1.2000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0\n         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0\n</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"ans = 10×15 double\n    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0   -0.7500   -7.5000  -75.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n         0         0         0    3.7500   -3.7500   -2.2500   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0    0.6000    6.0000   60.0000    1.0000   10.0000  100.0000    1.0000   10.0000  100.0000\n         0         0         0         0         0         0   -3.0000    3.0000    1.8000   -5.0000    5.0000    3.0000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0         0         0         0   -0.4000   -4.0000  -40.0000    1.0000   10.0000  100.0000\n         0         0         0         0         0         0         0         0         0    2.0000   -2.0000   -1.2000   -5.0000    5.0000    3.0000\n         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0\n         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0\n","content_type":"text/plain"}}}],"key":"OKCYQTzcFQ"}],"data":{},"key":"ajSaRVY6up"}],"label":"demo-laplace-kron-matlab","identifier":"demo-laplace-kron-matlab","html_id":"demo-laplace-kron-matlab","key":"bbaexlQnmP"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-laplace-fd","label":"demo-laplace-fd","kind":"proof:example","position":{"start":{"line":479,"column":1},"end":{"line":479,"column":17}},"children":[{"type":"text","value":"Example ","key":"iR0hiwSVXs"},{"type":"text","value":"13.3.2","key":"tfClOMiVX4"}],"template":"Example %s","enumerator":"13.3.2","resolved":true,"html_id":"demo-laplace-fd","remote":true,"url":"/laplace","dataUrl":"/laplace.json","key":"wiSF0OrtSY"}],"key":"EOfLiYYHF3"},{"type":"paragraph","position":{"start":{"line":481,"column":1},"end":{"line":481,"column":1}},"children":[{"type":"text","value":"We make a crude discretization for illustrative purposes.","position":{"start":{"line":481,"column":1},"end":{"line":481,"column":1}},"key":"IuaNGoUEAx"}],"key":"LDHwMVHgUh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"m = 6;  n = 5;\n[x, Dx, Dxx] = diffmat2(m, [0, 3]);\n[y, Dy, Dyy] = diffmat2(n, [-1, 1]);\n[mtx, X, Y, vec, unvec, is_boundary] = tensorgrid(x, y);","key":"LsFZ43yJcd"},{"type":"output","id":"Y4ySz7WyPFvApk1zd66K-","data":[],"key":"gLlvDKca3t"}],"data":{},"key":"ENGfEBnTnX"},{"type":"paragraph","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"children":[{"type":"text","value":"Next, we define ","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"key":"wgnWRM6KLE"},{"type":"text","value":"ϕ","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"key":"ooL42Oj6s8"},{"type":"text","value":" and evaluate it on the grid to get the forcing vector of the linear system.","position":{"start":{"line":490,"column":1},"end":{"line":490,"column":1}},"key":"re3BXOpnec"}],"key":"cvWJoMjZNz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"phi = @(x, y) x.^2 - y + 2;\nb = vec(mtx(phi));","key":"h2Jr3nGNDB"},{"type":"output","id":"htf_EcjiQkBiPXYwxYMcz","data":[],"key":"XTR7BYIli0"}],"data":{},"key":"wp5PEzJpez"},{"type":"paragraph","position":{"start":{"line":497,"column":1},"end":{"line":497,"column":1}},"children":[{"type":"text","value":"Here are the coefficients for the ","key":"LTxDhW6qS2"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"RCaxL6neEg"}],"key":"um6K5QbEbT"},{"type":"text","value":" collocation, before any modifications are made for the boundary conditions. The combination of Kronecker products and finite differences produces a characteristic sparsity pattern.","key":"EhW6rLWJN4"}],"key":"qcicmkwHSn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"A = kron(speye(n+1), sparse(Dxx)) + kron(sparse(Dyy), speye(m+1));\nclf,  spy(A)\ntitle(\"System matrix before boundary conditions\")","key":"gOELYy0nof"},{"type":"output","id":"HBGNl-13ldQO360yY5SgE","data":[{"output_type":"stream","name":"stderr","text":"Error using +\nArrays have incompatible sizes for this operation."}],"key":"XfY8akfXSx"}],"data":{},"key":"MKvYJq99VM"},{"type":"paragraph","position":{"start":{"line":505,"column":1},"end":{"line":505,"column":1}},"children":[{"type":"text","value":"The number of equations is equal to ","position":{"start":{"line":505,"column":1},"end":{"line":505,"column":1}},"key":"at420mdZfB"},{"type":"inlineMath","value":"(m+1)(n+1)","position":{"start":{"line":505,"column":1},"end":{"line":505,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(m+1)(n+1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>","key":"bDNGzDWYt6"},{"type":"text","value":", which is the total number of points on the grid.","position":{"start":{"line":505,"column":1},"end":{"line":505,"column":1}},"key":"wt74r7TjDx"}],"key":"SWFEIZDI1J"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"N = length(b)","key":"aBzBYTRibV"},{"type":"output","id":"3Qx0RyYy1PvBe9ZhVzWcu","data":[{"output_type":"execute_result","execution_count":35,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>N = \n     1\n</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"N = \n     1\n","content_type":"text/plain"}}}],"key":"yP1LcwSRzY"}],"data":{},"key":"glbwm0LcD4"},{"type":"paragraph","position":{"start":{"line":511,"column":1},"end":{"line":511,"column":1}},"children":[{"type":"text","value":"We now use the Boolean array that indicates where the boundary points lie in the grid.","position":{"start":{"line":511,"column":1},"end":{"line":511,"column":1}},"key":"JjguQGFnfb"}],"key":"aDS2PHVgQg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"spy(is_boundary)\ntitle(\"Boundary points\")","key":"ggtnd6U15p"},{"type":"output","id":"ujuDOB9WNIuHdm3khD18J","data":[{"output_type":"execute_result","execution_count":36,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"8b32d1abc61df886197c593a1bcf30e3","path":"/build/8b32d1abc61df886197c593a1bcf30e3.png"}}}],"key":"jzlnEsl2Xy"}],"data":{},"key":"bO7Lg6EKeM"},{"type":"paragraph","position":{"start":{"line":518,"column":1},"end":{"line":518,"column":1}},"children":[{"type":"text","value":"In order to impose Dirichlet boundary conditions, we replace the boundary rows of the system by rows of the identity.","position":{"start":{"line":518,"column":1},"end":{"line":518,"column":1}},"key":"w2BDnyg1rf"}],"key":"Q9tnnoQfuC"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"JK5dpZXALv"}],"key":"mU27sJt6SV"},{"type":"paragraph","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"children":[{"type":"text","value":"Changing rows of a sparse array requires that the operands be in a particular sparse representation called ","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"key":"t7V2828spr"},{"type":"inlineCode","value":"lil","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"key":"OXVmN2hRkZ"},{"type":"text","value":". The conversion isn’t done automatically because it can be slow and you are encouraged to avoid it when possible. We’re just trying to keep things conceptually simple here.","position":{"start":{"line":521,"column":1},"end":{"line":521,"column":1}},"key":"Z21Xznvk7q"}],"key":"pBJBhtMvaT"}],"class":"dropdown","key":"qQeVmoJXOH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"I = speye(N);\nidx = vec(is_boundary);\nA(idx, :) = I(idx, :);\n\nspy(A)\ntitle(\"System matrix with boundary conditions\")","key":"inerlV1bVd"},{"type":"output","id":"v9iKKI4RidIX7jR1ZXRyQ","data":[{"output_type":"stream","name":"stderr","text":"Index exceeds array bounds."}],"key":"T1zGApX88a"}],"data":{},"key":"T6pVrYEwgx"},{"type":"paragraph","position":{"start":{"line":533,"column":1},"end":{"line":533,"column":1}},"children":[{"type":"text","value":"Finally, we must replace the rows in the vector ","position":{"start":{"line":533,"column":1},"end":{"line":533,"column":1}},"key":"EBR17KxXiD"},{"type":"inlineMath","value":"\\mathbf{b}","position":{"start":{"line":533,"column":1},"end":{"line":533,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathbf\">b</span></span></span></span>","key":"nw7osFLwpn"},{"type":"text","value":" by the boundary values being assigned to the boundary points. Here, we let the boundary values be zero everywhere.","position":{"start":{"line":533,"column":1},"end":{"line":533,"column":1}},"key":"zPpQyBz6Bn"}],"key":"qdE1vYZkES"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"b(idx) = 0;","key":"NKRzcJv7Tw"},{"type":"output","id":"z3Nb8SpyoGovLWqwLDagU","data":[],"key":"SFmt2iwopK"}],"data":{},"key":"ewSSldQg6Q"},{"type":"paragraph","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"children":[{"type":"text","value":"Now we can solve for ","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"key":"yJdFo9bRtf"},{"type":"inlineMath","value":"\\mathbf{u}","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">u</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{u}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4444em;\"></span><span class=\"mord mathbf\">u</span></span></span></span>","key":"BhKrvMjv6a"},{"type":"text","value":" and reinterpret it as the matrix-shaped ","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"key":"bmmVuhNKB6"},{"type":"inlineMath","value":"\\mathbf{U}","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{U}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">U</span></span></span></span>","key":"bFXQJUw0oF"},{"type":"text","value":", the solution on our grid.","position":{"start":{"line":539,"column":1},"end":{"line":539,"column":1}},"key":"pZO5aP7ddm"}],"key":"Yw5Sw4RtmU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"u = A \\ b;\nU = unvec(u)","key":"gU8fYSmrTm"},{"type":"output","id":"iKmZg6T97VBD_zQPDPVlL","data":[{"output_type":"stream","name":"stderr","text":"Error using reshape\nNumber of elements must not change. Use [] as one of the size inputs to automatically calculate the appropriate size for that dimension.\n\nError in tensorgrid>@(u)reshape(u,m+1,n+1) (line 14)\n    unvec = @(u) reshape(u, m+1, n+1);"}],"key":"lcpEssMXtx"}],"data":{},"key":"dowi7BYTXt"}],"label":"demo-laplace-fd-matlab","identifier":"demo-laplace-fd-matlab","html_id":"demo-laplace-fd-matlab","key":"RmSBy4h8HW"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-laplace-poisson","label":"demo-laplace-poisson","kind":"proof:example","position":{"start":{"line":548,"column":1},"end":{"line":548,"column":22}},"children":[{"type":"text","value":"Example ","key":"jOd8sYvlKe"},{"type":"text","value":"13.3.3","key":"wXh7w3lbPS"}],"template":"Example %s","enumerator":"13.3.3","resolved":true,"html_id":"demo-laplace-poisson","remote":true,"url":"/laplace","dataUrl":"/laplace.json","key":"d8ksnQqAFE"}],"key":"JLxYPYNzHt"},{"type":"paragraph","position":{"start":{"line":551,"column":1},"end":{"line":551,"column":1}},"children":[{"type":"text","value":"First we define the problem on ","position":{"start":{"line":551,"column":1},"end":{"line":551,"column":1}},"key":"GZLtGMH7MM"},{"type":"inlineMath","value":"[0,1]\\times[0,2]","position":{"start":{"line":551,"column":1},"end":{"line":551,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>×</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]\\times[0,2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>","key":"SFRczqUo3j"},{"type":"text","value":".","position":{"start":{"line":551,"column":1},"end":{"line":551,"column":1}},"key":"nLQLPAPxWu"}],"key":"XDxTKIpzyg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"f = @(x, y) -sin(3*x .* y - 4*y) .* (9*y.^2 + (3*x - 4).^2);\ng = @(x, y) sin(3*x .* y - 4*y);\nxspan = [0, 1];\nyspan = [0, 2];","key":"Qee8aRqRqk"},{"type":"output","id":"x4ji7BKbGueAWJl04-n-1","data":[],"key":"W5ehnJ5ead"}],"data":{},"key":"bbDPpxC4oC"},{"type":"paragraph","position":{"start":{"line":560,"column":1},"end":{"line":560,"column":1}},"children":[{"type":"text","value":"Here is the finite-difference solution.","position":{"start":{"line":560,"column":1},"end":{"line":560,"column":1}},"key":"k6WntAMY3v"}],"key":"fgWUmXl5vW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"[X, Y, U] = poissonfd(f, g, 40, xspan, 60, yspan);\n\nclf, surf(X', Y', U')\ncolormap(parula),  shading interp\ncolorbar\ntitle(\"Solution of Poisson's equation\")\nxlabel(\"x\"),  ylabel(\"y\"),  zlabel(\"u(x,y)\")","key":"OWkdYwlkil"},{"type":"output","id":"APfhgz5NsLUJ9ePC0PdZV","data":[{"output_type":"stream","name":"stderr","text":"Error using LiveEditorEvaluationHelperE96dd2ce7-0f47-43fa-b1f9-321aa9637b9d>@(x)x.*exp(x)-2\nToo many input arguments.\n\nError in tensorgrid/grideval (line 19)\n            F(k) = f(X(k), Y(k));\n\nError in poissonfd (line 23)\nb = vec(mtx(f));"}],"key":"tonaS7pVvq"}],"data":{},"key":"A0t31sHfJw"},{"type":"paragraph","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"children":[{"type":"text","value":"Since this is an artificial problem with a known solution, we can plot the error, which is a smooth function of ","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"H2GY5PA3j4"},{"type":"inlineMath","value":"x","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>","key":"SoJ86NX8Uv"},{"type":"text","value":" and ","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"XtSiNsnOCO"},{"type":"inlineMath","value":"y","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>","key":"b48H1hQEdu"},{"type":"text","value":". It must be zero on the boundary; otherwise, we have implemented boundary conditions incorrectly.","position":{"start":{"line":572,"column":1},"end":{"line":572,"column":1}},"key":"nQ52tFm8rv"}],"key":"p1OQXnJAnu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"err = g(X, Y) - U;\nmx = max(abs(vec(err)));\npcolor(X', Y', err')\ncolormap(redsblues),  shading interp\nclim([-mx, mx]),  colorbar\naxis equal,  xlabel(\"x\"),  ylabel(\"y\")\ntitle(\"Error\")","key":"M5qV36pf4k"},{"type":"output","id":"toW8w6ddu0YXCZw6NqzJ4","data":[{"output_type":"stream","name":"stderr","text":"Error using -\nArrays have incompatible sizes for this operation."}],"key":"TroHiv0AUb"}],"data":{},"key":"Te2ZBkZmsr"}],"label":"demo-laplace-poisson-matlab","identifier":"demo-laplace-poisson-matlab","html_id":"demo-laplace-poisson-matlab","key":"Yv5PxQDQDQ"},{"type":"heading","depth":3,"position":{"start":{"line":585,"column":1},"end":{"line":585,"column":1}},"children":[{"type":"text","value":"13.4 ","position":{"start":{"line":585,"column":1},"end":{"line":585,"column":1}},"key":"eu5XmDjgMj"},{"type":"link","identifier":"section-twodim-nonlinear","label":"section-twodim-nonlinear","kind":"narrative","position":{"start":{"line":585,"column":6},"end":{"line":585,"column":31}},"url":"/nonlinear-1","internal":true,"dataUrl":"/nonlinear-1.json","children":[{"type":"text","value":"Nonlinear elliptic PDEs","key":"S0aokPCZfL"}],"key":"WuPPPqpwlL"}],"identifier":"id-13-4","label":"13.4 ","html_id":"id-13-4","implicit":true,"key":"LoiQXtv63D"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-nonlinear2d-mems","label":"demo-nonlinear2d-mems","kind":"proof:example","position":{"start":{"line":588,"column":1},"end":{"line":588,"column":23}},"children":[{"type":"text","value":"Example ","key":"i0etg1E5KM"},{"type":"text","value":"13.4.2","key":"kD0TntYYOS"}],"template":"Example %s","enumerator":"13.4.2","resolved":true,"html_id":"demo-nonlinear2d-mems","remote":true,"url":"/nonlinear-1","dataUrl":"/nonlinear-1.json","key":"C419e06cOb"}],"key":"RDL24E78sA"},{"type":"paragraph","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"children":[{"type":"text","value":"All we need to define are ","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"key":"H064yHnRk9"},{"type":"text","value":"ϕ","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"key":"n6Vai4iMje"},{"type":"text","value":" from ","position":{"start":{"line":590,"column":1},"end":{"line":590,"column":1}},"key":"RFrxGETeEa"},{"type":"crossReference","kind":"equation","identifier":"nonlinpdepde","label":"nonlinpdepde","children":[{"type":"text","value":"(","key":"tV7UvtirFg"},{"type":"text","value":"13.4.2","key":"uZbkXoqSpB"},{"type":"text","value":")","key":"YiW5FvFUXm"}],"template":"(%s)","enumerator":"13.4.2","resolved":true,"html_id":"nonlinpdepde","remote":true,"url":"/nonlinear-1","dataUrl":"/nonlinear-1.json","key":"CpJ9bq3wcX"},{"type":"text","value":" for the ","key":"MtOE6oJ3ke"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"GhQak7nzdm"}],"key":"dkrd3Z56Vw"},{"type":"text","value":", and a trivial zero function for the boundary condition.","key":"hBrRNtc0so"}],"key":"iHX9CsKsBN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"lambda = 1.5;\nphi = @(X, Y, U, Ux, Uxx, Uy, Uyy) Uxx + Uyy - lambda ./ (U + 1).^2;\ng = @(x, y) zeros(size(x));","key":"ihvtJq9Rmy"},{"type":"output","id":"Lv3F8N0PwYKQipuOS6cju","data":[],"key":"D3g4ojDf4U"}],"data":{},"key":"mrXcpQDdn3"},{"type":"paragraph","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"children":[{"type":"text","value":"Here is the solution for ","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"key":"DdoRnjlzkv"},{"type":"inlineMath","value":"m=15","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mn>15</mn></mrow><annotation encoding=\"application/x-tex\">m=15</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">15</span></span></span></span>","key":"EZH3LkXIcC"},{"type":"text","value":", ","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"key":"rhCVr7oql0"},{"type":"inlineMath","value":"n=8","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">n=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span>","key":"v4Q54er8S2"},{"type":"text","value":".","position":{"start":{"line":598,"column":1},"end":{"line":598,"column":1}},"key":"LcymVnSMmx"}],"key":"RuxsqnY0bd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"u = elliptic(phi, g, 15, [0, 2.5], 8, [0, 1]);\ndisp(sprintf(\"solution at (2, 0.6) is %.7f\", u(2, 0.6)))","key":"uV0sPAiqHT"},{"type":"output","id":"D65nwFaZR709m5EFNSFS5","data":[{"output_type":"stream","name":"stdout","text":"solution at (2, 0.6) is -0.2264594"},{"output_type":"stream","name":"stdout","text":"\n"}],"key":"HxFu0Ri4B5"}],"data":{},"key":"CvaLmdj8DL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"x = linspace(0, 2.5, 91);\ny = linspace(0, 1, 51);\n[mtx, X, Y] = tensorgrid(x, y);\nclf,  pcolor(x, y, mtx(u)')\ncolormap(flipud(sky)),  shading interp,  colorbar\naxis equal\nxlabel(\"x\"),  ylabel(\"y\")\ntitle(\"Deflection of a MEMS membrane\")","visibility":"hide","key":"kMbeBPP82q"},{"type":"output","id":"wJa0XXUty7ycl4O7Mx2YQ","data":[{"output_type":"execute_result","execution_count":45,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"34cbda56ac79f35b128e67e3670a85f0","path":"/build/34cbda56ac79f35b128e67e3670a85f0.png"}}}],"visibility":"show","key":"ovQNVekOrH"}],"data":{"tags":[]},"visibility":"show","key":"rGWIHyWDTn"},{"type":"paragraph","position":{"start":{"line":617,"column":1},"end":{"line":617,"column":1}},"children":[{"type":"text","value":"In the absence of an exact solution, how can we be confident that the solution is accurate? First, the Levenberg iteration converged without issuing a warning, so we should feel confident that the discrete equations were solved. Assuming that we encoded the ","key":"x4U4hCCF04"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"ukspEOd0YU"}],"key":"SHIZndM46L"},{"type":"text","value":" correctly, the remaining source of error is truncation from the discretization. We can estimate that by refining the grid a bit and seeing how much the numerical solution changes.","key":"ChQumtMuZ7"}],"key":"K4xBLjBLdM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"x_test = linspace(0, 2.5, 6);\ny_test = linspace(0, 1 , 5);\nmtx_test = tensorgrid(x_test, y_test);\nformat long\nmtx_test(u)","key":"iM9FgCBRY5"},{"type":"output","id":"xXTFDoRu6QBNR1KeIJnkI","data":[{"output_type":"execute_result","execution_count":46,"metadata":{},"data":{"text/html":{"content":"<html><body><pre>ans = 6×5 double\n                   0   0.000000000000000   0.000000000000000   0.000000000000000                   0\n   0.000000000000000  -0.174520738821158  -0.236562036535841  -0.174520738821158   0.000000000000000\n   0.000000000000000  -0.232549828809534  -0.320497790014285  -0.232549828809534   0.000000000000000\n   0.000000000000000  -0.232549828809534  -0.320497790014284  -0.232549828809534   0.000000000000000\n   0.000000000000000  -0.174520738821157  -0.236562036535841  -0.174520738821157   0.000000000000000\n                   0   0.000000000000000   0.000000000000000   0.000000000000000                   0\n</pre></body></html>","content_type":"text/html"},"text/plain":{"content":"ans = 6×5 double\n                   0   0.000000000000000   0.000000000000000   0.000000000000000                   0\n   0.000000000000000  -0.174520738821158  -0.236562036535841  -0.174520738821158   0.000000000000000\n   0.000000000000000  -0.232549828809534  -0.320497790014285  -0.232549828809534   0.000000000000000\n   0.000000000000000  -0.232549828809534  -0.320497790014284  -0.232549828809534   0.000000000000000\n   0.000000000000000  -0.174520738821157  -0.236562036535841  -0.174520738821157   0.000000000000000\n                   0   0.000000000000000   0.000000000000000   0.000000000000000                   0\n","content_type":"text/plain"}}}],"key":"EtPtSE0fhk"}],"data":{},"key":"LA9wwmgr07"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"u = elliptic(phi, g, 25, [0, 2.5], 14, [0, 1]);\nmtx_test(u)","key":"jRgNpRf6Uz"},{"type":"output","id":"OOxD8THPiPWjUwjN74zO0","data":[{"output_type":"stream","name":"stderr","text":"Error using LiveEditorEvaluationHelperE3379557e-dd98-4c46-a453-06d4cd57d7a2>@(x,u,du_dx)(u.^3-u)/epsilon\nToo many input arguments.\n\nError in elliptic/residual (line 24)\n        R = phi(X, Y, U, Dx * U, Dxx * U, U * Dy', U * Dyy');  % PDE\n\nError in levenberg (line 14)\nx = x1(:);     fk = f(x1);\n\nError in elliptic (line 30)\n    u = levenberg(@residual, vec(zeros(size(X))));"}],"key":"YZ9QQNMe6N"}],"data":{},"key":"CEFk8Ck3QN"},{"type":"paragraph","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"children":[{"type":"text","value":"The original solution seems to be accurate to about four digits.","position":{"start":{"line":632,"column":1},"end":{"line":632,"column":1}},"key":"PGa39CfkvH"}],"key":"h01Bp4KOuF"}],"label":"demo-nonlinear2d-mems-matlab","identifier":"demo-nonlinear2d-mems-matlab","html_id":"demo-nonlinear2d-mems-matlab","key":"ZZtvr2HeUf"}],"key":"gJP8G4u2Ep"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"format","visibility":"show","key":"pnDD2g25YC"},{"type":"output","id":"Y4jhqF-qNHUS-_qfAf_jr","data":[],"visibility":"show","key":"eY789IgPFf"}],"data":{"tags":[]},"visibility":"remove","key":"VJ32p7Stit"},{"type":"block","children":[{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-nonlinear-advdiff","label":"demo-nonlinear-advdiff","kind":"proof:example","position":{"start":{"line":642,"column":1},"end":{"line":642,"column":24}},"children":[{"type":"text","value":"Example ","key":"GzbxjXKOJY"},{"type":"text","value":"13.4.3","key":"SLB5FKSjOZ"}],"template":"Example %s","enumerator":"13.4.3","resolved":true,"html_id":"demo-nonlinear-advdiff","remote":true,"url":"/nonlinear-1","dataUrl":"/nonlinear-1.json","key":"x52jJtvq7J"}],"key":"p3O7rO7kZF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"phi = @(X, Y, U, Ux, Uxx, Uy, Uyy) 1 - Ux - 2*Uy + 0.05*(Uxx + Uyy);\ng = @(x, y) zeros(size(x));\nu = elliptic(phi, g, 32, [-1, 1], 32, [-1, 1]);","key":"FyoF37Od7l"},{"type":"output","id":"jz3iySkbZacWcnHBF0DBI","data":[],"key":"XkEPIVLByM"}],"data":{},"key":"O7xAPgBaAO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"x = linspace(-1, 1, 80);\ny = x;\nmtx = tensorgrid(x, y);\nclf,  pcolor(x, y, mtx(u)')\ncolormap(parula),  shading interp,  colorbar\naxis equal,  xlabel(\"x\"),  ylabel(\"y\")\ntitle(\"Steady advection–diffusion\")","visibility":"hide","key":"XN4utdw3SC"},{"type":"output","id":"bV6hxlRu4AWemZo7ZByzh","data":[{"output_type":"execute_result","execution_count":50,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"dae61b46fac606b3416a8de78ea11982","path":"/build/dae61b46fac606b3416a8de78ea11982.png"}}}],"visibility":"show","key":"G921Fc9sFm"}],"data":{"tags":[]},"visibility":"show","key":"h6xz8dm4k2"}],"label":"demo-nonlinear-advdiff-matlab","identifier":"demo-nonlinear-advdiff-matlab","html_id":"demo-nonlinear-advdiff-matlab","key":"Z7thp8TeRG"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-nonlinear2d-allencahn","label":"demo-nonlinear2d-allencahn","kind":"proof:example","position":{"start":{"line":665,"column":1},"end":{"line":665,"column":28}},"children":[{"type":"text","value":"Example ","key":"NJyfTjC7g2"},{"type":"text","value":"13.4.4","key":"TEv5pNeDLt"}],"template":"Example %s","enumerator":"13.4.4","resolved":true,"html_id":"demo-nonlinear2d-allencahn","remote":true,"url":"/nonlinear-1","dataUrl":"/nonlinear-1.json","key":"XqHC0V2KjL"}],"key":"IdVkqx9PR1"},{"type":"paragraph","position":{"start":{"line":668,"column":1},"end":{"line":668,"column":1}},"children":[{"type":"text","value":"The following defines the ","key":"dJxDUCvRWF"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"Cxaevwjr2s"}],"key":"GL2jkUdzUp"},{"type":"text","value":" and a nontrivial Dirichlet boundary condition for the square ","key":"g0HKT853jG"},{"type":"inlineMath","value":"[0,1]^2","position":{"start":{"line":668,"column":1},"end":{"line":668,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mo stretchy=\"false\">]</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">[0,1]^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">]</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>","key":"gvkuJ1JBIb"},{"type":"text","value":".","position":{"start":{"line":668,"column":1},"end":{"line":668,"column":1}},"key":"jLxroiQ907"}],"key":"MIenZ7Bjfh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"phi = @(X, Y, U, Ux, Uxx, Uy, Uyy) U .* (1-U.^2) + 0.05*(Uxx + Uyy);\ng = @(x, y) tanh(5*(x + 2*y - 1));","key":"EkUNxo3OXw"},{"type":"output","id":"TnqeW9Qd-_4-xwnVvO58E","data":[],"key":"NwTDUnLniY"}],"data":{},"key":"eapuNdPULw"},{"type":"paragraph","position":{"start":{"line":675,"column":1},"end":{"line":675,"column":1}},"children":[{"type":"text","value":"We solve the ","key":"mput2J1UpP"},{"type":"abbreviation","title":"partial differential equation","children":[{"type":"text","value":"PDE","key":"xJmlQXl2yh"}],"key":"aCNpmSPW6g"},{"type":"text","value":" and then plot the result.","key":"b7XLxZxTdI"}],"key":"QMlhnLBM16"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"u = elliptic(phi, g, 36, [0, 1], 36, [0, 1]);","key":"nWvRo21p5T"},{"type":"output","id":"cF64jJccU8uIGQpQzHj3_","data":[],"key":"MU87gd9zcS"}],"data":{},"key":"Fez4lxWXHW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"matlab","executable":true,"value":"x = linspace(0, 1, 80);\ny = x;\nmtx = tensorgrid(x, y);\nclf,  pcolor(x, y, mtx(u)')\ncolormap(parula),  shading interp,  colorbar\naxis equal,  xlabel(\"x\"),  ylabel(\"y\")\ntitle(\"Steady Allen–Cahn\")","visibility":"hide","key":"PFDbM8gvlH"},{"type":"output","id":"uAlsnpKIi2MAyOBjpRt9k","data":[{"output_type":"execute_result","execution_count":53,"metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"dd47c3eac7e0cacded79b159ebe529c4","path":"/build/dd47c3eac7e0cacded79b159ebe529c4.png"}}}],"visibility":"show","key":"Xk0e8uCoJK"}],"data":{"tags":[]},"visibility":"show","key":"jvnqirV1b2"}],"label":"demo-nonlinear2d-allencahn-matlab","identifier":"demo-nonlinear2d-allencahn-matlab","html_id":"demo-nonlinear2d-allencahn-matlab","key":"CQdJgbsJWY"}],"key":"wtPMo884Mi"}],"key":"sHyABTuyep"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Chapter 12","url":"/chapter12-1","group":"MATLAB codes"},"next":{"title":"Python setup","url":"/setup-2","group":"Python codes"}}},"domain":"http://localhost:3000"}