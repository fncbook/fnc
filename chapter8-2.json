{"version":2,"kind":"Notebook","sha256":"9d711c3358c7d7c747db6f876745988a0a4fe5df634a8e14d87471419bb5aea7","slug":"chapter8-2","location":"/python/chapter8.md","dependencies":[],"frontmatter":{"title":"Chapter 8","numbering":{"heading_1":{"enabled":false},"heading_2":{"enabled":false},"heading_3":{"enabled":false},"heading_4":{"enabled":false},"heading_5":{"enabled":false},"heading_6":{"enabled":false},"title":{"offset":2}},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"content_includes_title":false,"authors":[{"nameParsed":{"literal":"Tobin A. Driscoll","given":"Tobin A.","family":"Driscoll"},"name":"Tobin A. Driscoll","email":"driscoll@udel.edu","id":"contributors-myst-generated-uid-0","corresponding":true},{"nameParsed":{"literal":"Richard J. Braun","given":"Richard J.","family":"Braun"},"name":"Richard J. Braun","id":"contributors-myst-generated-uid-1"}],"github":"https://github.com/fncbook/fnc","math":{"\\float":{"macro":"\\mathbb{F}"},"\\real":{"macro":"\\mathbb{R}"},"\\complex":{"macro":"\\mathbb{C}"},"\\nat":{"macro":"\\mathbb{N}"},"\\integer":{"macro":"\\mathbb{Z}"},"\\rmn":{"macro":"\\mathbb{R}^{#1 \\times #2}"},"\\dd":{"macro":"\\frac{d #1}{d #2}"},"\\ddd":{"macro":"\\frac{d^2 #1}{d #2^2}"},"\\pp":{"macro":"\\frac{\\partial #1}{\\partial #2}"},"\\ppp":{"macro":"\\frac{\\partial^2 #1}{\\partial #2^2}"},"\\ppdd":{"macro":"\\frac{\\partial^2 #1}{\\partial #2 \\partial #3}"},"\\abs":{"macro":"\\left\\lvert #1 \\right\\rvert"},"\\norm":{"macro":"\\left\\lVert #1 \\right\\rVert"},"\\twonorm":{"macro":"\\norm{#1}_2"},"\\onenorm":{"macro":"\\norm{#1}_1"},"\\infnorm":{"macro":"\\norm{#1}_\\infty"},"\\anynorm":{"macro":"\\norm{#1}_#2"},"\\innerprod":{"macro":"\\langle #1,#2 \\rangle"},"\\pr":{"macro":"^{(#1)}"},"\\kron":{"macro":"#1 \\otimes #2"},"\\eye":{"macro":"\\mathbf{e}_#1"},"\\meye":{"macro":"\\mathbf{I}"},"\\Qhat":{"macro":"\\hat{\\mathbf{Q}}"},"\\Rhat":{"macro":"\\hat{\\mathbf{R}}"},"\\bfalpha":{"macro":"\\mathbf{alpha}"},"\\bfdelta":{"macro":"\\mathbf{delta}"},"\\bfzero":{"macro":"\\boldsymbol{0}"},"\\macheps":{"macro":"\\epsilon_\\text{mach}"},"\\fl":{"macro":"\\operatorname{fl}"},"\\diag":{"macro":"\\operatorname{diag}"},"\\ign":{"macro":"\\operatorname{sign}"},"\\Re":{"macro":"\\operatorname{Re}"},"\\Im":{"macro":"\\operatorname{Im}"},"\\ee":{"macro":"\\times 10^"},"\\lnorm":{"macro":"\\|"},"\\rnorm":{"macro":"\\|"},"\\floor":{"macro":"\\lfloor#1\\rfloor"},"\\cI":{"macro":"\\mathcal{I}"},"\\mtx":{"macro":"\\operatorname{mtx}"},"\\myvec":{"macro":"\\operatorname{vec}"},"\\argmin":{"macro":"\\operatorname{argmin}"}},"abbreviations":{"IVP":"initial-value problem","BVP":"boundary-value problem","TPBVP":"two-point boundary-value problem","ONC":"matrix with orthonormal columns","SVD":"singular value decomposition","EVD":"eigenvalue decomposition","SPD":"symmetric positive definite","HPD":"hermitian positive definite","PDE":"partial differential equation","ODE":"ordinary differential equation"},"edit_url":"https://github.com/fncbook/fnc/blob/master/python/chapter8.md","exports":[{"format":"md","filename":"chapter8.md","url":"/build/chapter8-f00fcb14c1ab22f891cb0724a8c772b6.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"LpWINpCRbN"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"fPUq6hhpG7"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Power iteration","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"izUantPyTO"}],"key":"fj9yFfxRRG"},{"type":"include","file":"fncbook/fncbook/chapter08.py","literal":true,"filter":{"startAt":"def poweriter","endAt":"return gamma, x"},"children":[{"type":"code","value":"def poweriter(A, numiter):\n    \"\"\"\n    poweriter(A, numiter)\n\n    Perform numiter power iterations with the matrix A, starting from a random vector, \n    and return a vector of eigenvalue estimates and the final eigenvector approximation.\n    \"\"\"\n    n = A.shape[0]\n    x = np.random.randn(n)\n    x = x / np.linalg.norm(x, np.inf)\n    gamma = np.zeros(numiter)\n    for k in range(numiter):\n        y = A @ x\n        m = np.argmax(abs(y))\n        gamma[k] = y[m] / x[m]\n        x = y / y[m]\n\n    return gamma, x","lang":"python","showLineNumbers":true,"filename":"poweriter.py","key":"HLaWPASIJd"}],"key":"H9L4ukqF9Z"}],"label":"function-poweriter-python","identifier":"function-poweriter-python","html_id":"function-poweriter-python","key":"HUSpvtadFj"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Inverse iteration","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"XSs6tNez39"}],"key":"MwNKHbl1ku"},{"type":"include","file":"fncbook/fncbook/chapter08.py","literal":true,"filter":{"startAt":"def inviter","endAt":"return gamma, x"},"children":[{"type":"code","value":"def inviter(A, s, numiter):\n    \"\"\"\n    inviter(A, s, numiter)\n\n    Perform numiter inverse iterations with the matrix A and shift s, starting\n    from a random vector, and return a vector of eigenvalue estimates and the final\n    eigenvector approximation.\n    \"\"\"\n    n = A.shape[0]\n    x = np.random.randn(n)\n    x = x / np.linalg.norm(x, np.inf)\n    gamma = np.zeros(numiter)\n    PL, U = lu(A - s * np.eye(n), permute_l=True)\n    for k in range(numiter):\n        y = np.linalg.solve(U, np.linalg.solve(PL, x))\n        m = np.argmax(abs(y))\n        gamma[k] = x[m] / y[m] + s\n        x = y / y[m]\n\n    return gamma, x","lang":"python","showLineNumbers":true,"filename":"inviter.py","key":"TEbOhiQ0AU"}],"key":"Cep0mJ4axi"}],"label":"function-inviter-python","identifier":"function-inviter-python","html_id":"function-inviter-python","key":"rnM8rCHl7E"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"Arnoldi iteration","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"tVQPh5Sxlo"}],"key":"Ry92u5HpCM"},{"type":"include","file":"fncbook/fncbook/chapter08.py","literal":true,"filter":{"startAt":"def arnoldi","endAt":"return Q, H"},"children":[{"type":"code","value":"def arnoldi(A, u, m):\n    \"\"\"\n    arnoldi(A, u, m)\n\n    Perform the Arnoldi iteration for A starting with vector u, out to the Krylov\n    subspace of degree m. Return the orthonormal basis (m+1 columns) and the upper\n    Hessenberg H of size m+1 by m.\n    \"\"\"\n    n = u.size\n    Q = np.zeros([n, m + 1])\n    H = np.zeros([m + 1, m])\n    Q[:, 0] = u / np.linalg.norm(u)\n    for j in range(m):\n        # Find the new direction that extends the Krylov subspace.\n        v = A @ Q[:, j]\n        # Remove the projections onto the previous vectors.\n        for i in range(j + 1):\n            H[i, j] = Q[:, i] @ v\n            v -= H[i, j] * Q[:, i]\n        # Normalize and store the new basis vector.\n        H[j + 1, j] = np.linalg.norm(v)\n        Q[:, j + 1] = v / H[j + 1, j]\n\n    return Q, H","lang":"python","showLineNumbers":true,"filename":"arnoldi.py","key":"mhxgCaclW6"}],"key":"k0MwLYI8h0"}],"label":"function-arnoldi-python","identifier":"function-arnoldi-python","html_id":"function-arnoldi-python","key":"biVKsPgo47"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"text","value":"GMRES","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"XANy3Awyuv"}],"key":"W4nwS2d8v6"},{"type":"include","file":"fncbook/fncbook/chapter08.py","literal":true,"filter":{"startAt":"def gmres","endAt":"return x, residual"},"children":[{"type":"code","value":"def gmres(A, b, m):\n    \"\"\"\n    gmres(A, b, m)\n\n    Do m iterations of GMRES for the linear system A*x=b. Return the final solution\n    estimate x and a vector with the history of residual norms. (This function is for\n    demo only, not practical use.)\n    \"\"\"\n    n = len(b)\n    Q = np.zeros([n, m + 1])\n    Q[:, 0] = b / np.linalg.norm(b)\n    H = np.zeros([m + 1, m])\n\n    # Initial \"solution\" is zero.\n    residual = np.hstack([np.linalg.norm(b), np.zeros(m)])\n\n    for j in range(m):\n        # Next step of Arnoldi iteration.\n        v = A @ Q[:, j]\n        for i in range(j + 1):\n            H[i, j] = Q[:, i] @ v\n            v -= H[i, j] * Q[:, i]\n        H[j + 1, j] = np.linalg.norm(v)\n        Q[:, j + 1] = v / H[j + 1, j]\n\n        # Solve the minimum residual problem.\n        r = np.hstack([np.linalg.norm(b), np.zeros(j + 1)])\n        z = np.linalg.lstsq(H[:j + 2, :j + 1], r)[0]\n        x = Q[:, :j + 1] @ z\n        residual[j + 1] = np.linalg.norm(A @ x - b)\n\n    return x, residual","lang":"python","showLineNumbers":true,"filename":"gmres.py","key":"UxpFftUTdM"}],"key":"NT2eyl7AaQ"}],"label":"function-gmres-python","identifier":"function-gmres-python","html_id":"function-gmres-python","key":"BD0kHUp6ck"},{"type":"heading","depth":2,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Examples","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"WYvs7RzcrM"}],"identifier":"examples","label":"Examples","html_id":"examples","implicit":true,"key":"uvSHqUUWUv"}],"key":"TnZLiTa0e2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"exec(open(\"FNC_init.py\").read())","visibility":"show","key":"Fz8betleAO"},{"type":"output","id":"R6bnnEarXkaONIBX1Yunv","data":[],"visibility":"show","key":"EovOqEm03R"}],"data":{"tags":[]},"visibility":"remove","key":"XvBt24qsYU"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"text","value":"8.1 ","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"LAUS9eS4Cr"},{"type":"link","identifier":"section-krylov-structure","label":"section-krylov-structure","kind":"narrative","position":{"start":{"line":68,"column":5},"end":{"line":68,"column":30}},"url":"/structure-1","internal":true,"dataUrl":"/structure-1.json","children":[{"type":"text","value":"Sparsity and structure","key":"tXCkcemXvj"}],"key":"WtQFjenQYj"}],"identifier":"id-8-1","label":"8.1 ","html_id":"id-8-1","implicit":true,"key":"IH8LGVANsR"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-structure-sparse","label":"demo-structure-sparse","kind":"proof:example","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":23}},"children":[{"type":"text","value":"Example ","key":"vOttm33m2a"},{"type":"text","value":"8.1.1","key":"H0bkocMfLT"}],"template":"Example %s","enumerator":"8.1.1","resolved":true,"html_id":"demo-structure-sparse","remote":true,"url":"/structure-1","dataUrl":"/structure-1.json","key":"ftWc4WfvCc"}],"key":"cEekMyGVRm"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"GmMODkXduv"}],"key":"pcPuWa1opi"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Functions to work with sparse matrices are found in the ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"LiOgexCI1G"},{"type":"inlineCode","value":"scipy.sparse","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"vNu5Xof3TL"},{"type":"text","value":" module.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"egh7C6YKJ1"}],"key":"LyTjPjPdXp"}],"key":"v2iJ7HGluw"},{"type":"paragraph","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"Here we load the adjacency matrix of a graph with 2790 nodes. Each node is a web page referring to Roswell, NM, and the edges represent links between web pages. (Credit goes to Panayiotis Tsaparas and the University of Toronto for making this data public.)","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"mg6uCfyNHg"}],"key":"DvUxwjioJa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import scipy.sparse as sp\nfrom scipy.io import loadmat\n\nvars = loadmat(\"roswelladj.mat\")    # get from the book's website\nA = sp.csr_matrix(vars[\"A\"])","key":"FJitWQUKdi"},{"type":"output","id":"FTe_Tb3gR1rnIcAh9o6Sg","data":[],"key":"elu2O9BCrf"}],"key":"cAqIUQ80VO"},{"type":"paragraph","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"text","value":"We may define the density of ","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"key":"jE2olXPOMn"},{"type":"inlineMath","value":"\\mathbf{A}","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">A</span></span></span></span>","key":"mxuIOrZDrQ"},{"type":"text","value":" as the number of nonzeros divided by the total number of entries.","position":{"start":{"line":87,"column":1},"end":{"line":87,"column":1}},"key":"ex50pQcD02"}],"key":"tbd5si3Yuq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"m, n = A.shape\nprint(f\"density is {A.nnz / (m * n):.3%}\")","key":"nQnWuPuUCu"},{"type":"output","id":"MKIEkEMLVF8bEbLa-LsKR","data":[{"output_type":"stream","name":"stdout","text":"density is 0.109%\n"}],"key":"zvBJKcb4VM"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"nnz","kind":"entry"},"emphasis":true}],"label":"index-ejQAsap2T0","identifier":"index-ejqasap2t0","html_id":"index-ejqasap2t0","key":"ad1VOMRoaG"},{"type":"paragraph","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"children":[{"type":"text","value":"We can compare the storage space needed for the sparse ","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"n3sozaA9mQ"},{"type":"inlineMath","value":"\\mathbf{A}","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">A</span></span></span></span>","key":"OnIqoYlJha"},{"type":"text","value":" with the space needed for its dense / full counterpart.","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"dP9rLjjPNZ"}],"key":"sAAN0F0sW3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"F = A.todense()\nprint(f\"{A.data.nbytes/1e6:.3f} MB for sparse form, {F.nbytes/1e6:.3f} MB for dense form\")","key":"OkTSn79TGg"},{"type":"output","id":"V3QSk0dDFOHft-Hvg7dIS","data":[{"output_type":"stream","name":"stdout","text":"0.068 MB for sparse form, 62.273 MB for dense form\n"}],"key":"rW5pns5E1a"}],"key":"GqomPiCND6"},{"type":"paragraph","position":{"start":{"line":105,"column":1},"end":{"line":105,"column":1}},"children":[{"type":"text","value":"Matrix-vector products are also much faster using the sparse form because operations with structural zeros are skipped.","position":{"start":{"line":105,"column":1},"end":{"line":105,"column":1}},"key":"OyYod8cKGI"}],"key":"WkTd6eTlzr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from timeit import default_timer as timer\nx = random.randn(n)\nstart = timer()\nfor i in range(1000):\n    A @ x\nprint(f\"sparse time: {timer() - start:.4g} sec\")","key":"Csay8FDm4P"},{"type":"output","id":"rKq-_q7Qpt6bCpbbC81aq","data":[{"output_type":"stream","name":"stdout","text":"sparse time: 0.01033 sec\n"}],"key":"BVmYEN0ElJ"}],"key":"R2EDb09pX4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = timer()\nfor i in range(1000):\n    F @ x\nprint(f\"dense time: {timer() - start:.4g} sec\")","key":"NpwnMk9whl"},{"type":"output","id":"EM-cEpaZgR9WdXH6na7nf","data":[{"output_type":"stream","name":"stdout","text":"dense time: 4.215 sec\n"}],"key":"jbXwwIXcY1"}],"key":"duLw6oqF9H"}],"label":"demo-structure-sparse-python","identifier":"demo-structure-sparse-python","html_id":"demo-structure-sparse-python","key":"vK4kGtTDkD"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-structure-fill","label":"demo-structure-fill","kind":"proof:example","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":21}},"children":[{"type":"text","value":"Example ","key":"dXj8CG90cW"},{"type":"text","value":"8.1.2","key":"Zo5cdySjg3"}],"template":"Example %s","enumerator":"8.1.2","resolved":true,"html_id":"demo-structure-fill","remote":true,"url":"/structure-1","dataUrl":"/structure-1.json","key":"FUHj3fY9Aa"}],"key":"qdaYWVBmX9"},{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"Here is the adjacency matrix of a graph representing a small-world network, featuring connections to neighbors and a small number of distant contacts.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"Ggx0VV27dN"}],"key":"rB1lBfTFF6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import networkx as nx\nwsg = nx.watts_strogatz_graph(200, 4, 0.02)","key":"qLNU6rcLq1"},{"type":"output","id":"ajfwHIWcxSd9AQh-wYV_y","data":[],"key":"sBAKtVglRT"}],"key":"GydojFwVnL"},{"type":"paragraph","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Because each node connects to relatively few others, the adjacency matrix is quite sparse.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"NdxElyASRC"}],"key":"jATeDgwbHt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"A = nx.adjacency_matrix(wsg)\nspy(A)\ntitle(\"Adjacency matrix $A$\");","key":"v645naoTVu"},{"type":"output","id":"0_xFfDaLW24uESV6RdyUb","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c71ea4bf39b395b8879fad22fb9db67e","path":"/build/c71ea4bf39b395b8879fad22fb9db67e.png"}}}],"key":"Q5wPuGQi1p"}],"key":"Rsr3ikuTBT"},{"type":"paragraph","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"text","value":"By ","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"DaKfUxrkvm"},{"type":"crossReference","kind":"proof:theorem","identifier":"theorem-insight-adjmat","label":"theorem-insight-adjmat","children":[{"type":"text","value":"Theorem ","key":"VDH3p9ZXUU"},{"type":"text","value":"7.1.1","key":"XfjmTQKNSn"}],"template":"Theorem %s","enumerator":"7.1.1","resolved":true,"html_id":"theorem-insight-adjmat","remote":true,"url":"/insight","dataUrl":"/insight.json","key":"UbkkeVMVqv"},{"type":"text","value":", the entries of ","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"sy6WrN3cUy"},{"type":"inlineMath","value":"\\mathbf{A}^k","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">A</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A}^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>","key":"Oq4NpeV8rx"},{"type":"text","value":" give the number of walks of length ","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"AZJtG21GxP"},{"type":"inlineMath","value":"k","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>","key":"eQxieSDIqK"},{"type":"text","value":" between pairs of nodes, as with “","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"rQwraYgF9s"},{"type":"emphasis","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"text","value":"k","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"DLZzQ5rhCE"}],"key":"Z4Sb71j1Qc"},{"type":"text","value":" degrees of separation” within a social network. As ","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"ZBJPIkDevu"},{"type":"inlineMath","value":"k","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>","key":"j8FAPiBqtd"},{"type":"text","value":" grows, the density of ","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"RH3pdaPPIp"},{"type":"inlineMath","value":"\\mathbf{A}^k","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">A</mi><mi>k</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A}^k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span>","key":"xGlAbxORMV"},{"type":"text","value":" also grows.","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"FTvAftSC4D"}],"key":"AWxWLiNaNw"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"rzcuPk3OcQ"}],"key":"ZlHH2r2bqM"},{"type":"paragraph","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"While ","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"Y83gHtnoD3"},{"type":"inlineCode","value":"A**6","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"Q4dnjNNi6N"},{"type":"text","value":" is valid syntax here, it means elementwise power, not matrix power.","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"xkk36YvplW"}],"key":"ySbef349Sa"}],"class":"dropdown","key":"zQSyrVVFeu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import matrix_power\nspy(matrix_power(A, 6))\ntitle((\"$A^6$\"));","key":"WQyV49egG0"},{"type":"output","id":"LY6r0DE2PPejq5CSgXXcY","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2989bddfd248d6a7469bdef8ab59cd14","path":"/build/2989bddfd248d6a7469bdef8ab59cd14.png"}}}],"key":"FFbxREzyi6"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"matrix_power","kind":"entry"},"emphasis":true}],"label":"index-RNV5E9IoLJ","identifier":"index-rnv5e9iolj","html_id":"index-rnv5e9iolj","key":"r5Jkc7GELR"}],"label":"demo-structure-fill-python","identifier":"demo-structure-fill-python","html_id":"demo-structure-fill-python","key":"Dp9HSnv7if"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-structure-sparseband","label":"demo-structure-sparseband","kind":"proof:example","position":{"start":{"line":160,"column":1},"end":{"line":160,"column":27}},"children":[{"type":"text","value":"Example ","key":"BtQa9EonMx"},{"type":"text","value":"8.1.3","key":"ivbPSGg8fk"}],"template":"Example %s","enumerator":"8.1.3","resolved":true,"html_id":"demo-structure-sparseband","remote":true,"url":"/structure-1","dataUrl":"/structure-1.json","key":"kpBlSUtF1P"}],"key":"B2d15r3S7y"},{"type":"paragraph","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"LWwkFDTTlY"},{"type":"inlineCode","value":"scipi.sparse.diags","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"v8ZXqqMSQs"},{"type":"text","value":" function creates a sparse matrix given its diagonal elements and the diagonal indexes to put them on. The main or central diagonal is numbered zero, above and to the right of that is positive, and below and to the left is negative.","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"nG0EkXcHwa"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"diags","kind":"entry"},"emphasis":true}],"label":"index-QC8H1LCXDE","identifier":"index-qc8h1lcxde","html_id":"index-qc8h1lcxde","key":"zLmcz0jQeK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"n = 50\ndata = [n * ones(n-3), ones(n), linspace(-1, 1-n, n-1)]\noffsets = [-3, 0, 1]    # 3rd below, main, 1st above\nA = sp.diags(data, offsets, format=\"lil\")\nprint(A[:7, :7].todense())","key":"bZUMixHBzo"},{"type":"output","id":"vv7B4BvKR9O9fPmXNBpbw","data":[{"output_type":"stream","name":"stdout","text":"[[ 1. -1.  0.  0.  0.  0.  0.]\n [ 0.  1. -2.  0.  0.  0.  0.]\n [ 0.  0.  1. -3.  0.  0.  0.]\n [50.  0.  0.  1. -4.  0.  0.]\n [ 0. 50.  0.  0.  1. -5.  0.]\n [ 0.  0. 50.  0.  0.  1. -6.]\n [ 0.  0.  0. 50.  0.  0.  1.]]\n"}],"key":"xTJv6WeMSX"}],"key":"uopTQMLcIi"},{"type":"paragraph","position":{"start":{"line":175,"column":1},"end":{"line":175,"column":1}},"children":[{"type":"text","value":"Without pivoting, the LU factors have the same lower and upper bandwidth as the original matrix.","position":{"start":{"line":175,"column":1},"end":{"line":175,"column":1}},"key":"ydHxvvGRDg"}],"key":"GlG68P4cAy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"L, U = FNC.lufact(A.todense())\nsubplot(1, 2, 1), spy(L)\nsubplot(1, 2, 2), spy(U);","key":"R6SStlNeuz"},{"type":"output","id":"AOf4KDiSgdIZnOonCF2SH","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b9b58db058e30b06125ba5957e17466a","path":"/build/b9b58db058e30b06125ba5957e17466a.png"}}}],"key":"hcS7jBCYCu"}],"key":"Hs1jFw9fkl"},{"type":"paragraph","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"children":[{"type":"text","value":"However, if we introduce row pivoting, bandedness may be expanded or destroyed.","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"apDhCSdUb0"}],"key":"lnFghQPBrt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"L, U, p = FNC.plufact(A.todense())\nsubplot(1, 2, 1), spy(L[p, :])\nsubplot(1, 2, 2), spy(U)","key":"kwtcJGwFSp"},{"type":"output","id":"rPPu2bn9ubAX0u57-67mJ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"6d9b517d3399a41c419b8a0f7e078788","path":"/build/6d9b517d3399a41c419b8a0f7e078788.png"}}}],"key":"zVGGXnw2ls"}],"key":"SEX1gsFKyd"}],"label":"demo-structure-sparseband-python","identifier":"demo-structure-sparseband-python","html_id":"demo-structure-sparseband-python","key":"H6uaihhSt0"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-structure-linalg","label":"demo-structure-linalg","kind":"proof:example","position":{"start":{"line":194,"column":1},"end":{"line":194,"column":23}},"children":[{"type":"text","value":"Example ","key":"oD4zv04rtt"},{"type":"text","value":"8.1.4","key":"qopkiYLVcN"}],"template":"Example %s","enumerator":"8.1.4","resolved":true,"html_id":"demo-structure-linalg","remote":true,"url":"/structure-1","dataUrl":"/structure-1.json","key":"SIsArrm11m"}],"key":"scIpQqzcfg"},{"type":"paragraph","position":{"start":{"line":197,"column":1},"end":{"line":197,"column":1}},"children":[{"type":"text","value":"The following generates a random sparse matrix with prescribed eigenvalues.","position":{"start":{"line":197,"column":1},"end":{"line":197,"column":1}},"key":"lyO9UtHtR1"}],"key":"kTOqzvAJvK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"n = 4000\ndensity = 4e-4\nev = 1 / arange(1, n + 1)\nA = FNC.sprandsym(n, density, eigvals=ev)\nprint(f\"density is {A.nnz / prod(A.shape):.3%}\")","key":"U9xnrZD7nd"},{"type":"output","id":"vzm4fCP18I2n9J9H_29u5","data":[{"output_type":"stream","name":"stdout","text":"density is 0.040%\n"}],"key":"GWFJEIvQcC"}],"key":"kAf0rnYAYq"},{"type":"paragraph","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"oGULQECd1u"},{"type":"inlineCode","value":"eigs","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"IR1Jjt7YnV"},{"type":"text","value":" function finds a small number eigenvalues meeting some criterion. First, we ask for the 5 of largest (complex) magnitude using ","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"WsynFuKNQD"},{"type":"inlineCode","value":"which=\"LM\"","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"gUnbYSGVXi"},{"type":"text","value":".","position":{"start":{"line":210,"column":1},"end":{"line":210,"column":1}},"key":"k1aQ1B1Bc1"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"eigs","kind":"entry"},"emphasis":true}],"label":"index-iFnNCm5QEP","identifier":"index-ifnncm5qep","html_id":"index-ifnncm5qep","key":"iZFpRmqFjS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import eigs\nev, V = eigs(A, k=5, which=\"LM\")    # largest magnitude\nprint(1 / ev)","key":"qs7lAAvy86"},{"type":"output","id":"2H2AwcKWv4t-cyjbGQ0VW","data":[{"output_type":"stream","name":"stdout","text":"[1.+0.j 2.+0.j 3.+0.j 4.+0.j 5.+0.j]\n"}],"key":"nfFgnieaYb"}],"key":"E6yqJbbck9"},{"type":"paragraph","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"text","value":"Now we find the 4 closest to the value 1 in the complex plane, via ","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"key":"a0vH6HqMxQ"},{"type":"inlineCode","value":"sigma=1","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"key":"lwL2TZGNxO"},{"type":"text","value":".","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"key":"GgSZVMrLuc"}],"key":"JIB6zRy4X0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import eigs\nev, V = eigs(A, k=4, sigma=0.03)    # closest to sigma\nprint(ev)","key":"PhG2Emm45W"},{"type":"output","id":"oBYAthq27-fMCEF3xMVZp","data":[{"output_type":"stream","name":"stdout","text":"[0.03030303+0.j 0.02941176+0.j 0.02857143+0.j 0.03125   +0.j]\n"}],"key":"iKSs229M1D"}],"key":"KXTqzpyUIT"},{"type":"paragraph","position":{"start":{"line":226,"column":1},"end":{"line":226,"column":1}},"children":[{"type":"text","value":"The time needed to solve a sparse linear system is not easy to predict unless you have some more information about the matrix. But it will typically be orders of magnitude faster than the dense version of the same problem.","position":{"start":{"line":226,"column":1},"end":{"line":226,"column":1}},"key":"tQfQ02V0sq"}],"key":"JfFIYugSY6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import spsolve\nx = 1 / arange(1, n + 1)\nb = A @ x\nstart = timer()\nxx = spsolve(A, b)\nprint(f\"sparse time: {timer() - start:.3g} sec\")\nprint(f\"residual: {norm(b - A @ xx, 2):.1e}\")","key":"ZhVJxxQUcW"},{"type":"output","id":"8_-ujt1q27N5Hgl3VeQAZ","data":[{"output_type":"stream","name":"stdout","text":"sparse time: 0.00234 sec\nresidual: 1.4e-17\n"}],"key":"qHqCl4bzMY"}],"key":"fyAMBzKT8X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import solve\nF = A.todense()\nstart = timer()\nxx = solve(F, b)\nprint(f\"dense time: {timer() - start:.3g} sec\")\nprint(f\"residual: {norm(b - A @ xx, 2):.1e}\")","key":"iNkC89yBl8"},{"type":"output","id":"4gyPAZGX0UEmLEsDZWWp1","data":[{"output_type":"stream","name":"stdout","text":"dense time: 0.651 sec\nresidual: 1.0e-18\n"}],"key":"GrDBdpEqgV"}],"key":"rczoUsGcXl"}],"label":"demo-structure-linalg-python","identifier":"demo-structure-linalg-python","html_id":"demo-structure-linalg-python","key":"HJpF3CwqmR"},{"type":"heading","depth":3,"position":{"start":{"line":248,"column":1},"end":{"line":248,"column":1}},"children":[{"type":"text","value":"8.2 ","position":{"start":{"line":248,"column":1},"end":{"line":248,"column":1}},"key":"T6NGeWdL7x"},{"type":"link","identifier":"section-krylov-power","label":"section-krylov-power","kind":"narrative","position":{"start":{"line":248,"column":5},"end":{"line":248,"column":26}},"url":"/power","internal":true,"dataUrl":"/power.json","children":[{"type":"text","value":"Power iteration","key":"Xb6hfXSTEb"}],"key":"FSwTQfSUMt"}],"identifier":"id-8-2","label":"8.2 ","html_id":"id-8-2","implicit":true,"key":"k14WEXjn00"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-power-one","label":"demo-power-one","kind":"proof:example","position":{"start":{"line":251,"column":1},"end":{"line":251,"column":16}},"children":[{"type":"text","value":"Example ","key":"yxV9ZE787v"},{"type":"text","value":"8.2.1","key":"W4B39GDR5E"}],"template":"Example %s","enumerator":"8.2.1","resolved":true,"html_id":"demo-power-one","remote":true,"url":"/power","dataUrl":"/power.json","key":"B90acLCjRG"}],"key":"YoZjoa7lsF"},{"type":"paragraph","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"children":[{"type":"text","value":"Here we choose a random 5×5 matrix and a random 5-vector.","position":{"start":{"line":253,"column":1},"end":{"line":253,"column":1}},"key":"RevfTVPiSc"}],"key":"JlFi2GSjiS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"A = random.choice(range(10), (5, 5))\nA = A / sum(A, 0)\nx = random.randn(5)\nprint(x)","key":"MTybAXlfbz"},{"type":"output","id":"YwHrabJtUeFW4RvPp0HFt","data":[{"output_type":"stream","name":"stdout","text":"[ 0.01625921  1.12469252 -1.03159398 -1.07634808 -0.86719647]\n"}],"key":"aaXypgYuOw"}],"key":"yT7Hyb14kk"},{"type":"paragraph","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"children":[{"type":"text","value":"Applying matrix-vector multiplication once doesn’t do anything recognizable.","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"iSIAQJcwy4"}],"key":"ldRoQ9X10F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"y = A @ x\nprint(y)","key":"dGEz7OokgN"},{"type":"output","id":"MpohqMmcHSzc-pgo17vPo","data":[{"output_type":"stream","name":"stdout","text":"[-0.27883486 -0.17186327 -0.54425979 -0.09238942 -0.74683946]\n"}],"key":"qv9qHuUl3s"}],"key":"oAFxv2mUnv"},{"type":"paragraph","position":{"start":{"line":269,"column":1},"end":{"line":269,"column":1}},"children":[{"type":"text","value":"Repeating the multiplication still doesn’t do anything obvious.","position":{"start":{"line":269,"column":1},"end":{"line":269,"column":1}},"key":"JQgteuh3G8"}],"key":"MvrZ0tIfyT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"z = A @ y\nprint(z)","key":"t36z0oiVOz"},{"type":"output","id":"UEgyZ1D6uZjNObFbONoNd","data":[{"output_type":"stream","name":"stdout","text":"[-0.44040111 -0.2269828  -0.63162626 -0.12023385 -0.41494278]\n"}],"key":"mIP20OoHcb"}],"key":"dKy67BRot3"},{"type":"paragraph","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"children":[{"type":"text","value":"But if we keep repeating the matrix-vector multiplication, something remarkable happens: ","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"key":"RUIx8qEVbD"},{"type":"inlineMath","value":"\\mathbf{A} \\mathbf{x} \\approx \\mathbf{x}","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">A</mi><mi mathvariant=\"bold\">x</mi><mo>≈</mo><mi mathvariant=\"bold\">x</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A} \\mathbf{x} \\approx \\mathbf{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">Ax</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4444em;\"></span><span class=\"mord mathbf\">x</span></span></span></span>","key":"k6vCzmVvm7"},{"type":"text","value":".","position":{"start":{"line":276,"column":1},"end":{"line":276,"column":1}},"key":"ZgSUmhszvo"}],"key":"SLpYjKQUJC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"x = random.randn(5)\nfor j in range(6):\n    x = A @ x\nprint(x)\nprint(A @ x)","key":"JeLbCbRZwY"},{"type":"output","id":"hUnR_EogG4OgJQLx__Y62","data":[{"output_type":"stream","name":"stdout","text":"[-0.50092191 -0.38393686 -0.80795185 -0.11786672 -0.38991905]\n[-0.50095246 -0.38366721 -0.80779459 -0.11778424 -0.39039788]\n"}],"key":"jLDJPJjHhd"}],"key":"OZufGvKGXG"},{"type":"paragraph","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"children":[{"type":"text","value":"This phenomenon is unlikely to be a coincidence!","position":{"start":{"line":286,"column":1},"end":{"line":286,"column":1}},"key":"DUnURSH9vX"}],"key":"qBTVSs2Se1"}],"label":"demo-power-one-python","identifier":"demo-power-one-python","html_id":"demo-power-one-python","key":"s2boOGeCZu"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-power-iter","label":"demo-power-iter","kind":"proof:example","position":{"start":{"line":291,"column":1},"end":{"line":291,"column":17}},"children":[{"type":"text","value":"Example ","key":"nnLQKaEqo1"},{"type":"text","value":"8.2.2","key":"EOmInPNFcf"}],"template":"Example %s","enumerator":"8.2.2","resolved":true,"html_id":"demo-power-iter","remote":true,"url":"/power","dataUrl":"/power.json","key":"KKSaa95wjD"}],"key":"D0DTDFOfpB"},{"type":"paragraph","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"children":[{"type":"text","value":"We will experiment with the power iteration on a 5×5 matrix with prescribed eigenvalues and dominant eigenvalue at 1.","position":{"start":{"line":293,"column":1},"end":{"line":293,"column":1}},"key":"v5OjgfbRVq"}],"key":"VLYYc0yYU5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = [1, -0.75, 0.6, -0.4, 0]\nA = triu(ones([5, 5]), 1) + diag(ev)    # triangular matrix, eigs on diagonal","key":"ASOCJojaxW"},{"type":"output","id":"pAckXIdFvmx2PrHQdTpUC","data":[],"key":"tTQJsfRQcD"}],"key":"OADPDn9WAX"},{"type":"paragraph","position":{"start":{"line":300,"column":1},"end":{"line":300,"column":1}},"children":[{"type":"text","value":"We run the power iteration 60 times. The first output should be a sequence of estimates converging to the dominant eigenvalue—which, in this case, we set up to be 1.","position":{"start":{"line":300,"column":1},"end":{"line":300,"column":1}},"key":"SsCxVard9W"}],"key":"Og4LSIkh3p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"beta, x = FNC.poweriter(A, 60)\nprint(beta)","key":"bHHGv9pwZ3"},{"type":"output","id":"TLmSe0F5WC2aljJvkDzWA","data":[{"output_type":"stream","name":"stdout","text":"[-1.12920432 -1.38599711 -0.72950344 -1.09801506  3.71534294  0.72629196\n  1.50935003  0.83702386  1.210633    0.90152752  1.10322979  0.94141086\n  1.05406259  0.965737    1.02922103  0.9802292   1.01605926  0.98869633\n  1.0089087   0.99357612  1.00496902  0.99636328  1.00278062  0.99794612\n  1.00155909  0.99884179  1.00087524  0.99934749  1.00049171  0.9996326\n  1.00027637  0.99979321  1.00015538  0.99988364  1.00008738  0.99993453\n  1.00004914  0.99996317  1.00002764  0.99997928  1.00001555  0.99998834\n  1.00000874  0.99999344  1.00000492  0.99999631  1.00000277  0.99999793\n  1.00000156  0.99999883  1.00000088  0.99999934  1.00000049  0.99999963\n  1.00000028  0.99999979  1.00000016  0.99999988  1.00000009  0.99999993]\n"}],"key":"DqTbuXfzPl"}],"key":"NxXI6RnUL8"},{"type":"paragraph","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"children":[{"type":"text","value":"We check for linear convergence using a log-linear plot of the error.","position":{"start":{"line":307,"column":1},"end":{"line":307,"column":1}},"key":"ZlbIVr19TY"}],"key":"eJ7GjU3a9W"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"err = 1 - beta\nsemilogy(arange(60), abs(err), \"-o\")\nylim(1e-10, 1)\nxlabel(\"$k$\")\nylabel(\"$|\\\\lambda_1 - \\\\beta_k|$\")\ntitle(\"Convergence of power iteration\");","key":"RgFYaHdAUu"},{"type":"output","id":"VfMiDfJE4ldCGLppUnMm1","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"cadefec18d89f5387f42f15377850509","path":"/build/cadefec18d89f5387f42f15377850509.png"}}}],"key":"jvyb9a3PiX"}],"key":"kC2IpfDq2J"},{"type":"paragraph","position":{"start":{"line":318,"column":1},"end":{"line":318,"column":1}},"children":[{"type":"text","value":"The asymptotic trend seems to be a straight line, consistent with linear convergence. To estimate the convergence rate, we look at the ratio of two consecutive errors in the linear part of the convergence curve. The ratio of the first two eigenvalues should match the observed rate.","position":{"start":{"line":318,"column":1},"end":{"line":318,"column":1}},"key":"rbRbHbt6m6"}],"key":"auJhcKIYZZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"theory: {ev[1] / ev[0]:.5f}\")\nprint(f\"observed: {err[40] / err[39]:.5f}\")","key":"J7jeU3wqOs"},{"type":"output","id":"wfYOKyKtJwW5u9RB8VTuL","data":[{"output_type":"stream","name":"stdout","text":"theory: -0.75000\nobserved: -0.75023\n"}],"key":"eupoe0a7KB"}],"key":"WMb0gu6hIi"},{"type":"paragraph","position":{"start":{"line":325,"column":1},"end":{"line":325,"column":1}},"children":[{"type":"text","value":"Note that the error is supposed to change sign on each iteration. The effect of these alternating signs is that estimates oscillate around the exact value.","position":{"start":{"line":325,"column":1},"end":{"line":325,"column":1}},"key":"rrfqpPFKsQ"}],"key":"pt7jD8GI5G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(beta[26:30])","key":"ZYloTX82UZ"},{"type":"output","id":"lrBPJ8jj3VT3IIPlOKXqN","data":[{"output_type":"stream","name":"stdout","text":"[1.00087524 0.99934749 1.00049171 0.9996326 ]\n"}],"key":"BT0Jse1q2k"}],"key":"oCHlgs7xRH"},{"type":"paragraph","position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"children":[{"type":"text","value":"In practical situations, we don’t know the exact eigenvalue that the algorithm is supposed to find. In that case we would base errors on the final ","position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"key":"Hc1JwGSkIH"},{"type":"text","value":"β","position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"key":"kWM0qBVuih"},{"type":"text","value":" that was found, as in the following plot.","position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"key":"z4PDnrOHKZ"}],"key":"ZyxSInn5IQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"err = beta[-1] - beta\nsemilogy(arange(60), abs(err), \"-o\")\nylim(1e-10, 1), xlabel(\"$k$\")\nylabel(\"$|\\\\lambda_1 - \\\\beta_k|$\")\ntitle(\"Convergence of power iteration\");","key":"pnMI3HYxN0"},{"type":"output","id":"vQhF2kupeafVbiWYDs2f1","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ac2be3d8b82f738db4832772c8ea7301","path":"/build/ac2be3d8b82f738db4832772c8ea7301.png"}}}],"key":"ROKZeKAZBz"}],"key":"vtrtRhrkMA"},{"type":"paragraph","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"children":[{"type":"text","value":"The results are very similar until the last few iterations, when the limited accuracy of the reference value begins to show. That is, while it is a good estimate of ","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"key":"USvTompNob"},{"type":"inlineMath","value":"\\lambda_1","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\lambda_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>","key":"ckDS7bY274"},{"type":"text","value":", it is less good as an estimate of the error in nearby estimates.","position":{"start":{"line":341,"column":1},"end":{"line":341,"column":1}},"key":"pxA1AXT3Is"}],"key":"r9ZkLwSc29"}],"label":"demo-power-iter-python","identifier":"demo-power-iter-python","html_id":"demo-power-iter-python","key":"TkjWPAWZM2"},{"type":"heading","depth":3,"position":{"start":{"line":345,"column":1},"end":{"line":345,"column":1}},"children":[{"type":"text","value":"8.3 ","position":{"start":{"line":345,"column":1},"end":{"line":345,"column":1}},"key":"sTeeS5Giqh"},{"type":"link","identifier":"section-krylov-inviter","label":"section-krylov-inviter","kind":"narrative","position":{"start":{"line":345,"column":5},"end":{"line":345,"column":28}},"url":"/inviter","internal":true,"dataUrl":"/inviter.json","children":[{"type":"text","value":"Inverse iteration","key":"PDiWYcvCy7"}],"key":"xGMaVrr9Og"}],"identifier":"id-8-3","label":"8.3 ","html_id":"id-8-3","implicit":true,"key":"oBScdhPsde"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-inviter-conv","label":"demo-inviter-conv","kind":"proof:example","position":{"start":{"line":348,"column":1},"end":{"line":348,"column":19}},"children":[{"type":"text","value":"Example ","key":"AzJIn1aQ2Q"},{"type":"text","value":"8.3.1","key":"cmNPEW6Oj9"}],"template":"Example %s","enumerator":"8.3.1","resolved":true,"html_id":"demo-inviter-conv","remote":true,"url":"/inviter","dataUrl":"/inviter.json","key":"xUnDNKHwlD"}],"key":"Llo8nb8Nte"},{"type":"paragraph","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"children":[{"type":"text","value":"We set up a ","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"key":"PniXOK57jE"},{"type":"inlineMath","value":"5\\times 5","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5\\times 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>","key":"wV4bnQAVNF"},{"type":"text","value":" triangular matrix with prescribed eigenvalues on its diagonal.","position":{"start":{"line":350,"column":1},"end":{"line":350,"column":1}},"key":"m06LErAdLs"}],"key":"C0yS9Jxj94"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = array([1, -0.75, 0.6, -0.4, 0])\nA = triu(ones([5, 5]), 1) + diag(ev)    # triangular matrix, eigs on diagonal","key":"RuiEc6xM5Q"},{"type":"output","id":"CpEScxjXIz8TYYWJbw-Bu","data":[],"key":"YogscvLyrS"}],"key":"N2ZpCZ0dMC"},{"type":"paragraph","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"children":[{"type":"text","value":"We run inverse iteration with the shift ","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"key":"qYC2Adrevc"},{"type":"inlineMath","value":"s=0.7","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>0.7</mn></mrow><annotation encoding=\"application/x-tex\">s=0.7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.7</span></span></span></span>","key":"vMEIQINrjU"},{"type":"text","value":". Convergence should be to the eigenvalue closest to the shift, which we know to be ","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"key":"HdN6H9j0Ua"},{"type":"text","value":"0.6","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"key":"I4H1oQYqaM"},{"type":"text","value":" here.","position":{"start":{"line":357,"column":1},"end":{"line":357,"column":1}},"key":"sbQ3Y890qS"}],"key":"nKPOjxz67B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"beta, x = FNC.inviter(A, 0.7, 30)\nprint(beta)","key":"GcBpF1hmTG"},{"type":"output","id":"-Z4S5DPRGoxRk5gqdznFQ","data":[{"output_type":"stream","name":"stdout","text":"[0.64812339 0.54460204 0.61083493 0.59524782 0.60141657 0.59950405\n 0.60016195 0.59994554 0.60001809 0.59999396 0.60000201 0.59999933\n 0.60000022 0.59999993 0.60000002 0.59999999 0.6        0.6\n 0.6        0.6        0.6        0.6        0.6        0.6\n 0.6        0.6        0.6        0.6        0.6        0.6       ]\n"}],"key":"q40lFsQ1rV"}],"key":"VowaGOChNa"},{"type":"paragraph","position":{"start":{"line":364,"column":1},"end":{"line":364,"column":1}},"children":[{"type":"text","value":"As expected, the eigenvalue that was found is the one closest to 0.7. The convergence is again linear.","position":{"start":{"line":364,"column":1},"end":{"line":364,"column":1}},"key":"aZfJQZgmVP"}],"key":"fyvCABDAID"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"err = beta[-1] - beta    # last estimate is our best\nsemilogy(arange(30), abs(err), \"-o\")\nylim(1e-16, 1)\nxlabel(\"$k$\"),  ylabel(\"$|\\\\lambda_3 - \\\\beta_k|$\")\ntitle((\"Convergence of inverse iteration\"));","key":"JDDRNGVCl7"},{"type":"output","id":"sTRPc2tfUhUFXgfxgcueP","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fa98493e54c05d9813953a20d2e63f4f","path":"/build/fa98493e54c05d9813953a20d2e63f4f.png"}}}],"key":"wxBDS03snq"}],"key":"CXeWPtvviU"},{"type":"paragraph","position":{"start":{"line":377,"column":1},"end":{"line":377,"column":1}},"children":[{"type":"text","value":"Let’s reorder the eigenvalues to enforce ","position":{"start":{"line":377,"column":1},"end":{"line":377,"column":1}},"key":"vXs3tDNz1H"},{"type":"crossReference","kind":"equation","identifier":"shiftorder","label":"shiftorder","children":[{"type":"text","value":"(","key":"a2aEJfsrv3"},{"type":"text","value":"8.3.3","key":"jIx1sFgjUM"},{"type":"text","value":")","key":"XBmMmHoPL7"}],"template":"(%s)","enumerator":"8.3.3","resolved":true,"html_id":"shiftorder","remote":true,"url":"/inviter","dataUrl":"/inviter.json","key":"oRS8bj5gXv"},{"type":"text","value":".","position":{"start":{"line":377,"column":1},"end":{"line":377,"column":1}},"key":"PyGubJuIKS"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"argsort","kind":"entry"},"emphasis":true}],"label":"index-A0qL62qcF4","identifier":"index-a0ql62qcf4","html_id":"index-a0ql62qcf4","key":"SqLsjaaYM8"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"s4h4p7DJLi"}],"key":"r9xfn1Eez4"},{"type":"paragraph","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"key":"Hbj6Tp1wTF"},{"type":"inlineCode","value":"argsort","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"key":"Env5yh7GlZ"},{"type":"text","value":" function returns the index permutation needed to sort the given vector, rather than the sorted vector itself.","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"key":"Cp1B0DVrR1"}],"key":"xQfiHEMA73"}],"class":"dropdown","key":"beivD7XQlz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = ev[argsort(abs(ev - 0.7))]\nprint(ev)","key":"MogaagRBdT"},{"type":"output","id":"lsdrrfd5McYo1ic26cJ-B","data":[{"output_type":"stream","name":"stdout","text":"[ 0.6   1.    0.   -0.4  -0.75]\n"}],"key":"eHu9YrXGxX"}],"key":"TyC35dYLUG"},{"type":"paragraph","position":{"start":{"line":388,"column":1},"end":{"line":388,"column":1}},"children":[{"type":"text","value":"Now it is easy to compare the theoretical and observed linear convergence rates.","position":{"start":{"line":388,"column":1},"end":{"line":388,"column":1}},"key":"p3gdGaZ0Cu"}],"key":"l3QC9e6N1Z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"theory: {(ev[0] - 0.7) / (ev[1] - 0.7):.5f}\")\nprint(f\"observed: {err[21] / err[20]:.5f}\")","key":"TOKQ8B1kPO"},{"type":"output","id":"-yV1wn3toWrotcW2zfDsx","data":[{"output_type":"stream","name":"stdout","text":"theory: -0.33333\nobserved: -0.33327\n"}],"key":"BiqXtP73HC"}],"key":"K4iRN6HthK"}],"label":"demo-inviter-conv-python","identifier":"demo-inviter-conv-python","html_id":"demo-inviter-conv-python","key":"rVCBCGwoz8"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-inviter-accel","label":"demo-inviter-accel","kind":"proof:example","position":{"start":{"line":397,"column":1},"end":{"line":397,"column":20}},"children":[{"type":"text","value":"Example ","key":"RmJymWBom1"},{"type":"text","value":"8.3.2","key":"tLL61m9y9P"}],"template":"Example %s","enumerator":"8.3.2","resolved":true,"html_id":"demo-inviter-accel","remote":true,"url":"/inviter","dataUrl":"/inviter.json","key":"nu7TzwOU7r"}],"key":"Z4zRtwOIAs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = array([1, -0.75, 0.6, -0.4, 0])\nA = triu(ones([5, 5]), 1) + diag(ev)    # triangular matrix, eigs on diagonal","key":"jgOazAxT85"},{"type":"output","id":"J-dS8lfivZmOHLY4R8o5j","data":[],"key":"Zh4xdywmoL"}],"key":"IdJfK0L4Q4"},{"type":"paragraph","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"children":[{"type":"text","value":"We begin with a shift ","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"key":"elNOgQk22q"},{"type":"inlineMath","value":"s=0.7","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>=</mo><mn>0.7</mn></mrow><annotation encoding=\"application/x-tex\">s=0.7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.7</span></span></span></span>","key":"Fd3zvpE4bz"},{"type":"text","value":", which is closest to the eigenvalue 0.6.","position":{"start":{"line":404,"column":1},"end":{"line":404,"column":1}},"key":"zl4q8R62wv"}],"key":"IpLff6NJar"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import solve\ns = 0.7\nx = ones(5)\ny = solve(A - s * eye(5), x)\nbeta = x[0] / y[0] + s\nprint(f\"latest estimate: {beta:.8f}\")","key":"TY8wqVRJX6"},{"type":"output","id":"izd2G0Z5PUY9Svjb5lWxh","data":[{"output_type":"stream","name":"stdout","text":"latest estimate: 0.70348139\n"}],"key":"IhKjLzxgWt"}],"key":"geRDZXZLll"},{"type":"paragraph","position":{"start":{"line":415,"column":1},"end":{"line":415,"column":1}},"children":[{"type":"text","value":"Note that the result is not yet any closer to the targeted 0.6. But we proceed (without being too picky about normalization here).","position":{"start":{"line":415,"column":1},"end":{"line":415,"column":1}},"key":"PYTjykzG8a"}],"key":"uStRMCJ1y7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"s = beta\nx = y / y[0]\ny = solve(A - s * eye(5), x)\nbeta = x[0] / y[0] + s\nprint(f\"latest estimate: {beta:.8f}\")","key":"oi5Cl54BrL"},{"type":"output","id":"P5kiZ_pp3iDS0WJj4JSM0","data":[{"output_type":"stream","name":"stdout","text":"latest estimate: 0.56127614\n"}],"key":"ZnL4eadlG1"}],"key":"vfaI8cUThc"},{"type":"paragraph","position":{"start":{"line":425,"column":1},"end":{"line":425,"column":1}},"children":[{"type":"text","value":"Still not much apparent progress. However, in just a few more iterations the results are dramatically better.","position":{"start":{"line":425,"column":1},"end":{"line":425,"column":1}},"key":"YePPWD28TZ"}],"key":"dGuAOiZyBJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"for k in range(4):\n    s = beta\n    x = y / y[0]\n    y = solve(A - s * eye(5), x)\n    beta = x[0] / y[0] + s\n    print(f\"latest estimate: {beta:.12f}\")","key":"gN8qlxmvP9"},{"type":"output","id":"EMGtL6qFDRA-OjI_nQaD3","data":[{"output_type":"stream","name":"stdout","text":"latest estimate: 0.596431288475\nlatest estimate: 0.599971709182\nlatest estimate: 0.599999997856\nlatest estimate: 0.600000000000\n"}],"key":"AKJIkrLy7Y"}],"key":"zy20Tq31RO"}],"label":"demo-inviter-accel-python","identifier":"demo-inviter-accel-python","html_id":"demo-inviter-accel-python","key":"HKOVDMFwXc"},{"type":"heading","depth":3,"position":{"start":{"line":437,"column":1},"end":{"line":437,"column":1}},"children":[{"type":"text","value":"8.4 ","position":{"start":{"line":437,"column":1},"end":{"line":437,"column":1}},"key":"UIowElCIG5"},{"type":"link","identifier":"section-krylov-subspace","label":"section-krylov-subspace","kind":"narrative","position":{"start":{"line":437,"column":5},"end":{"line":437,"column":29}},"url":"/subspace","internal":true,"dataUrl":"/subspace.json","children":[{"type":"text","value":"Krylov subspaces","key":"FDebANjbq0"}],"key":"pS9jVi9kXz"}],"identifier":"id-8-4","label":"8.4 ","html_id":"id-8-4","implicit":true,"key":"Hm8u3NvUjA"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-subspace-unstable","label":"demo-subspace-unstable","kind":"proof:example","position":{"start":{"line":440,"column":1},"end":{"line":440,"column":24}},"children":[{"type":"text","value":"Example ","key":"zyqgLdPmJy"},{"type":"text","value":"8.4.1","key":"S0643OHbQq"}],"template":"Example %s","enumerator":"8.4.1","resolved":true,"html_id":"demo-subspace-unstable","remote":true,"url":"/subspace","dataUrl":"/subspace.json","key":"bh4ovEOePg"}],"key":"k00kcSCTdk"},{"type":"paragraph","position":{"start":{"line":442,"column":1},"end":{"line":442,"column":1}},"children":[{"type":"text","value":"First we define a triangular matrix with known eigenvalues, and a random vector ","position":{"start":{"line":442,"column":1},"end":{"line":442,"column":1}},"key":"nAC7upk8ju"},{"type":"inlineMath","value":"b","position":{"start":{"line":442,"column":1},"end":{"line":442,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>","key":"FBWBPm4IUb"},{"type":"text","value":".","position":{"start":{"line":442,"column":1},"end":{"line":442,"column":1}},"key":"YeoDf61Ch0"}],"key":"HSDpaeDNWC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = 10 + arange(1, 101)\nA = triu(random.rand(100, 100), 1) + diag(ev)\nb = random.rand(100)","key":"MemYmLEUJC"},{"type":"output","id":"kbFdWc-WkW-qLETnHXViL","data":[],"key":"cIjSbt09cM"}],"key":"KXYklceyb4"},{"type":"paragraph","position":{"start":{"line":450,"column":1},"end":{"line":450,"column":1}},"children":[{"type":"text","value":"Next we build up the first ten Krylov matrices iteratively, using renormalization after each matrix-vector multiplication.","position":{"start":{"line":450,"column":1},"end":{"line":450,"column":1}},"key":"DSULDoadZo"}],"key":"hlv0PZsnrI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"Km = zeros([100, 30])\nKm[:, 0] = b\nfor m in range(29):\n    v = A @ Km[:, m]\n    Km[:, m + 1] = v / norm(v)","key":"GPzU1QxzNi"},{"type":"output","id":"e_LEAtKFiBitwA2lPR-QW","data":[],"key":"zgWk2S408Z"}],"key":"SIeRIQqbQr"},{"type":"paragraph","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"children":[{"type":"text","value":"Now we solve least-squares problems for Krylov matrices of increasing dimension, recording the residual in each case.","position":{"start":{"line":460,"column":1},"end":{"line":460,"column":1}},"key":"qDmo3F0mAi"}],"key":"dpMi6ea5Cd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import lstsq\nresid = zeros(30)\nresid[0] = norm(b)\nfor m in range(1, 30):\n    z = lstsq(A @ Km[:, :m], b, rcond=None)[0]\n    x = Km[:, :m] @ z\n    resid[m] = norm(b - A @ x)","key":"akY5gZYy1B"},{"type":"output","id":"_7YJpHURsgcly09p3bU-r","data":[],"key":"vrK78xCDa7"}],"key":"one93ovTD0"},{"type":"paragraph","position":{"start":{"line":472,"column":1},"end":{"line":472,"column":1}},"children":[{"type":"text","value":"The linear system approximations show smooth linear convergence at first, but the convergence stagnates after only a few digits have been found.","position":{"start":{"line":472,"column":1},"end":{"line":472,"column":1}},"key":"tf18hr7ufH"}],"key":"KPpxrD3nEV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"semilogy(range(30), resid, \"-o\")\nxlabel(\"$m$\"),  ylabel(\"$\\\\| b-Ax_m \\\\|$\")\ntitle((\"Residual for linear systems\"));","key":"wOQIVzmCVy"},{"type":"output","id":"MAazJVB1ua2wirnSTC5k9","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"91114bcd90a600b833fd7a87b6a1a2d4","path":"/build/91114bcd90a600b833fd7a87b6a1a2d4.png"}}}],"key":"A2HlkTYjdR"}],"key":"anevNlfn9U"}],"label":"demo-subspace-unstable-python","identifier":"demo-subspace-unstable-python","html_id":"demo-subspace-unstable-python","key":"xx285Pt3ZU"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-subspace-arnoldi","label":"demo-subspace-arnoldi","kind":"proof:example","position":{"start":{"line":482,"column":1},"end":{"line":482,"column":23}},"children":[{"type":"text","value":"Example ","key":"T9TEL8qw5p"},{"type":"text","value":"8.4.2","key":"s3LGePriBP"}],"template":"Example %s","enumerator":"8.4.2","resolved":true,"html_id":"demo-subspace-arnoldi","remote":true,"url":"/subspace","dataUrl":"/subspace.json","key":"nIeG0hBGh1"}],"key":"JHPAUht16B"},{"type":"paragraph","position":{"start":{"line":484,"column":1},"end":{"line":484,"column":1}},"children":[{"type":"text","value":"Here again is the linear system from ","position":{"start":{"line":484,"column":1},"end":{"line":484,"column":1}},"key":"hsPiCHbxqy"},{"type":"crossReference","identifier":"demo-subspace-unstable","label":"demo-subspace-unstable","kind":"proof:example","position":{"start":{"line":484,"column":38},"end":{"line":484,"column":61}},"children":[{"type":"text","value":"Example ","key":"LV27OVs8tx"},{"type":"text","value":"8.4.1","key":"sdwL6yk9Av"}],"template":"Example %s","enumerator":"8.4.1","resolved":true,"html_id":"demo-subspace-unstable","remote":true,"url":"/subspace","dataUrl":"/subspace.json","key":"ssu8IVxK3E"},{"type":"text","value":".","position":{"start":{"line":484,"column":1},"end":{"line":484,"column":1}},"key":"Ty31RFulYb"}],"key":"P6ZhyUJuyd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = 10 + arange(1, 101)\nA = triu(random.rand(100, 100), 1) + diag(ev)\nb = random.rand(100);","key":"nkVrE1pHDL"},{"type":"output","id":"XWoLtTyNgw0WB3aqSlDSB","data":[],"key":"f3RzdiwmD5"}],"key":"B4X1RBqvpa"},{"type":"paragraph","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"children":[{"type":"text","value":"We can use ","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"key":"zbxtamnNaC"},{"type":"inlineMath","value":"\\mathbf{b}","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathbf\">b</span></span></span></span>","key":"TVuKcDPSBx"},{"type":"text","value":" as the seed vector for the Arnoldi iteration.","position":{"start":{"line":492,"column":1},"end":{"line":492,"column":1}},"key":"gywFQabRvj"}],"key":"O2xYytWW81"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"Q, H = FNC.arnoldi(A, b, 30)\nprint(\"Q has size\", Q.shape)\nprint(\"H has size\", H.shape)","key":"ud0bGil3I5"},{"type":"output","id":"h1ykEGCqdhR4iVMLQqo6n","data":[{"output_type":"stream","name":"stdout","text":"Q has size (100, 31)\nH has size (31, 30)\n"}],"key":"riXU9XqH2U"}],"key":"IuUX9xM03H"},{"type":"paragraph","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"children":[{"type":"text","value":"Here’s one validation of the key identity ","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"key":"cQyPz09qiK"},{"type":"crossReference","identifier":"arnoldimat","label":"arnoldimat","kind":"equation","position":{"start":{"line":500,"column":43},"end":{"line":500,"column":54}},"children":[{"type":"text","value":"(","key":"Upvm8cwH0U"},{"type":"text","value":"8.4.10","key":"RMwcrRRV5j"},{"type":"text","value":")","key":"lcjwbMlyhE"}],"template":"(%s)","enumerator":"8.4.10","resolved":true,"html_id":"arnoldimat","remote":true,"url":"/subspace","dataUrl":"/subspace.json","key":"d8IdlJRUHf"},{"type":"text","value":".","position":{"start":{"line":500,"column":1},"end":{"line":500,"column":1}},"key":"ckr86hZ5Pi"}],"key":"JGuIDt2Mjx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import norm\nshould_be_near_zero = norm(A @ Q[:, :20] - Q[:, :21] @ H[:21, :20])\nprint(should_be_near_zero)","key":"tFEopisX7G"},{"type":"output","id":"KlNm9TLielw2EGffDpY2I","data":[{"output_type":"stream","name":"stdout","text":"7.366224069215788e-14\n"}],"key":"GYNB0pk5fi"}],"key":"Xp97cTS6fM"},{"type":"paragraph","position":{"start":{"line":507,"column":1},"end":{"line":507,"column":1}},"children":[{"type":"text","value":"Using the Krylov matrix to project the linear system into a Kyrlov subspace in ","position":{"start":{"line":507,"column":1},"end":{"line":507,"column":1}},"key":"hCfOAm2erK"},{"type":"crossReference","identifier":"demo-subspace-unstable","label":"demo-subspace-unstable","kind":"proof:example","position":{"start":{"line":507,"column":80},"end":{"line":507,"column":103}},"children":[{"type":"text","value":"Example ","key":"yyohF1yqsg"},{"type":"text","value":"8.4.1","key":"tfNPJtlhAz"}],"template":"Example %s","enumerator":"8.4.1","resolved":true,"html_id":"demo-subspace-unstable","remote":true,"url":"/subspace","dataUrl":"/subspace.json","key":"gB6cjd5SHZ"},{"type":"text","value":" was unable to get the residual much smaller than about ","position":{"start":{"line":507,"column":1},"end":{"line":507,"column":1}},"key":"uPdJGrHF9J"},{"type":"span","position":{"start":{"line":507,"column":1},"end":{"line":507,"column":1}},"children":[{"type":"text","value":"10","key":"TGNTaw9Sz3"},{"type":"superscript","children":[{"type":"text","value":"-4","key":"geWHgGsvK4"}],"key":"n9GD5mX9iN"}],"key":"wDvrkAkW3A"},{"type":"text","value":". But the Arnoldi basis gives us a stable way to work in that subspace and get better results.","position":{"start":{"line":507,"column":1},"end":{"line":507,"column":1}},"key":"vkyu70irah"}],"key":"B4suuZOqJ9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"z, _, _, _ = linalg.lstsq(A @ Q, b)\nx = Q @ z\nresid_norm = norm(b - A @ x)\nprint(f\"residual norm: {resid_norm:.2e}\")","key":"vfai8fxtl2"},{"type":"output","id":"e3guR9FkawmSOL8IaX-TY","data":[{"output_type":"stream","name":"stdout","text":"residual norm: 3.23e-09\n"}],"key":"fXU1ojJKEf"}],"key":"sVTSH4rPIZ"}],"label":"demo-subspace-arnoldi-python","identifier":"demo-subspace-arnoldi-python","html_id":"demo-subspace-arnoldi-python","key":"bNlGH5hE6P"},{"type":"heading","depth":3,"position":{"start":{"line":517,"column":1},"end":{"line":517,"column":1}},"children":[{"type":"text","value":"8.5 ","position":{"start":{"line":517,"column":1},"end":{"line":517,"column":1}},"key":"cKXNiPMN1G"},{"type":"link","identifier":"section-krylov-gmres","label":"section-krylov-gmres","kind":"narrative","position":{"start":{"line":517,"column":5},"end":{"line":517,"column":26}},"url":"/gmres","internal":true,"dataUrl":"/gmres.json","children":[{"type":"text","value":"GMRES","key":"a9tVqiPtsW"}],"key":"eB1KnvYuMZ"}],"identifier":"id-8-5","label":"8.5 ","html_id":"id-8-5","implicit":true,"key":"gwJSq5H6Dy"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-gmres-intro","label":"demo-gmres-intro","kind":"proof:example","position":{"start":{"line":520,"column":1},"end":{"line":520,"column":18}},"children":[{"type":"text","value":"Example ","key":"K6xZ6c0ZcB"},{"type":"text","value":"8.5.1","key":"jvDX5qcjQp"}],"template":"Example %s","enumerator":"8.5.1","resolved":true,"html_id":"demo-gmres-intro","remote":true,"url":"/gmres","dataUrl":"/gmres.json","key":"ZbKYaLMaWF"}],"key":"oeJO8kI7LJ"},{"type":"paragraph","position":{"start":{"line":522,"column":1},"end":{"line":522,"column":1}},"children":[{"type":"text","value":"We define a triangular matrix with known eigenvalues and a random vector ","position":{"start":{"line":522,"column":1},"end":{"line":522,"column":1}},"key":"jk6kv624lg"},{"type":"inlineMath","value":"\\mathbf{b}","position":{"start":{"line":522,"column":1},"end":{"line":522,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{b}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathbf\">b</span></span></span></span>","key":"chqW5AKwW8"},{"type":"text","value":".","position":{"start":{"line":522,"column":1},"end":{"line":522,"column":1}},"key":"ZlyCiRot1q"}],"key":"GAfOIgA9Ul"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ev = 10 + arange(1, 101)\nA = triu(random.rand(100, 100), 1) + diag(ev)\nb = random.rand(100)","key":"H8BAxvM9tH"},{"type":"output","id":"CAVcqlVw-q8qXEw7I9ih2","data":[],"key":"PEBreQkgf3"}],"key":"yv5iIsIma9"},{"type":"paragraph","position":{"start":{"line":530,"column":1},"end":{"line":530,"column":1}},"children":[{"type":"text","value":"Instead of building the Krylov matrices, we use the Arnoldi iteration to generate equivalent orthonormal vectors.","position":{"start":{"line":530,"column":1},"end":{"line":530,"column":1}},"key":"L3fX8aAdyP"}],"key":"IgnV3nvZms"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"Q, H = FNC.arnoldi(A, b, 60)\nprint(H[:5, :5])","key":"DE87XWCqAV"},{"type":"output","id":"S84FeJ3Mi5KsAp7HA0Cap","data":[{"output_type":"stream","name":"stdout","text":"[[85.92022938 33.94520173  5.2347613   1.94921171  2.45454994]\n [19.6267546  54.08546202 26.96740431  1.88333013  0.50602688]\n [ 0.         23.59082453 56.26028593 26.4226143   0.44004885]\n [ 0.          0.         25.06568787 58.32653976 26.20183697]\n [ 0.          0.          0.         25.67186767 57.72433014]]\n"}],"key":"zomn9vdZtp"}],"key":"Ab2d78rJEI"},{"type":"paragraph","position":{"start":{"line":537,"column":1},"end":{"line":537,"column":1}},"children":[{"type":"text","value":"The Arnoldi bases are used to solve the least-squares problems defining the GMRES iterates.","position":{"start":{"line":537,"column":1},"end":{"line":537,"column":1}},"key":"NS6qtXoTnr"}],"key":"yi0M3iUY3a"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import lstsq\nresid = zeros(61)\nresid[0] = norm(b)\nfor m in range(1, 61):\n    s = hstack([norm(b), zeros(m)])\n    z = lstsq(H[: m + 1, :m], s, rcond=None)[0]\n    x = Q[:, :m] @ z\n    resid[m] = norm(b - A @ x)","key":"jC7LIb4j8X"},{"type":"output","id":"GDkTQYW57VD5a6QY52YRx","data":[],"key":"ikw7JHAmeM"}],"key":"NGUAiijDEz"},{"type":"paragraph","position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"children":[{"type":"text","value":"The approximations converge smoothly, practically all the way to machine epsilon.","position":{"start":{"line":550,"column":1},"end":{"line":550,"column":1}},"key":"rfrzoHzG4J"}],"key":"znUxqRwqqi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"semilogy(range(61), resid, \"-o\")\nxlabel(\"$m$\"),  ylabel(\"$\\| b-Ax_m \\|$\")\ntitle(\"Residual for GMRES\");","key":"oaisMnPSxR"},{"type":"output","id":"taGNgpezb2r8EyzwH6JBp","data":[{"output_type":"stream","name":"stderr","text":"<>:2: SyntaxWarning: invalid escape sequence '\\|'\n<>:2: SyntaxWarning: invalid escape sequence '\\|'\n/var/folders/y5/mgf703t57tx9cwrbbjjvdzzr0000gr/T/ipykernel_44645/580350478.py:2: SyntaxWarning: invalid escape sequence '\\|'\n  xlabel(\"$m$\"),  ylabel(\"$\\| b-Ax_m \\|$\")\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"fc0b754d84744fb5654ef73eff562b60","path":"/build/fc0b754d84744fb5654ef73eff562b60.png"}}}],"key":"XRm7kNW5YU"}],"key":"o7P8IFN5jF"}],"label":"demo-gmres-intro-python","identifier":"demo-gmres-intro-python","html_id":"demo-gmres-intro-python","key":"gJQsEudFEH"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-gmres-restart","label":"demo-gmres-restart","kind":"proof:example","position":{"start":{"line":560,"column":1},"end":{"line":560,"column":20}},"children":[{"type":"text","value":"Example ","key":"OzmieEU6NR"},{"type":"text","value":"8.5.2","key":"rZY9YC7pHo"}],"template":"Example %s","enumerator":"8.5.2","resolved":true,"html_id":"demo-gmres-restart","remote":true,"url":"/gmres","dataUrl":"/gmres.json","key":"SnaZCwwyQp"}],"key":"vV6UgNg15r"},{"type":"paragraph","position":{"start":{"line":562,"column":1},"end":{"line":562,"column":1}},"children":[{"type":"text","value":"The following experiments are based on a matrix resulting from discretization of a partial differential equation.","position":{"start":{"line":562,"column":1},"end":{"line":562,"column":1}},"key":"H5OkX01bb5"}],"key":"QEP4QaVYIG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"d = 50;  n = d**2\nA = FNC.poisson2d(d)\nb = ones(n)\nspy(A);","key":"p05zFgLO4R"},{"type":"output","id":"kZPKQOnpIqyQWsKxam9JJ","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2f28202d37aec32e09f3f84a559b5d9f","path":"/build/2f28202d37aec32e09f3f84a559b5d9f.png"}}}],"key":"xQMYfjiGN0"}],"key":"GLxHRcL65p"},{"type":"paragraph","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"children":[{"type":"text","value":"We compare unrestarted GMRES with three different thresholds for restarting. Here we are using ","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"rZcNNkLnTF"},{"type":"inlineCode","value":"gmres","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"j7zdbvfjSt"},{"type":"text","value":" from ","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"a2TqFn7zNN"},{"type":"inlineCode","value":"scipy.sparse.linalg","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"u4wYj08tzw"},{"type":"text","value":", since our simple implementation does not offer restarting. We’re also using a trick to accumulate the vector of residual norms as it runs.","position":{"start":{"line":574,"column":1},"end":{"line":574,"column":1}},"key":"Ya3vnUXZOK"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"gmres","kind":"entry"},"emphasis":true}],"label":"index-Gfdyj6L2c3","identifier":"index-gfdyj6l2c3","html_id":"index-gfdyj6l2c3","key":"lpYxrhg3EH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import gmres\nctr = lambda rvec: resid.append(norm(rvec))\nresid = [1.]\nx, flag = gmres(A, b, restart=None, rtol=1e-8, atol=1e-14, maxiter=120, callback=ctr)\nsemilogy(resid); \nxlabel(\"$m$\"), ylabel(\"residual norm\")\ntitle((\"Convergence of unrestarted GMRES\"));","key":"TkhplAXbRf"},{"type":"output","id":"F5SkXKKCuR1pw8exXaYds","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"64c2e4714ac90a8178a228acc4fd1138","path":"/build/64c2e4714ac90a8178a228acc4fd1138.png"}}}],"key":"kO86WWFvAG"}],"key":"hOI4r9phUI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"maxit = 120\nrtol = 1e-8\nrestarts = [maxit, 20, 40, 60]\nhist = lambda rvec: resid.append(norm(rvec))\nfor r in restarts:\n    resid = [1.]\n    x, flag = gmres(A, b, restart=r, rtol=rtol, atol=1e-14, maxiter=maxit, callback=hist)\n    semilogy(resid)\n\nylim(1e-8, 2)\nlegend([\"none\", \"20\", \"40\", \"60\"])\ntitle((\"Convergence of restarted GMRES\"));","key":"DUdR8UL3TM"},{"type":"output","id":"d0DBnUfwYO7lhnyZ3PSsW","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"9df824ebcea1e928132c8bef193a50fc","path":"/build/9df824ebcea1e928132c8bef193a50fc.png"}}}],"key":"wWkT0J5VoF"}],"key":"cWCw1R3EzX"},{"type":"paragraph","position":{"start":{"line":601,"column":1},"end":{"line":601,"column":1}},"children":[{"type":"text","value":"The “pure” GMRES curve is the lowest one. All of the other curves agree with it until the first restart. Decreasing the restart value makes the convergence per iteration generally worse, but the time required per iteration smaller as well.","position":{"start":{"line":601,"column":1},"end":{"line":601,"column":1}},"key":"ySP2Fmw1rr"}],"key":"jQtdm7Xa5M"}],"label":"demo-gmres-restart-python","identifier":"demo-gmres-restart-python","html_id":"demo-gmres-restart-python","key":"LHaOUc0NDC"},{"type":"heading","depth":3,"position":{"start":{"line":604,"column":1},"end":{"line":604,"column":1}},"children":[{"type":"text","value":"8.6 ","position":{"start":{"line":604,"column":1},"end":{"line":604,"column":1}},"key":"fJGAwmQwlm"},{"type":"link","identifier":"section-krylov-minrescg","label":"section-krylov-minrescg","kind":"narrative","position":{"start":{"line":604,"column":5},"end":{"line":604,"column":29}},"url":"/minrescg","internal":true,"dataUrl":"/minrescg.json","children":[{"type":"text","value":"MINRES and conjugate gradients","key":"Xu8ivBn5Jd"}],"key":"cTLGyv9psw"}],"identifier":"id-8-6","label":"8.6 ","html_id":"id-8-6","implicit":true,"key":"HL0psMR82a"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-minrescg-indefinite","label":"demo-minrescg-indefinite","kind":"proof:example","position":{"start":{"line":607,"column":1},"end":{"line":607,"column":26}},"children":[{"type":"text","value":"Example ","key":"f9DwfqTB4E"},{"type":"text","value":"8.6.2","key":"DWwgRTCnz7"}],"template":"Example %s","enumerator":"8.6.2","resolved":true,"html_id":"demo-minrescg-indefinite","remote":true,"url":"/minrescg","dataUrl":"/minrescg.json","key":"Yxa5st0l2f"}],"key":"qUZRkleIpG"},{"type":"paragraph","position":{"start":{"line":609,"column":1},"end":{"line":609,"column":1}},"children":[{"type":"text","value":"The following matrix is indefinite.","position":{"start":{"line":609,"column":1},"end":{"line":609,"column":1}},"key":"GbPH5q0HkC"}],"key":"Pht7sYqKZf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from numpy.linalg import eig\nimport scipy.sparse as sp\nA = FNC.poisson2d(10) - 20*sp.eye(100)\nev, _ = eig(A.todense())\nnum_negative_ev = sum(ev < 0)\nprint(f\"There are {sum(ev < 0)} negative and {sum(ev > 0)} positive eigenvalues\")","key":"MF5CdlfBS7"},{"type":"output","id":"ryi96uHkPnj9R4SiAmzcV","data":[{"output_type":"stream","name":"stdout","text":"There are 13 negative and 87 positive eigenvalues\n"}],"key":"FbR8YOSdDR"}],"key":"WM5z75Ud3J"},{"type":"paragraph","position":{"start":{"line":620,"column":1},"end":{"line":620,"column":1}},"children":[{"type":"text","value":"We can compute the relevant quantities from ","position":{"start":{"line":620,"column":1},"end":{"line":620,"column":1}},"key":"ib62Ta8pZV"},{"type":"crossReference","kind":"proof:theorem","identifier":"theorem-minrescg-indefinite","label":"theorem-minrescg-indefinite","children":[{"type":"text","value":"Theorem ","key":"X6bTy2Kbpa"},{"type":"text","value":"8.6.1","key":"UrMnNrwA2T"}],"template":"Theorem %s","enumerator":"8.6.1","resolved":true,"html_id":"theorem-minrescg-indefinite","remote":true,"url":"/minrescg","dataUrl":"/minrescg.json","key":"RJ4qlWt4xC"},{"type":"text","value":".","position":{"start":{"line":620,"column":1},"end":{"line":620,"column":1}},"key":"qpZfUml3qe"}],"key":"uEvgNY5Gfh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"m, M = min(-ev[ev < 0]), max(-ev[ev < 0])\nkappa_minus = M / m\nm, M = min(ev[ev > 0]), max(ev[ev > 0])\nkappa_plus = M / m\nS = sqrt(kappa_plus * kappa_minus)\nrho = sqrt((S - 1) / (S + 1))\nprint(f\"Condition numbers: {kappa_minus:.2e}, {kappa_plus:.2e}\")\nprint(f\"Convergence rate: {rho:.3f}\")","key":"uisNtjiq9h"},{"type":"output","id":"ali09dqzpNcoPBF_Jk_OO","data":[{"output_type":"stream","name":"stdout","text":"Condition numbers: 1.02e+01, 3.76e+01\nConvergence rate: 0.950\n"}],"key":"H4PcLo1C91"}],"key":"rUDxkDmSWz"},{"type":"paragraph","position":{"start":{"line":633,"column":1},"end":{"line":633,"column":1}},"children":[{"type":"text","value":"Because the iteration number ","position":{"start":{"line":633,"column":1},"end":{"line":633,"column":1}},"key":"cg1pc5CA7t"},{"type":"inlineMath","value":"m","position":{"start":{"line":633,"column":1},"end":{"line":633,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>","key":"V2Ju28GIMc"},{"type":"text","value":" is halved in ","position":{"start":{"line":633,"column":1},"end":{"line":633,"column":1}},"key":"NarhKlfCp1"},{"type":"crossReference","kind":"equation","identifier":"minres-conv","label":"minres-conv","children":[{"type":"text","value":"(","key":"rJNCgQV2AM"},{"type":"text","value":"8.6.4","key":"R6llPWNwXF"},{"type":"text","value":")","key":"mbg5xaQn2t"}],"template":"(%s)","enumerator":"8.6.4","resolved":true,"html_id":"minres-conv","remote":true,"url":"/minrescg","dataUrl":"/minrescg.json","key":"BhEXeVoIqc"},{"type":"text","value":", the rate constant of linear convergence is the square root of this number, which makes it even closer to 1.","position":{"start":{"line":633,"column":1},"end":{"line":633,"column":1}},"key":"VRihPUuD7M"}],"key":"fw364tUJlH"},{"type":"paragraph","position":{"start":{"line":635,"column":1},"end":{"line":635,"column":1}},"children":[{"type":"text","value":"Now we apply MINRES to a linear system with this matrix, and compare the observed convergence to the upper bound from the theorem.","position":{"start":{"line":635,"column":1},"end":{"line":635,"column":1}},"key":"cRllYCRbDN"}],"key":"W4EoT3u1my"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import minres\nb = random.rand(100)\nresid = [norm(b)]\nhist = lambda x: resid.append(norm(b - A @ x))\nx, flag = minres(A, b, rtol=1e-8, maxiter=1000, callback=hist)","key":"Z8oF1SgZJW"},{"type":"output","id":"Pp_UKG2FALWQdclYyQPIR","data":[],"key":"hi1wILuQLd"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"minres","kind":"entry"},"emphasis":true}],"label":"index-CBCFZmxCg8","identifier":"index-cbcfzmxcg8","html_id":"index-cbcfzmxcg8","key":"E8zo3EZ0LJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"semilogy(resid, \".-\");\nupper = norm(b) * rho**arange(len(resid))\nsemilogy(upper, \"k--\")\nxlabel(\"$m$\"),  ylabel(\"residual norm\")\nlegend([\"MINRES\", \"upper bound\"], loc=\"lower left\")\ntitle(\"Convergence of MINRES\");","visibility":"hide","key":"CQwM5oMFfG"},{"type":"output","id":"k3ggM4jOX9vOWm3CGQcm6","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"82336c88e06a21da5b8acb9e3c0f4288","path":"/build/82336c88e06a21da5b8acb9e3c0f4288.png"}}}],"visibility":"show","key":"YlbKh1Rj9C"}],"data":{"tags":[]},"visibility":"show","key":"Rh9ws0Lt5v"},{"type":"paragraph","position":{"start":{"line":658,"column":1},"end":{"line":658,"column":1}},"children":[{"type":"text","value":"The upper bound turns out to be pessimistic here, especially in the later iterations. However, you can see a slow linear phase in the convergence that tracks the bound closely.","position":{"start":{"line":658,"column":1},"end":{"line":658,"column":1}},"key":"OGQNSrSSvm"}],"key":"f0yfpOIH2G"}],"label":"demo-minrescg-indefinite-python","identifier":"demo-minrescg-indefinite-python","html_id":"demo-minrescg-indefinite-python","key":"URHPUAvr7D"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-minrescg-converge","label":"demo-minrescg-converge","kind":"proof:example","position":{"start":{"line":662,"column":1},"end":{"line":662,"column":24}},"children":[{"type":"text","value":"Example ","key":"NpV4TeHQSL"},{"type":"text","value":"8.6.3","key":"LC3Mu7zQbX"}],"template":"Example %s","enumerator":"8.6.3","resolved":true,"html_id":"demo-minrescg-converge","remote":true,"url":"/minrescg","dataUrl":"/minrescg.json","key":"q5hlSomsw4"}],"key":"hE5wCddgJm"},{"type":"paragraph","position":{"start":{"line":664,"column":1},"end":{"line":664,"column":1}},"children":[{"type":"text","value":"We will compare MINRES and CG on some quasi-random ","key":"W9FVnrXdcp"},{"type":"abbreviation","title":"symmetric positive definite","children":[{"type":"text","value":"SPD","key":"JevCor5ftX"}],"key":"b914SP7OKD"},{"type":"text","value":" problems.  The first matrix has a condition number of 100.","key":"Z2AHU4wtIr"}],"key":"r6SIfM2svg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"n = 5000\ndensity = 0.001\nA = FNC.sprandsym(n, density, rcond=1e-2)\nx = arange(1, n+1) / n\nb = A @ x","key":"ZXKuycK4wR"},{"type":"output","id":"XZwIazyDLYGMAnapr_OX2","data":[],"key":"hrrF5Fb81B"}],"key":"JuwyeoodG0"},{"type":"paragraph","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"children":[{"type":"text","value":"Now we apply both methods and compare the convergence of the system residuals, using implementations imported from ","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"key":"ei0vubCUg9"},{"type":"inlineCode","value":"scipy.sparse.linalg","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"key":"LaLQiNBUM4"},{"type":"text","value":".","position":{"start":{"line":677,"column":1},"end":{"line":677,"column":1}},"key":"rispBW4XSX"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"cg","kind":"entry"},"emphasis":true},{"entry":"Python","subEntry":{"value":"minres","kind":"entry"},"emphasis":false}],"label":"index-aiIWmSx8Gy","identifier":"index-aiiwmsx8gy","html_id":"index-aiiwmsx8gy","key":"qo8lTkR7Wg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import cg, minres\nhist = lambda x: resid.append(norm(b - A @ x))\n\nresid = [norm(b)]\nxMR, flag = minres(A, b, rtol=1e-12, maxiter=100, callback=hist)\nsemilogy(resid / norm(b), label=\"MINRES\")\n\nresid = [norm(b)]\nxCG, flag = cg(A, b, rtol=1e-12, maxiter=100, callback=hist)\nsemilogy(resid / norm(b), label=\"CG\")\n\nxlabel(\"Krylov dimension $m$\"), ylabel(\"$\\\\|r_m\\\\| / \\\\|b\\\\|$\")\ngrid(),  legend(),  title(\"Convergence of MINRES and CG\");","key":"hYhZvh28Oi"},{"type":"output","id":"5PmprW-nC43hKFGNKW95r","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"99c10ffa83dc5e632eff3d2c9f353967","path":"/build/99c10ffa83dc5e632eff3d2c9f353967.png"}}}],"key":"zueZaf4s28"}],"key":"CzqSESYJty"},{"type":"paragraph","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"children":[{"type":"text","value":"There is little difference between the two methods here. Both achieve relative residual of ","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"key":"iyUi2u3BGB"},{"type":"span","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"children":[{"type":"text","value":"10","key":"UxsQ7usplu"},{"type":"superscript","children":[{"type":"text","value":"-6","key":"VYIFd9h2o3"}],"key":"owYZFNSrKJ"}],"key":"RyBJbv3qK1"},{"type":"text","value":" in aout 60 iterations, for example. The final errors are similar, too.","position":{"start":{"line":695,"column":1},"end":{"line":695,"column":1}},"key":"QlvMi5jTY9"}],"key":"ttLzGWhSX3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(f\"MINRES error: {norm(xMR - x) / norm(x):.2e}\")\nprint(f\"CG error: {norm(xCG - x) / norm(x):.2e}\")","key":"Ut1WqB60bH"},{"type":"output","id":"Ohrb_oi09DWSfnYPAy_b2","data":[{"output_type":"stream","name":"stdout","text":"MINRES error: 4.69e-09\nCG error: 3.00e-09\n"}],"key":"NiVedGBe4Z"}],"key":"E88xv5AzNE"},{"type":"paragraph","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"children":[{"type":"text","value":"Next, we increase the condition number of the matrix by a factor of 25. The rule of thumb predicts that the number of iterations required should increase by a factor of about 5; i.e., 300 iterations to reach ","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"MALYqpns0F"},{"type":"span","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"children":[{"type":"text","value":"10","key":"RY25uKtWWS"},{"type":"superscript","children":[{"type":"text","value":"-6","key":"AqDgIdJQCR"}],"key":"g51qKr7vgk"}],"key":"AeNngnbY4N"},{"type":"text","value":".","position":{"start":{"line":702,"column":1},"end":{"line":702,"column":1}},"key":"G5CX4B9kM9"}],"key":"jiI0euuLLp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"A = FNC.sprandsym(n, density, rcond=1e-2 / 25)\nx = arange(1, n+1) / n\nb = A @ x","key":"lIgP65ddJo"},{"type":"output","id":"ncoM-F94vHXjEU8w3lK6p","data":[],"key":"UvWZ1PIuKd"}],"key":"EWEq9rKA5i"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import cg, minres\nhist = lambda x: resid.append(norm(b - A @ x))\n\nresid = [norm(b)]\nxMR, flag = minres(A, b, rtol=1e-12, maxiter=400, callback=hist)\nsemilogy(resid / norm(b), label=\"MINRES\")\n\nresid = [norm(b)]\nxCG, flag = cg(A, b, rtol=1e-12, maxiter=400, callback=hist)\nsemilogy(resid / norm(b), label=\"CG\")\n\nxlabel(\"Krylov dimension $m$\"), ylabel(\"$\\\\|r_m\\\\| / \\\\|b\\\\|$\")\ngrid(),  legend(),  title(\"Convergence of MINRES and CG\")\n\nprint(f\"MINRES error: {norm(xMR - x) / norm(x):.2e}\")\nprint(f\"CG error: {norm(xCG - x) / norm(x):.2e}\")","visibility":"hide","key":"B3lxO2dYL9"},{"type":"output","id":"QjASLvjNNe6EUrbB6eP71","data":[{"output_type":"stream","name":"stdout","text":"MINRES error: 2.57e-07\nCG error: 1.50e-07\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"e6f27c1a946b4324ac93131c153ea707","path":"/build/e6f27c1a946b4324ac93131c153ea707.png"}}}],"visibility":"show","key":"Iv63Nu7XBM"}],"data":{"tags":[]},"visibility":"show","key":"NMbeLjNUI5"},{"type":"paragraph","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"children":[{"type":"text","value":"Both methods have an early superlinear phase that allow them to finish slightly sooner than the factor of 5 predicted: ","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"key":"WLuN8oLTnp"},{"type":"crossReference","kind":"proof:theorem","identifier":"theorem-minrescg-converge","label":"theorem-minrescg-converge","children":[{"type":"text","value":"Theorem ","key":"Qtm23NlFbl"},{"type":"text","value":"8.6.2","key":"TIbCXaT5VR"}],"template":"Theorem %s","enumerator":"8.6.2","resolved":true,"html_id":"theorem-minrescg-converge","remote":true,"url":"/minrescg","dataUrl":"/minrescg.json","key":"KaLEySn1vU"},{"type":"text","value":" is an upper bound, not necessarily an approximation.","position":{"start":{"line":730,"column":1},"end":{"line":730,"column":1}},"key":"IQdDU69ZPI"}],"key":"nieGIrTm6Y"}],"label":"demo-minrescg-converge-python","identifier":"demo-minrescg-converge-python","html_id":"demo-minrescg-converge-python","key":"w6P0FF1XjA"},{"type":"heading","depth":3,"position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"children":[{"type":"text","value":"8.7 ","position":{"start":{"line":733,"column":1},"end":{"line":733,"column":1}},"key":"U4TzA725dW"},{"type":"link","identifier":"section-krylov-matrixfree","label":"section-krylov-matrixfree","kind":"narrative","position":{"start":{"line":733,"column":5},"end":{"line":733,"column":31}},"url":"/matrixfree","internal":true,"dataUrl":"/matrixfree.json","children":[{"type":"text","value":"Matrix-free iterations","key":"MPdjFPyEvX"}],"key":"PYn2c5ABon"}],"identifier":"id-8-7","label":"8.7 ","html_id":"id-8-7","implicit":true,"key":"eUFhtPe6zV"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-matrixfree-blur","label":"demo-matrixfree-blur","kind":"proof:example","position":{"start":{"line":736,"column":1},"end":{"line":736,"column":22}},"children":[{"type":"text","value":"Example ","key":"AgxlM01vvP"},{"type":"text","value":"8.7.1","key":"jn5vvWyckn"}],"template":"Example %s","enumerator":"8.7.1","resolved":true,"html_id":"demo-matrixfree-blur","remote":true,"url":"/matrixfree","dataUrl":"/matrixfree.json","key":"prF0v58KRN"}],"key":"pxVRpqSD8I"},{"type":"paragraph","position":{"start":{"line":738,"column":1},"end":{"line":738,"column":1}},"children":[{"type":"text","value":"We use a readily available test image.","position":{"start":{"line":738,"column":1},"end":{"line":738,"column":1}},"key":"KYoPgmlUnU"}],"key":"vmeiW9PxYr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from skimage import data as testimages\nfrom skimage.color import rgb2gray\nimg = getattr(testimages, \"coffee\")()\nX = rgb2gray(img)\nimshow(X, cmap=\"gray\");","key":"mrGxqjmyq2"},{"type":"output","id":"kv_Xmou7V1WhF2Y-UTX_H","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"d2bec04d13cf33ce992d054cda071a24","path":"/build/d2bec04d13cf33ce992d054cda071a24.png"}}}],"key":"fYo9dtlynW"}],"key":"pJIQk44c7s"},{"type":"paragraph","position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"children":[{"type":"text","value":"We define the one-dimensional tridiagonal blurring matrices.","position":{"start":{"line":748,"column":1},"end":{"line":748,"column":1}},"key":"s69YRRPltU"}],"key":"OkND0oYrGJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import scipy.sparse as sp\ndef blurmatrix(d):\n    data = [[0.25] * (d-1), [0.5] * d, [0.25] * (d-1)]\n    return sp.diags(data, [-1, 0, 1], shape=(d, d))\n\nm, n = X.shape\nB = blurmatrix(m)\nC = blurmatrix(n)","key":"YSMHgTbeHn"},{"type":"output","id":"ayGgXknMJZspiTHdium3w","data":[],"key":"Vqr3Z0F4i2"}],"key":"s4wI4w9O3P"},{"type":"paragraph","position":{"start":{"line":761,"column":1},"end":{"line":761,"column":1}},"children":[{"type":"text","value":"Finally, we show the results of using ","position":{"start":{"line":761,"column":1},"end":{"line":761,"column":1}},"key":"abbUR0z0ii"},{"type":"inlineMath","value":"k=12","position":{"start":{"line":761,"column":1},"end":{"line":761,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">k=12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span></span></span></span>","key":"BA8dFUMhrd"},{"type":"text","value":" repetitions of the blur in each direction.","position":{"start":{"line":761,"column":1},"end":{"line":761,"column":1}},"key":"c8Um4wej3k"}],"key":"icGVuCbqF3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import matrix_power\nblur = lambda X: matrix_power(B, 12) @ X @ matrix_power(C, 12)\n\nimshow(blur(X), cmap=\"gray\")\ntitle(\"Blurred image\");","key":"cMW18KJAvC"},{"type":"output","id":"32u3Ks3U8U7ghqGUFX1yR","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"630304258ba17797d84cac30ac121eb3","path":"/build/630304258ba17797d84cac30ac121eb3.png"}}}],"key":"mu2Nlr3a2D"}],"key":"BjFAd07Qb3"}],"label":"demo-matrixfree-blur-python","identifier":"demo-matrixfree-blur-python","html_id":"demo-matrixfree-blur-python","key":"zKK8GSdDmA"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-matrixfree-deblur","label":"demo-matrixfree-deblur","kind":"proof:example","position":{"start":{"line":773,"column":1},"end":{"line":773,"column":24}},"children":[{"type":"text","value":"Example ","key":"x9GQ9DsXh3"},{"type":"text","value":"8.7.2","key":"tsR2ijTWgY"}],"template":"Example %s","enumerator":"8.7.2","resolved":true,"html_id":"demo-matrixfree-deblur","remote":true,"url":"/matrixfree","dataUrl":"/matrixfree.json","key":"VyshiTLNj6"}],"key":"RaZsVwkPm5"},{"type":"paragraph","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"children":[{"type":"text","value":"We repeat the earlier process to blur an original image ","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"key":"iOMmyLFS8o"},{"type":"inlineMath","value":"\\mathbf{X}","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">X</span></span></span></span>","key":"J0R4Zx8iY7"},{"type":"text","value":" to get ","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"key":"yt1zfIZPxS"},{"type":"inlineMath","value":"\\mathbf{Z}","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">Z</span></span></span></span>","key":"j7xhmhhScy"},{"type":"text","value":".","position":{"start":{"line":775,"column":1},"end":{"line":775,"column":1}},"key":"QCe5BKaDKi"}],"key":"zEoiHYszsW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"img = getattr(testimages, \"coffee\")()\nX = rgb2gray(img)\nm, n = X.shape\n\nimport scipy.sparse as sp\ndef blurmatrix(d):\n    data = [[0.25] * (d-1), [0.5] * d, [0.25] * (d-1)]\n    return sp.diags(data, [-1, 0, 1], shape=(d, d))\nB = blurmatrix(m)\nC = blurmatrix(n)\n\nfrom scipy.sparse.linalg import matrix_power\nblur = lambda X: matrix_power(B, 12) @ X @ matrix_power(C, 12)","visibility":"show","key":"tqDsM4jPCa"},{"type":"output","id":"OCyItmWGh8cWjgseV2EXb","data":[],"visibility":"show","key":"nBurywDbIt"}],"data":{"tags":[]},"visibility":"hide","key":"BBiFSpRfsz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"Z = blur(X)\nimshow(Z, cmap=\"gray\")\ntitle(\"Blurred image\");","key":"e4W0SOkLol"},{"type":"output","id":"QH9H1yneyu3OYvkufXCUd","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"630304258ba17797d84cac30ac121eb3","path":"/build/630304258ba17797d84cac30ac121eb3.png"}}}],"key":"TAhUGu5kpL"}],"key":"avjHdDPOQx"},{"type":"paragraph","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"children":[{"type":"text","value":"Now we imagine that ","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"key":"W0cx0SDWpl"},{"type":"inlineMath","value":"\\mathbf{X}","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">X</span></span></span></span>","key":"qhHPS56b2I"},{"type":"text","value":" is unknown and that we want to recover it from ","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"key":"qXHzGPANF9"},{"type":"inlineMath","value":"\\mathbf{Z}","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">Z</span></span></span></span>","key":"M1agmQFzB0"},{"type":"text","value":". We first need functions that translate between vector and matrix representations.","position":{"start":{"line":801,"column":1},"end":{"line":801,"column":1}},"key":"P4iAMR46TG"}],"key":"mbIfyukjpy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import LinearOperator\nvec = lambda Z: Z.reshape(m * n)\nunvec = lambda z: z.reshape(m, n)\nxform = lambda x: vec(blur(unvec(x)))","key":"bWvAprV5ns"},{"type":"output","id":"bufIraOxNOl-_x40ELCWe","data":[],"key":"fCyXqWD6n9"}],"key":"YwWYDbjubA"},{"type":"paragraph","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"children":[{"type":"text","value":"Now we declare the three-step blur transformation as a ","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"key":"CJIPV9F7hG"},{"type":"inlineCode","value":"LinearOperator","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"key":"ShQD01UwSg"},{"type":"text","value":", supplying also the size of the vector form of an image.","position":{"start":{"line":813,"column":1},"end":{"line":813,"column":1}},"key":"plzO0Mx4hH"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"LinearOperator","kind":"entry"},"emphasis":true}],"label":"index-KGs3NUrivt","identifier":"index-kgs3nurivt","html_id":"index-kgs3nurivt","key":"LVUXBY8XrK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"T = LinearOperator((m * n, m * n), matvec=xform)","key":"ebDHGAkAyz"},{"type":"output","id":"UglmbqfZDzs2S4xW176GV","data":[],"key":"oEnvVDE7Iy"}],"key":"yR0Sz0irHR"},{"type":"paragraph","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"children":[{"type":"text","value":"The blurring operators are symmetric, so we apply ","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"ohxrtvVdJY"},{"type":"inlineCode","value":"minres","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"OUM0u14AeQ"},{"type":"text","value":" to the composite blurring transformation ","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"Kwnk5T2pty"},{"type":"inlineCode","value":"T","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"efEIzk8NWE"},{"type":"text","value":".","position":{"start":{"line":819,"column":1},"end":{"line":819,"column":1}},"key":"VmbUZaRPlw"}],"key":"HCpHfnWXbA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import gmres\ny, flag = gmres(T, vec(Z), rtol=1e-5, maxiter=50)\nY = unvec(maximum(0, minimum(1, y)))\n\n\nsubplot(1, 2, 1),  imshow(X, cmap=\"gray\")\naxis(\"off\"),  title(\"Original\")\nsubplot(1, 2, 2),  imshow(Y, cmap=\"gray\")\naxis(\"off\"),  title(\"Deblurred\");","key":"PiGr76GDSH"},{"type":"output","id":"TZFobrf3byzZFQsP6ai23","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"d3cdd3bb48448fb07e88303f7c9a0081","path":"/build/d3cdd3bb48448fb07e88303f7c9a0081.png"}}}],"key":"weZCV3ko4p"}],"key":"KgH1R6RvrA"}],"label":"demo-matrixfree-deblur-python","identifier":"demo-matrixfree-deblur-python","html_id":"demo-matrixfree-deblur-python","key":"zewcLFEdHi"},{"type":"heading","depth":3,"position":{"start":{"line":834,"column":1},"end":{"line":834,"column":1}},"children":[{"type":"text","value":"8.8 ","position":{"start":{"line":834,"column":1},"end":{"line":834,"column":1}},"key":"y2TfZPYafg"},{"type":"link","identifier":"section-krylov-precond","label":"section-krylov-precond","kind":"narrative","position":{"start":{"line":834,"column":5},"end":{"line":834,"column":28}},"url":"/precond","internal":true,"dataUrl":"/precond.json","children":[{"type":"text","value":"Preconditioning","key":"qFTUj9mrK7"}],"key":"E5Gzj2Eg6n"}],"identifier":"id-8-8","label":"8.8 ","html_id":"id-8-8","implicit":true,"key":"OpKoSb4FI2"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-precond-diagonal","label":"demo-precond-diagonal","kind":"proof:example","position":{"start":{"line":837,"column":1},"end":{"line":837,"column":23}},"children":[{"type":"text","value":"Example ","key":"H37XgS2YRA"},{"type":"text","value":"8.8.1","key":"zFBAyHqVxu"}],"template":"Example %s","enumerator":"8.8.1","resolved":true,"html_id":"demo-precond-diagonal","remote":true,"url":"/precond","dataUrl":"/precond.json","key":"gVOvRV2t56"}],"key":"q8QGb4jh3Z"},{"type":"paragraph","position":{"start":{"line":839,"column":1},"end":{"line":839,"column":1}},"children":[{"type":"text","value":"Here is an ","key":"BPJNUHUg3l"},{"type":"abbreviation","title":"symmetric positive definite","children":[{"type":"text","value":"SPD","key":"LQcifw0gTe"}],"key":"kYSSW9CxRi"},{"type":"text","value":" matrix that arises from solving partial differential equations.","key":"QxvH0SiHlb"}],"key":"U3KgfHB3Yn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse import sparray\nimport rogues\nA = rogues.wathen(60, 60)\nn = A.shape[0]\nprint(f\"Matrix is {n} x {n} with {A.nnz} nonzeros\")","key":"ZVJey4xmNl"},{"type":"output","id":"keUS69xrcmF45Iug-RznO","data":[{"output_type":"stream","name":"stdout","text":"Matrix is 11041 x 11041 with 170161 nonzeros\n"}],"key":"HNCoZOx6zU"}],"key":"rsrRTYs369"},{"type":"paragraph","position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"children":[{"type":"text","value":"There is an easy way to use the diagonal elements of ","position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"key":"NsQ7dfFvxI"},{"type":"inlineMath","value":"\\mathbf{A}","position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">A</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{A}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">A</span></span></span></span>","key":"BpolkUOODm"},{"type":"text","value":", or any other vector, as a diagonal preconditioner.","position":{"start":{"line":849,"column":1},"end":{"line":849,"column":1}},"key":"BxXLjqFI6o"}],"key":"NQTbZb9X6Y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import scipy.sparse as sp\nprec = sp.diags(1 / A.diagonal(), 0)","key":"Rpt3h3xvPj"},{"type":"output","id":"BNYs9-UyRnyHYh1t17Phf","data":[],"key":"MbHCsFOR3x"}],"key":"tpj279m567"},{"type":"paragraph","position":{"start":{"line":856,"column":1},"end":{"line":856,"column":1}},"children":[{"type":"text","value":"We now compare CG with and without the preconditioner.","position":{"start":{"line":856,"column":1},"end":{"line":856,"column":1}},"key":"bCIrJ7l3VI"}],"key":"d2JTWUIlUI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import cg\nb = ones(n)\nhist = lambda x: resid.append(norm(b - A @ x))\nresid = [norm(b)]\nstart = timer()\nx, _ = cg(A, b, rtol=1e-4, maxiter=200, callback=hist)\nprint(f\"No preconditioner: Finished in {timer() - start:.2f} sec\")\nresid_plain = resid.copy()\nresid = [norm(b)]\nstart = timer()\nx, _ = cg(A, b, rtol=1e-4, maxiter=200, M=prec, callback=hist)\nprint(f\"Diagonal preconditioner: Finished in {timer() - start:.2f} sec\")\nresid_prec = resid.copy()\n\nsemilogy(resid_plain, label=\"no preconditioner\")\nsemilogy(resid_prec, label=\"diagonal preconditioner\")\nxlabel(\"iteration\"), ylabel(\"residual norm\")\nlegend(),  title(\"Convergence of CG with and without preconditioning\");","visibility":"hide","key":"U7Z0SsLbwU"},{"type":"output","id":"tV9yckHrkd8_rZToB5awj","data":[{"output_type":"stream","name":"stdout","text":"No preconditioner: Finished in 1.15 sec\n"},{"output_type":"stream","name":"stdout","text":"Diagonal preconditioner: Finished in 0.32 sec\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f1fe579e82c20e3715d6d8069bc93fc4","path":"/build/f1fe579e82c20e3715d6d8069bc93fc4.png"}}}],"visibility":"show","key":"HhczdEXFYA"}],"data":{"tags":[]},"visibility":"show","key":"gNDc7BBq2P"},{"type":"paragraph","position":{"start":{"line":881,"column":1},"end":{"line":881,"column":1}},"children":[{"type":"text","value":"The diagonal preconditioner cut down substantially on the number of iterations and the execution time.","position":{"start":{"line":881,"column":1},"end":{"line":881,"column":1}},"key":"y8SsyrnwAL"}],"key":"hUKbI3LcPI"}],"label":"demo-precond-diagonal-python","identifier":"demo-precond-diagonal-python","html_id":"demo-precond-diagonal-python","key":"K2MFaQ5Afr"},{"type":"details","open":true,"children":[{"type":"summary","children":[{"type":"crossReference","identifier":"demo-precond-gmres","label":"demo-precond-gmres","kind":"proof:example","position":{"start":{"line":885,"column":1},"end":{"line":885,"column":20}},"children":[{"type":"text","value":"Example ","key":"J2Cz7xH1zt"},{"type":"text","value":"8.8.2","key":"RTYxvuCGFc"}],"template":"Example %s","enumerator":"8.8.2","resolved":true,"html_id":"demo-precond-gmres","remote":true,"url":"/precond","dataUrl":"/precond.json","key":"bo1by5d2Ls"}],"key":"E01vVi0T5k"},{"type":"paragraph","position":{"start":{"line":887,"column":1},"end":{"line":887,"column":1}},"children":[{"type":"text","value":"Here is a random nonsymmetric matrix.","position":{"start":{"line":887,"column":1},"end":{"line":887,"column":1}},"key":"pYGmQPhoW7"}],"key":"TA3nn0ef5F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import scipy.sparse as sp\nn = 8000\nA = 2.8 * sp.eye(n) + sp.rand(n, n, 0.002)","key":"sLrV4hCKAk"},{"type":"output","id":"MK-bFHxMkKvKgxoJK7MeW","data":[],"key":"miB1N1GWNn"}],"key":"F39bJISqwY"},{"type":"paragraph","position":{"start":{"line":895,"column":1},"end":{"line":895,"column":1}},"children":[{"type":"text","value":"Without a preconditioner, GMRES can solve a system with this matrix.","position":{"start":{"line":895,"column":1},"end":{"line":895,"column":1}},"key":"gsQIB1fXwo"}],"key":"C5O90QElA0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import gmres\n\nb = random.rand(n)\nhist = lambda rvec: resid.append(norm(rvec))\nresid = [1.]\n\nstart = timer()\nx, flag = gmres(A, b, maxiter=300, rtol=1e-10, restart=50, callback=hist)\nprint(f\"time for plain GMRES: {timer() - start:.3f} sec\")\nresid_plain = resid.copy()","key":"yWJ60gVnlD"},{"type":"output","id":"XLNBCFO3yY9v8kKtB5r0_","data":[{"output_type":"stream","name":"stdout","text":"time for plain GMRES: 0.177 sec\n"}],"key":"NEKzo8Oi9e"}],"key":"kzFbxbMCjl"},{"type":"paragraph","position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"children":[{"type":"text","value":"The following version of incomplete LU factorization drops all sufficiently small values (i.e., replaces them with zeros). This keeps the number of nonzeros in the factors under control.","position":{"start":{"line":913,"column":1},"end":{"line":913,"column":1}},"key":"NmCpMBqGjK"}],"indexEntries":[{"entry":"Python","subEntry":{"value":"spilu","kind":"entry"},"emphasis":true}],"label":"index-U5F7sIKzw4","identifier":"index-u5f7sikzw4","html_id":"index-u5f7sikzw4","key":"Y2N3sXpbc4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import spilu\niLU = spilu(A, drop_tol=0.2)\nprint(f\"Factors have {iLU.nnz} nonzeros, while A has {A.nnz}\")","key":"GYbzJzeZ1L"},{"type":"output","id":"k6LWE-PGN9zmA3-2FCVGt","data":[{"output_type":"stream","name":"stderr","text":"/var/folders/y5/mgf703t57tx9cwrbbjjvdzzr0000gr/T/ipykernel_44645/769705972.py:2: SparseEfficiencyWarning: spilu converted its input to CSC format\n  iLU = spilu(A, drop_tol=0.2)\n"},{"output_type":"stream","name":"stdout","text":"Factors have 90006 nonzeros, while A has 135984\n"}],"key":"sWtNDTt3X1"}],"key":"Z7KRBFaKFS"},{"type":"paragraph","position":{"start":{"line":921,"column":1},"end":{"line":921,"column":1}},"children":[{"type":"text","value":"The result is not a true factorization of the original matrix. However, it’s close enough for an approximate inverse in a preconditioner.","position":{"start":{"line":921,"column":1},"end":{"line":921,"column":1}},"key":"eFJQIN09g2"}],"key":"UC3O0Y7zFy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from scipy.sparse.linalg import LinearOperator\nprec = LinearOperator((n, n), matvec=lambda y: iLU.solve(y))\n\nresid = [1.];  start = timer()\nx, flag = gmres(A, b, M=prec, maxiter=300, rtol=1e-10, restart=50, callback=hist)\nprint(f\"time for preconditioned GMRES: {timer() - start:.3f} sec\")\nresid_prec = resid","key":"kSbFMWGdYL"},{"type":"output","id":"AuDAL27Te7fIgVouhN6_B","data":[{"output_type":"stream","name":"stdout","text":"time for preconditioned GMRES: 0.127 sec\n"}],"key":"ngqPBzm7LM"}],"key":"iExqOxB6eM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"semilogy(resid_plain, label=\"no prec.\")\nsemilogy(resid_prec, label=\"iLU prec.\")\nxlabel(\"iteration number\"),  ylabel(\"residual norm\")\nlegend()\ntitle(\"GMRES convergence compared\");","visibility":"hide","key":"EGEM3Gs79A"},{"type":"output","id":"1B7jepnBtzzVpiazbRuVv","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 700x400 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"f954d353256da46f88d52e72634d4be5","path":"/build/f954d353256da46f88d52e72634d4be5.png"}}}],"visibility":"show","key":"jPDaO8bCzn"}],"data":{"tags":[]},"visibility":"show","key":"yABer8w96t"}],"label":"demo-precond-gmres-python","identifier":"demo-precond-gmres-python","html_id":"demo-precond-gmres-python","key":"d6HTAADPiL"}],"key":"QxMNaInnnZ"}],"key":"hKQvBKgcTB"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Chapter 7","url":"/chapter7-2","group":"Python codes"},"next":{"title":"Chapter 9","url":"/chapter9-2","group":"Python codes"}}},"domain":"http://localhost:3000"}